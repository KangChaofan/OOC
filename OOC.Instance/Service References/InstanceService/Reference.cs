//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。
//     运行时版本:4.0.30319.17929
//
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将会丢失。
// </auto-generated>
//------------------------------------------------------------------------------

namespace OOC.Instance.InstanceService {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="InstanceHeartbeatStatus", Namespace="http://schemas.datacontract.org/2004/07/OOC.Contract.Data.Request")]
    [System.SerializableAttribute()]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(OOC.Instance.InstanceService.InstanceStatus))]
    public partial class InstanceHeartbeatStatus : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string InstanceNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int RunningTaskField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private OOC.Instance.InstanceService.NodeSystemStatus SystemStatusField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string InstanceName {
            get {
                return this.InstanceNameField;
            }
            set {
                if ((object.ReferenceEquals(this.InstanceNameField, value) != true)) {
                    this.InstanceNameField = value;
                    this.RaisePropertyChanged("InstanceName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int RunningTask {
            get {
                return this.RunningTaskField;
            }
            set {
                if ((this.RunningTaskField.Equals(value) != true)) {
                    this.RunningTaskField = value;
                    this.RaisePropertyChanged("RunningTask");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public OOC.Instance.InstanceService.NodeSystemStatus SystemStatus {
            get {
                return this.SystemStatusField;
            }
            set {
                if ((object.ReferenceEquals(this.SystemStatusField, value) != true)) {
                    this.SystemStatusField = value;
                    this.RaisePropertyChanged("SystemStatus");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="NodeSystemStatus", Namespace="http://schemas.datacontract.org/2004/07/OOC.Contract.Data.Common")]
    [System.SerializableAttribute()]
    public partial class NodeSystemStatus : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private long AvailableRamSizeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private decimal LoadAverageField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int ProcessCountField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private long TotalRamSizeField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public long AvailableRamSize {
            get {
                return this.AvailableRamSizeField;
            }
            set {
                if ((this.AvailableRamSizeField.Equals(value) != true)) {
                    this.AvailableRamSizeField = value;
                    this.RaisePropertyChanged("AvailableRamSize");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public decimal LoadAverage {
            get {
                return this.LoadAverageField;
            }
            set {
                if ((this.LoadAverageField.Equals(value) != true)) {
                    this.LoadAverageField = value;
                    this.RaisePropertyChanged("LoadAverage");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ProcessCount {
            get {
                return this.ProcessCountField;
            }
            set {
                if ((this.ProcessCountField.Equals(value) != true)) {
                    this.ProcessCountField = value;
                    this.RaisePropertyChanged("ProcessCount");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public long TotalRamSize {
            get {
                return this.TotalRamSizeField;
            }
            set {
                if ((this.TotalRamSizeField.Equals(value) != true)) {
                    this.TotalRamSizeField = value;
                    this.RaisePropertyChanged("TotalRamSize");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="InstanceStatus", Namespace="http://schemas.datacontract.org/2004/07/OOC.Contract.Data.Common")]
    [System.SerializableAttribute()]
    public partial class InstanceStatus : OOC.Instance.InstanceService.InstanceHeartbeatStatus {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string InstanceEndPointField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string InstanceEndPoint {
            get {
                return this.InstanceEndPointField;
            }
            set {
                if ((object.ReferenceEquals(this.InstanceEndPointField, value) != true)) {
                    this.InstanceEndPointField = value;
                    this.RaisePropertyChanged("InstanceEndPoint");
                }
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="InstanceService.IInstanceService")]
    public interface IInstanceService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IInstanceService/Heartbeat", ReplyAction="http://tempuri.org/IInstanceService/HeartbeatResponse")]
        void Heartbeat(OOC.Instance.InstanceService.InstanceHeartbeatStatus status);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IInstanceService/QueryStatusByInstanceName", ReplyAction="http://tempuri.org/IInstanceService/QueryStatusByInstanceNameResponse")]
        OOC.Instance.InstanceService.InstanceStatus QueryStatusByInstanceName(string instanceName);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IInstanceServiceChannel : OOC.Instance.InstanceService.IInstanceService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class InstanceServiceClient : System.ServiceModel.ClientBase<OOC.Instance.InstanceService.IInstanceService>, OOC.Instance.InstanceService.IInstanceService {
        
        public InstanceServiceClient() {
        }
        
        public InstanceServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public InstanceServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public InstanceServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public InstanceServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public void Heartbeat(OOC.Instance.InstanceService.InstanceHeartbeatStatus status) {
            base.Channel.Heartbeat(status);
        }
        
        public OOC.Instance.InstanceService.InstanceStatus QueryStatusByInstanceName(string instanceName) {
            return base.Channel.QueryStatusByInstanceName(instanceName);
        }
    }
}
