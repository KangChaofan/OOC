<<<<<<< HEAD
ï»¿<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>System.Net.Http.Formatting</name>
  </assembly>
  <members>
    <member name="T:System.Net.Http.HttpClientExtensions">
      <summary>Extension methods that aid in making formatted requests using <see cref="T:System.Net.Http.HttpClient" />.</summary>
    </member>
    <member name="M:System.Net.Http.HttpClientExtensions.PostAsJsonAsync``1(System.Net.Http.HttpClient,System.String,``0)">
      <summary>Sends a POST request as an asynchronous operation, with a specified value serialized as JSON.</summary>
      <returns>A task object representing the asynchronous operation.</returns>
      <param name="client">The client used to make the request.</param>
      <param name="requestUri">The URI the request is sent to.</param>
      <param name="value">The value to write into the entity body of the request.</param>
      <typeparam name="T">The type of object to serialize.</typeparam>
    </member>
    <member name="M:System.Net.Http.HttpClientExtensions.PostAsJsonAsync``1(System.Net.Http.HttpClient,System.String,``0,System.Threading.CancellationToken)">
      <summary>Sends a POST request as an asynchronous operation, with a specified value serialized as JSON. Includes a cancellation token to cancel the request.</summary>
      <returns>A task object representing the asynchronous operation.</returns>
      <param name="client">The client used to make the request.</param>
      <param name="requestUri">The URI the request is sent to.</param>
      <param name="value">The value to write into the entity body of the request.</param>
      <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
      <typeparam name="T">The type of object to serialize.</typeparam>
    </member>
    <member name="M:System.Net.Http.HttpClientExtensions.PostAsXmlAsync``1(System.Net.Http.HttpClient,System.String,``0)">
      <summary>Sends a POST request as an asynchronous operation, with a specified value serialized as XML.</summary>
      <returns>A task object representing the asynchronous operation.</returns>
      <param name="client">The client used to make the request.</param>
      <param name="requestUri">The URI the request is sent to.</param>
      <param name="value">The value to write into the entity body of the request.</param>
      <typeparam name="T">The type of object to serialize.</typeparam>
    </member>
    <member name="M:System.Net.Http.HttpClientExtensions.PostAsXmlAsync``1(System.Net.Http.HttpClient,System.String,``0,System.Threading.CancellationToken)">
      <summary>Sends a POST request as an asynchronous operation, with a specified value serialized as XML. Includes a cancellation token to cancel the request.</summary>
      <returns>A task object representing the asynchronous operation.</returns>
      <param name="client">The client used to make the request.</param>
      <param name="requestUri">The URI the request is sent to.</param>
      <param name="value">The value to write into the entity body of the request.</param>
      <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
      <typeparam name="T">The type of object to serialize.</typeparam>
    </member>
    <member name="M:System.Net.Http.HttpClientExtensions.PostAsync``1(System.Net.Http.HttpClient,System.String,``0,System.Net.Http.Formatting.MediaTypeFormatter)">
      <summary>Sends a POST request as an asynchronous operation, with a specified value serialized using the given formatter.</summary>
      <returns>A task object representing the asynchronous operation.</returns>
      <param name="client">The client used to make the request.</param>
      <param name="requestUri">The URI the request is sent to.</param>
      <param name="value">The value to write into the entity body of the request.</param>
      <param name="formatter">The formatter used to serialize the value.</param>
      <typeparam name="T">The type of object to serialize.</typeparam>
    </member>
    <member name="M:System.Net.Http.HttpClientExtensions.PostAsync``1(System.Net.Http.HttpClient,System.String,``0,System.Net.Http.Formatting.MediaTypeFormatter,System.Net.Http.Headers.MediaTypeHeaderValue,System.Threading.CancellationToken)">
      <summary>Sends a POST request as an asynchronous operation, with a specified value serialized using the given formatter and media type.</summary>
      <returns>A task object representing the asynchronous operation.</returns>
      <param name="client">The client used to make the request.</param>
      <param name="requestUri">The URI the request is sent to.</param>
      <param name="value">The value to write into the entity body of the request.</param>
      <param name="formatter">The formatter used to serialize the value.</param>
      <param name="mediaType">The authoritative value of the Content-Type header. Can be null, in which case the  default content type of the formatter will be used.</param>
      <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
      <typeparam name="T">The type of object to serialize.</typeparam>
    </member>
    <member name="M:System.Net.Http.HttpClientExtensions.PostAsync``1(System.Net.Http.HttpClient,System.String,``0,System.Net.Http.Formatting.MediaTypeFormatter,System.String)">
      <summary>Sends a POST request as an asynchronous operation, with a specified value serialized using the given formatter and media type string.</summary>
      <returns>A task object representing the asynchronous operation.</returns>
      <param name="client">The client used to make the request.</param>
      <param name="requestUri">The URI the request is sent to.</param>
      <param name="value">The value to write into the entity body of the request.</param>
      <param name="formatter">The formatter used to serialize the value.</param>
      <param name="mediaType">The authoritative value of the Content-Type header. Can be null, in which case the  default content type of the formatter will be used.</param>
      <typeparam name="T">The type of object to serialize.</typeparam>
    </member>
    <member name="M:System.Net.Http.HttpClientExtensions.PostAsync``1(System.Net.Http.HttpClient,System.String,``0,System.Net.Http.Formatting.MediaTypeFormatter,System.String,System.Threading.CancellationToken)">
      <summary>Sends a POST request as an asynchronous operation, with a specified value serialized using the given formatter and media type string. Includes a cancellation token to cancel the request.</summary>
      <returns>A task object representing the asynchronous operation.</returns>
      <param name="client">The client used to make the request.</param>
      <param name="requestUri">The URI the request is sent to.</param>
      <param name="value">The value to write into the entity body of the request.</param>
      <param name="formatter">The formatter used to serialize the value.</param>
      <param name="mediaType">The authoritative value of the Content-Type header. Can be null, in which case the  default content type of the formatter will be used.</param>
      <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
      <typeparam name="T">The type of object to serialize.</typeparam>
    </member>
    <member name="M:System.Net.Http.HttpClientExtensions.PostAsync``1(System.Net.Http.HttpClient,System.String,``0,System.Net.Http.Formatting.MediaTypeFormatter,System.Threading.CancellationToken)">
      <summary>Sends a POST request as an asynchronous operation, with a specified value serialized using the given formatter. Includes a cancellation token to cancel the request.</summary>
      <returns>A task object representing the asynchronous operation.</returns>
      <param name="client">The client used to make the request.</param>
      <param name="requestUri">The URI the request is sent to.</param>
      <param name="value">The value to write into the entity body of the request.</param>
      <param name="formatter">The formatter used to serialize the value.</param>
      <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
      <typeparam name="T">The type of object to serialize.</typeparam>
    </member>
    <member name="M:System.Net.Http.HttpClientExtensions.PutAsJsonAsync``1(System.Net.Http.HttpClient,System.String,``0)">
      <summary>Sends a PUT request as an asynchronous operation, with a specified value serialized as JSON.</summary>
      <returns>A task object representing the asynchronous operation.</returns>
      <param name="client">The client used to make the request.</param>
      <param name="requestUri">The URI the request is sent to.</param>
      <param name="value">The value to write into the entity body of the request.</param>
      <typeparam name="T">The type of object to serialize.</typeparam>
    </member>
    <member name="M:System.Net.Http.HttpClientExtensions.PutAsJsonAsync``1(System.Net.Http.HttpClient,System.String,``0,System.Threading.CancellationToken)">
      <summary>Sends a PUT request as an asynchronous operation, with a specified value serialized as JSON. Includes a cancellation token to cancel the request.</summary>
      <returns>A task object representing the asynchronous operation.</returns>
      <param name="client">The client used to make the request.</param>
      <param name="requestUri">The URI the request is sent to.</param>
      <param name="value">The value to write into the entity body of the request.</param>
      <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation. </param>
      <typeparam name="T">The type of object to serialize.</typeparam>
    </member>
    <member name="M:System.Net.Http.HttpClientExtensions.PutAsXmlAsync``1(System.Net.Http.HttpClient,System.String,``0)">
      <summary>Sends a PUT request as an asynchronous operation, with a specified value serialized as XML.</summary>
      <returns>A task object representing the asynchronous operation.</returns>
      <param name="client">The client used to make the request.</param>
      <param name="requestUri">The URI the request is sent to.</param>
      <param name="value">The value to write into the entity body of the request.</param>
      <typeparam name="T">The type of object to serialize.</typeparam>
    </member>
    <member name="M:System.Net.Http.HttpClientExtensions.PutAsXmlAsync``1(System.Net.Http.HttpClient,System.String,``0,System.Threading.CancellationToken)">
      <summary>Sends a PUT request as an asynchronous operation, with a specified value serialized as XML. Includes a cancellation token to cancel the request.</summary>
      <returns>A task object representing the asynchronous operation.</returns>
      <param name="client">The client used to make the request.</param>
      <param name="requestUri">The URI the request is sent to.</param>
      <param name="value">The value to write into the entity body of the request.</param>
      <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
      <typeparam name="T">The type of object to serialize.</typeparam>
    </member>
    <member name="M:System.Net.Http.HttpClientExtensions.PutAsync``1(System.Net.Http.HttpClient,System.String,``0,System.Net.Http.Formatting.MediaTypeFormatter)">
      <summary>Sends a PUT request as an asynchronous operation, with a specified value serialized using the given formatter.</summary>
      <returns>A task object representing the asynchronous operation.</returns>
      <param name="client">The client used to make the request.</param>
      <param name="requestUri">The URI the request is sent to.</param>
      <param name="value">The value to write into the entity body of the request.</param>
      <param name="formatter">The formatter used to serialize the value.</param>
      <typeparam name="T">The type of object to serialize.</typeparam>
    </member>
    <member name="M:System.Net.Http.HttpClientExtensions.PutAsync``1(System.Net.Http.HttpClient,System.String,``0,System.Net.Http.Formatting.MediaTypeFormatter,System.Net.Http.Headers.MediaTypeHeaderValue,System.Threading.CancellationToken)">
      <summary> Sends a PUT request as an asynchronous operation, with a specified value serialized using the given formatter and media type. Includes a cancellation token to cancel the request.</summary>
      <returns>A task object representing the asynchronous operation.</returns>
      <param name="client">The client used to make the request.</param>
      <param name="requestUri">The URI the request is sent to.</param>
      <param name="value">The value to write into the entity body of the request.</param>
      <param name="formatter">The formatter used to serialize the value.</param>
      <param name="mediaType">The authoritative value of the Content-Type header. Can be null, in which case the  default content type of the formatter will be used.</param>
      <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
      <typeparam name="T">The type of object to serialize.</typeparam>
    </member>
    <member name="M:System.Net.Http.HttpClientExtensions.PutAsync``1(System.Net.Http.HttpClient,System.String,``0,System.Net.Http.Formatting.MediaTypeFormatter,System.String)">
      <summary>Sends a PUT request as an asynchronous operation, with a specified value serialized using the given formatter and media type string.</summary>
      <returns>A task object representing the asynchronous operation.</returns>
      <param name="client">The client used to make the request.</param>
      <param name="requestUri">The URI the request is sent to.</param>
      <param name="value">The value to write into the entity body of the request.</param>
      <param name="formatter">The formatter used to serialize the value.</param>
      <param name="mediaType">The authoritative value of the Content-Type header. Can be null, in which case the  default content type of the formatter will be used.</param>
      <typeparam name="T">The type of object to serialize.</typeparam>
    </member>
    <member name="M:System.Net.Http.HttpClientExtensions.PutAsync``1(System.Net.Http.HttpClient,System.String,``0,System.Net.Http.Formatting.MediaTypeFormatter,System.String,System.Threading.CancellationToken)">
      <summary>Sends a PUT request as an asynchronous operation, with a specified value serialized using the given formatter and media type string. Includes a cancellation token to cancel the request.</summary>
      <returns>A task object representing the asynchronous operation.</returns>
      <param name="client">The client used to make the request.</param>
      <param name="requestUri">The URI the request is sent to.</param>
      <param name="value">The value to write into the entity body of the request.</param>
      <param name="formatter">The formatter used to serialize the value.</param>
      <param name="mediaType">The authoritative value of the Content-Type header. Can be null, in which case the  default content type of the formatter will be used.</param>
      <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
      <typeparam name="T">The type of object to serialize.</typeparam>
    </member>
    <member name="M:System.Net.Http.HttpClientExtensions.PutAsync``1(System.Net.Http.HttpClient,System.String,``0,System.Net.Http.Formatting.MediaTypeFormatter,System.Threading.CancellationToken)">
      <summary>Sends a PUT request as an asynchronous operation, with a specified value serialized using the given formatter and medai type string. Includes a cancellation token to cancel the request.</summary>
      <returns>A task object representing the asynchronous operation.</returns>
      <param name="client">The client used to make the request.</param>
      <param name="requestUri">The URI the request is sent to.</param>
      <param name="value">The value to write into the entity body of the request.</param>
      <param name="formatter">The formatter used to serialize the value.</param>
      <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
      <typeparam name="T">The type of object to serialize.</typeparam>
    </member>
    <member name="T:System.Net.Http.HttpClientFactory">
      <summary>Represents the factory for creating new instance of <see cref="T:System.Net.Http.HttpClient" />.</summary>
    </member>
    <member name="M:System.Net.Http.HttpClientFactory.Create(System.Net.Http.DelegatingHandler[])">
      <summary>Creates a new instance of the <see cref="T:System.Net.Http.HttpClient" />.</summary>
      <returns>A new instance of the <see cref="T:System.Net.Http.HttpClient" />.</returns>
      <param name="handlers">The list of HTTP handler that delegates the processing of HTTP response messages to another handler.</param>
    </member>
    <member name="M:System.Net.Http.HttpClientFactory.Create(System.Net.Http.HttpMessageHandler,System.Net.Http.DelegatingHandler[])">
      <summary>Creates a new instance of the <see cref="T:System.Net.Http.HttpClient" />.</summary>
      <returns>A new instance of the <see cref="T:System.Net.Http.HttpClient" />.</returns>
      <param name="innerHandler">The inner handler which is responsible for processing the HTTP response messages.</param>
      <param name="handlers">The list of HTTP handler that delegates the processing of HTTP response messages to another handler.</param>
    </member>
    <member name="M:System.Net.Http.HttpClientFactory.CreatePipeline(System.Net.Http.HttpMessageHandler,System.Collections.Generic.IEnumerable{System.Net.Http.DelegatingHandler})">
      <summary>Creates a new instance of the <see cref="T:System.Net.Http.HttpClient" /> which should be pipelined.</summary>
      <returns>A new instance of the <see cref="T:System.Net.Http.HttpClient" /> which should be pipelined.</returns>
      <param name="innerHandler">The inner handler which is responsible for processing the HTTP response messages.</param>
      <param name="handlers">The list of HTTP handler that delegates the processing of HTTP response messages to another handler.</param>
    </member>
    <member name="T:System.Net.Http.HttpContentExtensions">
      <summary>Specifies extension methods to allow strongly typed objects to be read from HttpContent instances.</summary>
    </member>
    <member name="M:System.Net.Http.HttpContentExtensions.ReadAsAsync``1(System.Net.Http.HttpContent)">
      <summary> Returns a Task that will yield an object of the specified type &lt;typeparamref name="T" /&gt; from the content instance. </summary>
      <returns>An object instance of the specified type.</returns>
      <param name="content">The HttpContent instance from which to read.</param>
      <typeparam name="T">The type of the object to read.</typeparam>
    </member>
    <member name="M:System.Net.Http.HttpContentExtensions.ReadAsAsync``1(System.Net.Http.HttpContent,System.Collections.Generic.IEnumerable{System.Net.Http.Formatting.MediaTypeFormatter})">
      <summary> Returns a Task that will yield an object of the specified type &lt;typeparamref name="T" /&gt; from the content instance. </summary>
      <returns>An object instance of the specified type.</returns>
      <param name="content">The HttpContent instance from which to read.</param>
      <param name="formatters">The collection of MediaTyepFormatter instances to use.</param>
      <typeparam name="T">The type of the object to read.</typeparam>
    </member>
    <member name="M:System.Net.Http.HttpContentExtensions.ReadAsAsync``1(System.Net.Http.HttpContent,System.Collections.Generic.IEnumerable{System.Net.Http.Formatting.MediaTypeFormatter},System.Net.Http.Formatting.IFormatterLogger)">
      <summary> Returns a Task that will yield an object of the specified type &lt;typeparamref name="T" /&gt; from the content instance. </summary>
      <returns>An object instance of the specified type.</returns>
      <param name="content">The HttpContent instance from which to read.</param>
      <param name="formatters">The collection of MediaTypeFormatter instances to use.</param>
      <param name="formatterLogger">The IFormatterLogger to log events to.</param>
      <typeparam name="T">The type of the object to read.</typeparam>
    </member>
    <member name="M:System.Net.Http.HttpContentExtensions.ReadAsAsync(System.Net.Http.HttpContent,System.Type)">
      <summary> Returns a Task that will yield an object of the specified type from the content instance. </summary>
      <returns>A Task that will yield an object instance of the specified type.</returns>
      <param name="content">The HttpContent instance from which to read.</param>
      <param name="type">The type of the object to read.</param>
    </member>
    <member name="M:System.Net.Http.HttpContentExtensions.ReadAsAsync(System.Net.Http.HttpContent,System.Type,System.Collections.Generic.IEnumerable{System.Net.Http.Formatting.MediaTypeFormatter})">
      <summary> Returns a Task that will yield an object of the specified type from the content instance using one of the provided formatters to deserialize the content. </summary>
      <returns>An object instance of the specified type.</returns>
      <param name="content">The HttpContent instance from which to read.</param>
      <param name="type">The type of the object to read.</param>
      <param name="formatters">The collection of MediaTypeFormatter instances to use.</param>
    </member>
    <member name="M:System.Net.Http.HttpContentExtensions.ReadAsAsync(System.Net.Http.HttpContent,System.Type,System.Collections.Generic.IEnumerable{System.Net.Http.Formatting.MediaTypeFormatter},System.Net.Http.Formatting.IFormatterLogger)">
      <summary> Returns a Task that will yield an object of the specified type from the content instance using one of the provided formatters to deserialize the content. </summary>
      <returns>An object instance of the specified type.</returns>
      <param name="content">The HttpContent instance from which to read.</param>
      <param name="type">The type of the object to read.</param>
      <param name="formatters">The collection of MediaTypeFormatter instances to use.</param>
      <param name="formatterLogger">The IFormatterLogger to log events to.</param>
    </member>
    <member name="T:System.Net.Http.HttpContentFormDataExtensions">
      <summary>Extension methods to read HTML form URL-encoded datafrom <see cref="T:System.Net.Http.HttpContent" /> instances.</summary>
    </member>
    <member name="M:System.Net.Http.HttpContentFormDataExtensions.IsFormData(System.Net.Http.HttpContent)">
      <summary>Determines whether the specified content is HTML form URL-encoded data.</summary>
      <returns>true if the specified content is HTML form URL-encoded data; otherwise, false.</returns>
      <param name="content">The content.</param>
    </member>
    <member name="M:System.Net.Http.HttpContentFormDataExtensions.ReadAsFormDataAsync(System.Net.Http.HttpContent)">
      <summary>Asynchronously reads HTML form URL-encoded from an <see cref="T:System.Net.Http.HttpContent" /> instance and stores the results in a <see cref="T:System.Collections.Specialized.NameValueCollection" /> object.</summary>
      <returns>A task object representing the asynchronous operation.</returns>
      <param name="content">The content.</param>
    </member>
    <member name="T:System.Net.Http.HttpContentMessageExtensions">
      <summary>Provides extension methods to read <see cref="T:System.Net.Http.HttpRequestMessage" /> and <see cref="T:System.Net.Http.HttpResponseMessage" /> entities from <see cref="T:System.Net.Http.HttpContent" /> instances. </summary>
    </member>
    <member name="M:System.Net.Http.HttpContentMessageExtensions.IsHttpRequestMessageContent(System.Net.Http.HttpContent)">
      <summary>Determines whether the specified content is HTTP request message content.</summary>
      <returns>true if the specified content is HTTP message content; otherwise, false.</returns>
      <param name="content">The content to check.</param>
    </member>
    <member name="M:System.Net.Http.HttpContentMessageExtensions.IsHttpResponseMessageContent(System.Net.Http.HttpContent)">
      <summary>Determines whether the specified content is HTTP response message content.</summary>
      <returns>true if the specified content is HTTP message content; otherwise, false.</returns>
      <param name="content">The content to check.</param>
    </member>
    <member name="M:System.Net.Http.HttpContentMessageExtensions.ReadAsHttpRequestMessageAsync(System.Net.Http.HttpContent)">
      <summary> Reads the <see cref="T:System.Net.Http.HttpContent" /> as an <see cref="T:System.Net.Http.HttpRequestMessage" />. </summary>
      <returns>The parsed <see cref="T:System.Net.Http.HttpRequestMessage" /> instance.</returns>
      <param name="content">The content to read.</param>
    </member>
    <member name="M:System.Net.Http.HttpContentMessageExtensions.ReadAsHttpRequestMessageAsync(System.Net.Http.HttpContent,System.String)">
      <summary> Reads the <see cref="T:System.Net.Http.HttpContent" /> as an <see cref="T:System.Net.Http.HttpRequestMessage" />. </summary>
      <returns>The parsed <see cref="T:System.Net.Http.HttpRequestMessage" /> instance.</returns>
      <param name="content">The content to read.</param>
      <param name="uriScheme">The URI scheme to use for the request URI.</param>
    </member>
    <member name="M:System.Net.Http.HttpContentMessageExtensions.ReadAsHttpRequestMessageAsync(System.Net.Http.HttpContent,System.String,System.Int32)">
      <summary> Reads the <see cref="T:System.Net.Http.HttpContent" /> as an <see cref="T:System.Net.Http.HttpRequestMessage" />. </summary>
      <returns>The parsed <see cref="T:System.Net.Http.HttpRequestMessage" /> instance.</returns>
      <param name="content">The content to read.</param>
      <param name="uriScheme">The URI scheme to use for the request URI.</param>
      <param name="bufferSize">The size of the buffer.</param>
    </member>
    <member name="M:System.Net.Http.HttpContentMessageExtensions.ReadAsHttpRequestMessageAsync(System.Net.Http.HttpContent,System.String,System.Int32,System.Int32)">
      <summary>Reads the <see cref="T:System.Net.Http.HttpContent" /> as an <see cref="T:System.Net.Http.HttpRequestMessage" />.</summary>
      <returns>The parsed <see cref="T:System.Net.Http.HttpRequestMessage" /> instance.</returns>
      <param name="content">The content to read.</param>
      <param name="uriScheme">The URI scheme to use for the request URI.</param>
      <param name="bufferSize">The size of the buffer.</param>
      <param name="maxHeaderSize">The maximum length of the HTTP header.</param>
    </member>
    <member name="M:System.Net.Http.HttpContentMessageExtensions.ReadAsHttpResponseMessageAsync(System.Net.Http.HttpContent)">
      <summary> Reads the <see cref="T:System.Net.Http.HttpContent" /> as an <see cref="T:System.Net.Http.HttpResponseMessage" />. </summary>
      <returns>The parsed <see cref="T:System.Net.Http.HttpResponseMessage" /> instance.</returns>
      <param name="content">The content to read.</param>
    </member>
    <member name="M:System.Net.Http.HttpContentMessageExtensions.ReadAsHttpResponseMessageAsync(System.Net.Http.HttpContent,System.Int32)">
      <summary>Reads the <see cref="T:System.Net.Http.HttpContent" /> as an <see cref="T:System.Net.Http.HttpResponseMessage" />. </summary>
      <returns>The parsed <see cref="T:System.Net.Http.HttpResponseMessage" /> instance.</returns>
      <param name="content">The content to read.</param>
      <param name="bufferSize">The size of the buffer.</param>
    </member>
    <member name="M:System.Net.Http.HttpContentMessageExtensions.ReadAsHttpResponseMessageAsync(System.Net.Http.HttpContent,System.Int32,System.Int32)">
      <summary>Reads the <see cref="T:System.Net.Http.HttpContent" /> as an <see cref="T:System.Net.Http.HttpResponseMessage" />.</summary>
      <returns>The parsed <see cref="T:System.Net.Http.HttpResponseMessage" /> instance.</returns>
      <param name="content">The content to read.</param>
      <param name="bufferSize">The size of the buffer.</param>
      <param name="maxHeaderSize">The maximum length of the HTTP header.</param>
    </member>
    <member name="T:System.Net.Http.HttpContentMultipartExtensions">
      <summary>Extension methods to read MIME multipart entities from <see cref="T:System.Net.Http.HttpContent" /> instances.</summary>
    </member>
    <member name="M:System.Net.Http.HttpContentMultipartExtensions.IsMimeMultipartContent(System.Net.Http.HttpContent)">
      <summary>Determines whether the specified content is MIME multipart content.</summary>
      <returns>true if the specified content is MIME multipart content; otherwise, false.</returns>
      <param name="content">The content.</param>
    </member>
    <member name="M:System.Net.Http.HttpContentMultipartExtensions.IsMimeMultipartContent(System.Net.Http.HttpContent,System.String)">
      <summary>Determines whether the specified content is MIME multipart content with the specified subtype.</summary>
      <returns>true if the specified content is MIME multipart content with the specified subtype; otherwise, false.</returns>
      <param name="content">The content.</param>
      <param name="subtype">The MIME multipart subtype to match.</param>
    </member>
    <member name="M:System.Net.Http.HttpContentMultipartExtensions.ReadAsMultipartAsync(System.Net.Http.HttpContent)">
      <summary>Reads all body parts within a MIME multipart message and produces a set of <see cref="T:System.Net.Http.HttpContent" /> instances as a result.</summary>
      <returns>A &lt;see cref="T:System.Threading.Tasks.Task`1" /&gt; representing the tasks of getting the collection of <see cref="T:System.Net.Http.HttpContent" /> instances where each instance represents a body part.</returns>
      <param name="content">An existing <see cref="T:System.Net.Http.HttpContent" /> instance to use for the object's content.</param>
    </member>
    <member name="M:System.Net.Http.HttpContentMultipartExtensions.ReadAsMultipartAsync``1(System.Net.Http.HttpContent,``0)">
      <summary>Reads all body parts within a MIME multipart message and produces a set of <see cref="T:System.Net.Http.HttpContent" /> instances as a result using the streamProvider instance to determine where the contents of each body part is written.</summary>
      <returns>A <see cref="T:System.Threading.Tasks.Task`1" /> representing the tasks of getting the collection of <see cref="T:System.Net.Http.HttpContent" /> instances where each instance represents a body part.</returns>
      <param name="content">An existing <see cref="T:System.Net.Http.HttpContent" /> instance to use for the object's content.</param>
      <param name="streamProvider">A stream provider providing output streams for where to write body parts as they are parsed.</param>
      <typeparam name="T">The type of the MIME multipart.</typeparam>
    </member>
    <member name="M:System.Net.Http.HttpContentMultipartExtensions.ReadAsMultipartAsync``1(System.Net.Http.HttpContent,``0,System.Int32)">
      <summary>Reads all body parts within a MIME multipart message and produces a set of <see cref="T:System.Net.Http.HttpContent" /> instances as a result using the streamProvider instance to determine where the contents of each body part is written and bufferSize as read buffer size.</summary>
      <returns>A <see cref="T:System.Threading.Tasks.Task`1" /> representing the tasks of getting the collection of <see cref="T:System.Net.Http.HttpContent" /> instances where each instance represents a body part.</returns>
      <param name="content">An existing <see cref="T:System.Net.Http.HttpContent" /> instance to use for the object's content.</param>
      <param name="streamProvider">A stream provider providing output streams for where to write body parts as they are parsed.</param>
      <param name="bufferSize">Size of the buffer used to read the contents.</param>
      <typeparam name="T">The type of the MIME multipart.</typeparam>
    </member>
    <member name="T:System.Net.Http.HttpMessageContent">
      <summary> Derived <see cref="T:System.Net.Http.HttpContent" /> class which can encapsulate an <see cref="P:System.Net.Http.HttpMessageContent.HttpResponseMessage" /> or an <see cref="P:System.Net.Http.HttpMessageContent.HttpRequestMessage" /> as an entity with media type "application/http". </summary>
    </member>
    <member name="M:System.Net.Http.HttpMessageContent.#ctor(System.Net.Http.HttpRequestMessage)">
      <summary> Initializes a new instance of the <see cref="T:System.Net.Http.HttpMessageContent" /> class encapsulating an <see cref="P:System.Net.Http.HttpMessageContent.HttpRequestMessage" />. </summary>
      <param name="httpRequest">The <see cref="P:System.Net.Http.HttpMessageContent.HttpResponseMessage" /> instance to encapsulate.</param>
    </member>
    <member name="M:System.Net.Http.HttpMessageContent.#ctor(System.Net.Http.HttpResponseMessage)">
      <summary> Initializes a new instance of the <see cref="T:System.Net.Http.HttpMessageContent" /> class encapsulating an <see cref="P:System.Net.Http.HttpMessageContent.HttpResponseMessage" />. </summary>
      <param name="httpResponse">The <see cref="P:System.Net.Http.HttpMessageContent.HttpResponseMessage" /> instance to encapsulate.</param>
    </member>
    <member name="M:System.Net.Http.HttpMessageContent.Dispose(System.Boolean)">
      <summary> Releases unmanaged and - optionally - managed resources </summary>
      <param name="disposing">true to release both managed and unmanaged resources; false to release only unmanaged resources.</param>
    </member>
    <member name="P:System.Net.Http.HttpMessageContent.HttpRequestMessage">
      <summary> Gets the HTTP request message. </summary>
    </member>
    <member name="P:System.Net.Http.HttpMessageContent.HttpResponseMessage">
      <summary> Gets the HTTP response message. </summary>
    </member>
    <member name="M:System.Net.Http.HttpMessageContent.SerializeToStreamAsync(System.IO.Stream,System.Net.TransportContext)">
      <summary> Asynchronously serializes the object's content to the given stream. </summary>
      <returns>A <see cref="T:System.Threading.Tasks.Task" /> instance that is asynchronously serializing the object's content.</returns>
      <param name="stream">The <see cref="T:System.IO.Stream" /> to which to write.</param>
      <param name="context">The associated <see cref="T:System.Net.TransportContext" />.</param>
    </member>
    <member name="M:System.Net.Http.HttpMessageContent.TryComputeLength(System.Int64@)">
      <summary> Computes the length of the stream if possible. </summary>
      <returns>true if the length has been computed; otherwise false.</returns>
      <param name="length">The computed length of the stream.</param>
    </member>
    <member name="T:System.Net.Http.HttpRequestHeadersExtensions">
      <summary>Provides extension methods for the <see cref="T:System.Net.Http.Headers.HttpRequestHeaders" /> class.</summary>
    </member>
    <member name="M:System.Net.Http.HttpRequestHeadersExtensions.GetCookies(System.Net.Http.Headers.HttpRequestHeaders)">
      <summary>Gets any cookie headers present in the request.</summary>
      <returns>A collection of <see cref="T:System.Net.Http.Headers.CookieHeaderValue" /> instances.</returns>
      <param name="headers">The request headers.</param>
    </member>
    <member name="M:System.Net.Http.HttpRequestHeadersExtensions.GetCookies(System.Net.Http.Headers.HttpRequestHeaders,System.String)">
      <summary>Gets any cookie headers present in the request that contain a cookie state whose name that matches the specified value.</summary>
      <returns>A collection of <see cref="T:System.Net.Http.Headers.CookieHeaderValue" /> instances.</returns>
      <param name="headers">The request headers.</param>
      <param name="name">The cookie state name to match.</param>
    </member>
    <member name="M:System.Net.Http.HttpRequestMessageExtensions.CreateResponse(System.Net.Http.HttpRequestMessage)"></member>
    <member name="M:System.Net.Http.HttpRequestMessageExtensions.CreateResponse(System.Net.Http.HttpRequestMessage,System.Net.HttpStatusCode)"></member>
    <member name="T:System.Net.Http.HttpResponseHeadersExtensions">
      <summary> Provides extension methods for the <see cref="T:System.Net.Http.Headers.HttpResponseHeaders" /> class. </summary>
    </member>
    <member name="M:System.Net.Http.HttpResponseHeadersExtensions.AddCookies(System.Net.Http.Headers.HttpResponseHeaders,System.Collections.Generic.IEnumerable{System.Net.Http.Headers.CookieHeaderValue})">
      <summary> Adds cookies to a response. Each Set-Cookie header is  represented as one <see cref="T:System.Net.Http.Headers.CookieHeaderValue" /> instance. A <see cref="T:System.Net.Http.Headers.CookieHeaderValue" /> contains information about the domain, path, and other cookie information as well as one or more <see cref="T:System.Net.Http.Headers.CookieState" /> instances. Each <see cref="T:System.Net.Http.Headers.CookieState" /> instance contains a cookie name and whatever cookie state is associate with that name. The state is in the form of a  <see cref="T:System.Collections.Specialized.NameValueCollection" /> which on the wire is encoded as HTML Form URL-encoded data.  This representation allows for multiple related "cookies" to be carried within the same Cookie header while still providing separation between each cookie state. A sample Cookie header is shown below. In this example, there are two <see cref="T:System.Net.Http.Headers.CookieState" /> with names state1 and state2 respectively. Further, each cookie state contains two name/value pairs (name1/value1 and name2/value2) and (name3/value3 and name4/value4). &lt;code&gt; Set-Cookie: state1:name1=value1&amp;amp;name2=value2; state2:name3=value3&amp;amp;name4=value4; domain=domain1; path=path1; &lt;/code&gt;</summary>
      <param name="headers">The response headers</param>
      <param name="cookies">The cookie values to add to the response.</param>
    </member>
    <member name="T:System.Net.Http.MultipartFileData">
      <summary>Represents a multipart file data.</summary>
    </member>
    <member name="M:System.Net.Http.MultipartFileData.#ctor(System.Net.Http.Headers.HttpContentHeaders,System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Net.Http.MultipartFileData" /> class.</summary>
      <param name="headers">The headers of the multipart file data.</param>
      <param name="localFileName">The name of the local file for the multipart file data.</param>
    </member>
    <member name="P:System.Net.Http.MultipartFileData.Headers">
      <summary>Gets or sets the headers of the multipart file data.</summary>
      <returns>The headers of the multipart file data.</returns>
    </member>
    <member name="P:System.Net.Http.MultipartFileData.LocalFileName">
      <summary>Gets or sets the name of the local file for the multipart file data.</summary>
      <returns>The name of the local file for the multipart file data.</returns>
    </member>
    <member name="T:System.Net.Http.MultipartFileStreamProvider">
      <summary>Represents an <see cref="T:System.Net.Http.IMultipartStreamProvider" /> suited for writing each MIME body parts of the MIME multipart message to a file using a <see cref="T:System.IO.FileStream" />.</summary>
    </member>
    <member name="M:System.Net.Http.MultipartFileStreamProvider.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Net.Http.MultipartFileStreamProvider" /> class.</summary>
      <param name="rootPath">The root path where the content of MIME multipart body parts are written to.</param>
    </member>
    <member name="M:System.Net.Http.MultipartFileStreamProvider.#ctor(System.String,System.Int32)">
      <summary>Initializes a new instance of the <see cref="T:System.Net.Http.MultipartFileStreamProvider" /> class.</summary>
      <param name="rootPath">The root path where the content of MIME multipart body parts are written to.</param>
      <param name="bufferSize">The number of bytes buffered for writes to the file.</param>
    </member>
    <member name="P:System.Net.Http.MultipartFileStreamProvider.BufferSize">
      <summary>Gets or sets the number of bytes buffered for writes to the file.</summary>
      <returns>The number of bytes buffered for writes to the file.</returns>
    </member>
    <member name="P:System.Net.Http.MultipartFileStreamProvider.FileData">
      <summary>Gets or sets the multipart file data.</summary>
      <returns>The multipart file data.</returns>
    </member>
    <member name="M:System.Net.Http.MultipartFileStreamProvider.GetLocalFileName(System.Net.Http.Headers.HttpContentHeaders)">
      <summary>Gets the name of the local file which will be combined with the root path to create an absolute file name where the contents of the current MIME body part will be stored.</summary>
      <returns>A relative filename with no path component.</returns>
      <param name="headers">The headers for the current MIME body part.</param>
    </member>
    <member name="M:System.Net.Http.MultipartFileStreamProvider.GetStream(System.Net.Http.HttpContent,System.Net.Http.Headers.HttpContentHeaders)">
      <summary>Gets the stream instance where the message body part is written to.</summary>
      <returns>The <see cref="T:System.IO.Stream" /> instance where the message body part is written to.</returns>
      <param name="parent">The content of HTTP.</param>
      <param name="headers">The header fields describing the body part.</param>
    </member>
    <member name="P:System.Net.Http.MultipartFileStreamProvider.RootPath">
      <summary>Gets or sets the root path where the content of MIME multipart body parts are written to.</summary>
      <returns>The root path where the content of MIME multipart body parts are written to.</returns>
    </member>
    <member name="T:System.Net.Http.MultipartFormDataStreamProvider">
      <summary> An <see cref="T:System.Net.Http.IMultipartStreamProvider" /> suited for use with HTML file uploads for writing file  content to a <see cref="T:System.IO.FileStream" />. The stream provider looks at the &lt;b&gt;Content-Disposition&lt;/b&gt; header  field and determines an output <see cref="T:System.IO.Stream" /> based on the presence of a &lt;b&gt;filename&lt;/b&gt; parameter. If a &lt;b&gt;filename&lt;/b&gt; parameter is present in the &lt;b&gt;Content-Disposition&lt;/b&gt; header field then the body  part is written to a <see cref="T:System.IO.FileStream" />, otherwise it is written to a <see cref="T:System.IO.MemoryStream" />. This makes it convenient to process MIME Multipart HTML Form data which is a combination of form  data and file content. </summary>
    </member>
    <member name="M:System.Net.Http.MultipartFormDataStreamProvider.#ctor(System.String)">
      <summary> Initializes a new instance of the <see cref="T:System.Net.Http.MultipartFormDataStreamProvider" /> class. </summary>
      <param name="rootPath">The root path where the content of MIME multipart body parts are written to.</param>
    </member>
    <member name="M:System.Net.Http.MultipartFormDataStreamProvider.#ctor(System.String,System.Int32)">
      <summary> Initializes a new instance of the <see cref="T:System.Net.Http.MultipartFormDataStreamProvider" /> class. </summary>
      <param name="rootPath">The root path where the content of MIME multipart body parts are written to.</param>
      <param name="bufferSize">The number of bytes buffered for writes to the file.</param>
    </member>
    <member name="M:System.Net.Http.MultipartFormDataStreamProvider.ExecutePostProcessingAsync">
      <summary>Reads the non-file contents as form data</summary>
      <returns>A task that represents the asynchronous operation.</returns>
    </member>
    <member name="P:System.Net.Http.MultipartFormDataStreamProvider.FormData">
      <summary>Gets a <see cref="T:System.Collections.Specialized.NameValueCollection" /> of form data passed as part of the multipart form data.</summary>
      <returns>The <see cref="T:System.Collections.Specialized.NameValueCollection" /> of form data.</returns>
    </member>
    <member name="M:System.Net.Http.MultipartFormDataStreamProvider.GetStream(System.Net.Http.HttpContent,System.Net.Http.Headers.HttpContentHeaders)">
      <returns>The <see cref="T:System.IO.Stream" /> instance where the message body part is written.</returns>
      <param name="parent">The HTTP content that contains this body part.</param>
      <param name="headers">Header fields describing the body part.</param>
    </member>
    <member name="T:System.Net.Http.MultipartMemoryStreamProvider">
      <summary>Represents a multipart memory stream provider.</summary>
    </member>
    <member name="M:System.Net.Http.MultipartMemoryStreamProvider.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Net.Http.MultipartMemoryStreamProvider" /> class.</summary>
    </member>
    <member name="M:System.Net.Http.MultipartMemoryStreamProvider.GetStream(System.Net.Http.HttpContent,System.Net.Http.Headers.HttpContentHeaders)">
      <summary>Returns the <see cref="T:System.IO.Stream" /> for the <see cref="T:System.Net.Http.MultipartMemoryStreamProvider" />.</summary>
      <returns>The <see cref="T:System.IO.Stream" /> for the <see cref="T:System.Net.Http.MultipartMemoryStreamProvider" />.</returns>
      <param name="parent">A <see cref="T:System.Net.Http.HttpContent" /> object.</param>
      <param name="headers">The HTTP content headers.</param>
    </member>
    <member name="T:System.Net.Http.MultipartRelatedStreamProvider">
      <summary>Represents the provider for the multipart related multistream.</summary>
    </member>
    <member name="M:System.Net.Http.MultipartRelatedStreamProvider.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Net.Http.MultipartRelatedStreamProvider" /> class.</summary>
    </member>
    <member name="M:System.Net.Http.MultipartRelatedStreamProvider.GetStream(System.Net.Http.HttpContent,System.Net.Http.Headers.HttpContentHeaders)">
      <summary>Gets the related stream for the provider.</summary>
      <returns>The content headers.</returns>
      <param name="parent">The parent content.</param>
      <param name="headers">The http content headers.</param>
    </member>
    <member name="P:System.Net.Http.MultipartRelatedStreamProvider.RootContent">
      <summary>Gets the root content of the <see cref="T:System.Net.Http.MultipartRelatedStreamProvider" />.</summary>
      <returns>The root content of the <see cref="T:System.Net.Http.MultipartRelatedStreamProvider" />.</returns>
    </member>
    <member name="T:System.Net.Http.MultipartStreamProvider">
      <summary>Represents a stream provider that examines the headers provided by the MIME multipart parser as part of the MIME multipart extension methods (see <see cref="T:System.Net.Http.HttpContentMultipartExtensions" />) and decides what kind of stream to return for the body part to be written to.</summary>
    </member>
    <member name="M:System.Net.Http.MultipartStreamProvider.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Net.Http.MultipartStreamProvider" /> class.</summary>
    </member>
    <member name="P:System.Net.Http.MultipartStreamProvider.Contents">
      <summary>Gets or sets the contents for this <see cref="T:System.Net.Http.MultipartStreamProvider" />.</summary>
      <returns>The contents for this <see cref="T:System.Net.Http.MultipartStreamProvider" />.</returns>
    </member>
    <member name="M:System.Net.Http.MultipartStreamProvider.ExecutePostProcessingAsync">
      <summary>Executes the post processing operation for this <see cref="T:System.Net.Http.MultipartStreamProvider" />.</summary>
      <returns>The asynchronous task for this operation.</returns>
    </member>
    <member name="M:System.Net.Http.MultipartStreamProvider.GetStream(System.Net.Http.HttpContent,System.Net.Http.Headers.HttpContentHeaders)">
      <summary>Gets the stream where to write the body part to. This method is called when a MIME multipart body part has been parsed.</summary>
      <returns>The <see cref="T:System.IO.Stream" /> instance where the message body part is written to.</returns>
      <param name="parent">The content of the HTTP.</param>
      <param name="headers">The header fields describing the body part.</param>
    </member>
    <member name="T:System.Net.Http.ObjectContent">
      <summary> Contains a value as well as an associated <see cref="T:System.Net.Http.Formatting.MediaTypeFormatter" /> that will be used to serialize the value when writing this content. </summary>
    </member>
    <member name="M:System.Net.Http.ObjectContent.#ctor(System.Type,System.Object,System.Net.Http.Formatting.MediaTypeFormatter)">
      <summary>Initializes a new instance of the <see cref="T:System.Net.Http.ObjectContent" /> class.</summary>
      <param name="type">The type of object this instance will contain.</param>
      <param name="value">The value of the object this instance will contain.</param>
      <param name="formatter">The formatter to use when serializing the value.</param>
    </member>
    <member name="M:System.Net.Http.ObjectContent.#ctor(System.Type,System.Object,System.Net.Http.Formatting.MediaTypeFormatter,System.Net.Http.Headers.MediaTypeHeaderValue)">
      <summary> Initializes a new instance of the <see cref="T:System.Net.Http.ObjectContent" /> class. </summary>
      <param name="type">The type of object this instance will contain.</param>
      <param name="value">The value of the object this instance will contain.</param>
      <param name="formatter">The formatter to use when serializing the value.</param>
      <param name="mediaType">The authoritative value of the Content-Type header. Can be null, in which case the default content type of the formatter will be used.</param>
    </member>
    <member name="M:System.Net.Http.ObjectContent.#ctor(System.Type,System.Object,System.Net.Http.Formatting.MediaTypeFormatter,System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Net.Http.ObjectContent" /> class.</summary>
      <param name="type">The type of object this instance will contain.</param>
      <param name="value">The value of the object this instance will contain.</param>
      <param name="formatter">The formatter to use when serializing the value.</param>
      <param name="mediaType">The authoritative value of the Content-Type header.</param>
    </member>
    <member name="P:System.Net.Http.ObjectContent.Formatter">
      <summary>Gets the media-type formatter associated with this content instance.</summary>
      <returns>The <see cref="T:System.Net.Http.Formatting.MediaTypeFormatter" />.</returns>
    </member>
    <member name="P:System.Net.Http.ObjectContent.ObjectType">
      <summary>Gets the type of object managed by this <see cref="T:System.Net.Http.ObjectContent" /> instance.</summary>
      <returns>The object type.</returns>
    </member>
    <member name="M:System.Net.Http.ObjectContent.SerializeToStreamAsync(System.IO.Stream,System.Net.TransportContext)">
      <summary>Asynchronously serializes the object's content to the given stream.</summary>
      <returns>The task object representing the asynchronous operation.</returns>
      <param name="stream">The stream to write to.</param>
      <param name="context">The associated <see cref="T:System.Net.TransportContext" />.</param>
    </member>
    <member name="M:System.Net.Http.ObjectContent.TryComputeLength(System.Int64@)">
      <summary>Computes the length of the stream if possible.</summary>
      <returns>true if the length has been computed; otherwise, false.</returns>
      <param name="length">Receives the computed length of the stream.</param>
    </member>
    <member name="P:System.Net.Http.ObjectContent.Value">
      <summary>Gets or sets the value of the content.</summary>
      <returns>The content value.</returns>
    </member>
    <member name="T:System.Net.Http.ObjectContent`1">
      <summary> Generic form of <see cref="T:System.Net.Http.ObjectContent" />. </summary>
      <typeparam name="T">The type of object this  class will contain.</typeparam>
    </member>
    <member name="M:System.Net.Http.ObjectContent`1.#ctor(`0,System.Net.Http.Formatting.MediaTypeFormatter)">
      <summary>Initializes a new instance of the <see cref="T:System.Net.Http.ObjectContent`1" /> class.</summary>
      <param name="value">The value of the object this instance will contain.</param>
      <param name="formatter">The formatter to use when serializing the value.</param>
    </member>
    <member name="M:System.Net.Http.ObjectContent`1.#ctor(`0,System.Net.Http.Formatting.MediaTypeFormatter,System.Net.Http.Headers.MediaTypeHeaderValue)">
      <summary> Initializes a new instance of the &lt;see cref="T:System.Net.Http.ObjectContent`1" /&gt; class. </summary>
      <param name="value">The value of the object this instance will contain.</param>
      <param name="formatter">The formatter to use when serializing the value.</param>
      <param name="mediaType">The authoritative value of the Content-Type header. Can be null, in which case the default content type of the formatter will be used.</param>
    </member>
    <member name="M:System.Net.Http.ObjectContent`1.#ctor(`0,System.Net.Http.Formatting.MediaTypeFormatter,System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Net.Http.ObjectContent`1" /> class.</summary>
      <param name="value">The value of the object this instance will contain.</param>
      <param name="formatter">The formatter to use when serializing the value.</param>
      <param name="mediaType">The authoritative value of the Content-Type header.</param>
    </member>
    <member name="T:System.Net.Http.PushStreamContent">
      <summary>Enables scenarios where a data producer wants to write directly (either synchronously or asynchronously) using a stream.</summary>
    </member>
    <member name="M:System.Net.Http.PushStreamContent.#ctor(System.Action{System.IO.Stream,System.Net.Http.HttpContent,System.Net.TransportContext})">
      <summary>Initializes a new instance of the <see cref="T:System.Net.Http.PushStreamContent" /> class.</summary>
      <param name="onStreamAvailable">An action that is called when an output stream is available, allowing the action to write to it directly. </param>
    </member>
    <member name="M:System.Net.Http.PushStreamContent.#ctor(System.Action{System.IO.Stream,System.Net.Http.HttpContent,System.Net.TransportContext},System.Net.Http.Headers.MediaTypeHeaderValue)">
      <summary>Initializes a new instance of the <see cref="T:System.Net.Http.PushStreamContent" /> class.</summary>
      <param name="onStreamAvailable">An action that is called when an output stream is available, allowing the action to write to it directly.</param>
      <param name="mediaType">The media type.</param>
    </member>
    <member name="M:System.Net.Http.PushStreamContent.#ctor(System.Action{System.IO.Stream,System.Net.Http.HttpContent,System.Net.TransportContext},System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Net.Http.PushStreamContent" /> class.</summary>
      <param name="onStreamAvailable">An action that is called when an output stream is available, allowing the action to write to it directly.</param>
      <param name="mediaType">The media type.</param>
    </member>
    <member name="M:System.Net.Http.PushStreamContent.SerializeToStreamAsync(System.IO.Stream,System.Net.TransportContext)">
      <summary>Asynchronously serializes the push content into stream.</summary>
      <returns>The serialized push content.</returns>
      <param name="stream">The stream where the push content will be serialized.</param>
      <param name="context">The context.</param>
    </member>
    <member name="M:System.Net.Http.PushStreamContent.TryComputeLength(System.Int64@)">
      <summary>Determines whether the stream content has a valid length in bytes.</summary>
      <returns>true if length is a valid length; otherwise, false.</returns>
      <param name="length">The length in bytes of the stream content.</param>
    </member>
    <member name="T:System.Net.Http.UriExtensions">
      <summary>Contains extension methods to allow strongly typed objects to be read from the query component of <see cref="T:System.Uri" /> instances. </summary>
    </member>
    <member name="M:System.Net.Http.UriExtensions.ParseQueryString(System.Uri)">
      <summary>Parses the query portion of the specified URI.</summary>
      <returns>A  <see cref="T:System.Collections.Specialized.NameValueCollection" /> that contains the query parameters.</returns>
      <param name="address">The URI to parse.</param>
    </member>
    <member name="M:System.Net.Http.UriExtensions.TryReadQueryAs(System.Uri,System.Type,System.Object@)">
      <summary>Reads HTML form URL encoded data provided in the URI query string as an object of a specified type.</summary>
      <returns>true if the query component of the URI can be read as the specified type; otherwise, false.</returns>
      <param name="address">The URI to read.</param>
      <param name="type">The type of object to read.</param>
      <param name="value">When this method returns, contains an object that is initialized from the query component of the URI. This parameter is treated as uninitialized.</param>
    </member>
    <member name="M:System.Net.Http.UriExtensions.TryReadQueryAs``1(System.Uri,``0@)">
      <summary>Reads HTML form URL encoded data provided in the URI query string as an object of a specified type.</summary>
      <returns>true if the query component of the URI can be read as the specified type; otherwise, false.</returns>
      <param name="address">The URI to read.</param>
      <param name="value">When this method returns, contains an object that is initialized from the query component of the URI. This parameter is treated as uninitialized.</param>
      <typeparam name="T">The type of object to read.</typeparam>
    </member>
    <member name="M:System.Net.Http.UriExtensions.TryReadQueryAsJson(System.Uri,Newtonsoft.Json.Linq.JObject@)">
      <summary>Reads HTML form URL encoded data provided in the <see cref="T:System.Uri" /> query component as a <see cref="T:Newtonsoft.Json.Linq.JObject" /> object.</summary>
      <returns>true if the query component can be read as <see cref="T:Newtonsoft.Json.Linq.JObject" />; otherwise false.</returns>
      <param name="address">The <see cref="T:System.Uri" /> instance from which to read.</param>
      <param name="value">An object to be initialized with this instance or null if the conversion cannot be performed.</param>
    </member>
    <member name="T:System.Net.Http.Formatting.BufferedMediaTypeFormatter">
      <summary>Represents a helper class to allow a synchronous formatter on top of the asynchronous formatter infrastructure.</summary>
    </member>
    <member name="M:System.Net.Http.Formatting.BufferedMediaTypeFormatter.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Net.Http.Formatting.BufferedMediaTypeFormatter" /> class.</summary>
    </member>
    <member name="P:System.Net.Http.Formatting.BufferedMediaTypeFormatter.BufferSize">
      <summary>Gets or sets the suggested size of buffer to use with streams in bytes.</summary>
      <returns>The suggested size of buffer to use with streams in bytes.</returns>
    </member>
    <member name="M:System.Net.Http.Formatting.BufferedMediaTypeFormatter.ReadFromStream(System.Type,System.IO.Stream,System.Net.Http.HttpContent,System.Net.Http.Formatting.IFormatterLogger)">
      <summary>Reads synchronously from the buffered stream.</summary>
      <returns>An object of the given <paramref name="type" />.</returns>
      <param name="type">The type of the object to deserialize.</param>
      <param name="readStream">The stream from which to read</param>
      <param name="content">The <see cref="T:System.Net.Http.HttpContent" />, if available. Can be null.</param>
      <param name="formatterLogger">The <see cref="T:System.Net.Http.Formatting.IFormatterLogger" /> to log events to.</param>
    </member>
    <member name="M:System.Net.Http.Formatting.BufferedMediaTypeFormatter.ReadFromStreamAsync(System.Type,System.IO.Stream,System.Net.Http.HttpContent,System.Net.Http.Formatting.IFormatterLogger)">
      <summary>Reads asynchronously from the buffered stream.</summary>
      <returns>A task object representing the asynchronous operation.</returns>
      <param name="type">The type of the object to deserialize.</param>
      <param name="readStream">The stream from which to read.</param>
      <param name="content">The <see cref="T:System.Net.Http.HttpContent" />, if available. Can be null.</param>
      <param name="formatterLogger">The <see cref="T:System.Net.Http.Formatting.IFormatterLogger" /> to log events to.</param>
    </member>
    <member name="M:System.Net.Http.Formatting.BufferedMediaTypeFormatter.WriteToStream(System.Type,System.Object,System.IO.Stream,System.Net.Http.HttpContent)">
      <summary>Writes synchronously to the buffered stream.</summary>
      <param name="type">The type of the object to serialize.</param>
      <param name="value">The object value to write. Can be null.</param>
      <param name="writeStream">The stream to which to write.</param>
      <param name="content">The <see cref="T:System.Net.Http.HttpContent" />, if available. Can be null.</param>
    </member>
    <member name="M:System.Net.Http.Formatting.BufferedMediaTypeFormatter.WriteToStreamAsync(System.Type,System.Object,System.IO.Stream,System.Net.Http.HttpContent,System.Net.TransportContext)">
      <summary>Writes asynchronously to the buffered stream.</summary>
      <returns>A task object representing the asynchronous operation.</returns>
      <param name="type">The type of the object to serialize.</param>
      <param name="value">The object value to write.  It may be null.</param>
      <param name="writeStream">The stream to which to write.</param>
      <param name="content">The <see cref="T:System.Net.Http.HttpContent" />, if available. Can be null.</param>
      <param name="transportContext">The transport context.</param>
    </member>
    <member name="T:System.Net.Http.Formatting.ContentNegotiationResult">
      <summary> Represents the result of content negotiation performed using &lt;see cref="M:System.Net.Http.Formatting.IContentNegotiator.Negotiate(System.Type,System.Net.Http.HttpRequestMessage,System.Collections.Generic.IEnumerable{System.Net.Http.Formatting.MediaTypeFormatter})" /&gt;</summary>
    </member>
    <member name="M:System.Net.Http.Formatting.ContentNegotiationResult.#ctor(System.Net.Http.Formatting.MediaTypeFormatter,System.Net.Http.Headers.MediaTypeHeaderValue)">
      <summary> Create the content negotiation result object. </summary>
      <param name="formatter">The formatter.</param>
      <param name="mediaType">The preferred media type. Can be null.</param>
    </member>
    <member name="P:System.Net.Http.Formatting.ContentNegotiationResult.Formatter">
      <summary> The formatter chosen for serialization. </summary>
    </member>
    <member name="P:System.Net.Http.Formatting.ContentNegotiationResult.MediaType">
      <summary> The media type that is associated with the formatter chosen for serialization. Can be null. </summary>
    </member>
    <member name="T:System.Net.Http.Formatting.DefaultContentNegotiator">
      <summary>The default implementation of <see cref="T:System.Net.Http.Formatting.IContentNegotiator" />, which is used to select a <see cref="T:System.Net.Http.Formatting.MediaTypeFormatter" /> for an <see cref="T:System.Net.Http.HttpRequestMessage" /> or <see cref="T:System.Net.Http.HttpResponseMessage" />. </summary>
    </member>
    <member name="M:System.Net.Http.Formatting.DefaultContentNegotiator.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Net.Http.Formatting.DefaultContentNegotiator" /> class.</summary>
    </member>
    <member name="M:System.Net.Http.Formatting.DefaultContentNegotiator.#ctor(System.Boolean)">
      <summary>Initializes a new instance of the <see cref="T:System.Net.Http.Formatting.DefaultContentNegotiator" /> class.</summary>
      <param name="excludeMatchOnTypeOnly">true to exclude formatters that match only on the object type; otherwise, false.</param>
    </member>
    <member name="M:System.Net.Http.Formatting.DefaultContentNegotiator.ComputeFormatterMatches(System.Type,System.Net.Http.HttpRequestMessage,System.Collections.Generic.IEnumerable{System.Net.Http.Formatting.MediaTypeFormatter})">
      <summary>Determines how well each formatter matches an HTTP request.</summary>
      <returns>Returns a collection of <see cref="T:System.Net.Http.Formatting.MediaTypeFormatterMatch" />  objects that represent all of the matches.</returns>
      <param name="type">The type to be serialized.</param>
      <param name="request">The request.</param>
      <param name="formatters">The set of <see cref="T:System.Net.Http.Formatting.MediaTypeFormatter" /> objects from which to choose.</param>
    </member>
    <member name="P:System.Net.Http.Formatting.DefaultContentNegotiator.ExcludeMatchOnTypeOnly">
      <summary>If true, exclude formatters that match only on the object type; otherwise, false.</summary>
      <returns>Returns a <see cref="T:System.Boolean" />.</returns>
    </member>
    <member name="M:System.Net.Http.Formatting.DefaultContentNegotiator.MatchAcceptHeader(System.Collections.Generic.IEnumerable{System.Net.Http.Headers.MediaTypeWithQualityHeaderValue},System.Net.Http.Formatting.MediaTypeFormatter)">
      <summary>Matches a set of Accept header fields against the media types that a formatter supports.</summary>
      <returns>Returns a <see cref="T:System.Net.Http.Formatting.MediaTypeFormatterMatch" /> object that indicates the quality of the match, or null if there is no match.</returns>
      <param name="sortedAcceptValues">A list of Accept header values, sorted in descending order of q factor. You can create this list by calling the  <see cref="M:System.Net.Http.Formatting.DefaultContentNegotiator.SortMediaTypeWithQualityHeaderValuesByQFactor(System.Collections.Generic.ICollection{System.Net.Http.Headers.MediaTypeWithQualityHeaderValue})" />  method.</param>
      <param name="formatter">The formatter to match against.</param>
    </member>
    <member name="M:System.Net.Http.Formatting.DefaultContentNegotiator.MatchMediaTypeMapping(System.Net.Http.HttpRequestMessage,System.Net.Http.Formatting.MediaTypeFormatter)">
      <summary>Matches a request against the <see cref="T:System.Net.Http.Formatting.MediaTypeMapping" /> objects in a media-type formatter.</summary>
      <returns>Returns a <see cref="T:System.Net.Http.Formatting.MediaTypeFormatterMatch" /> object that indicates the quality of the match, or null if there is no match.</returns>
      <param name="request">The requrst.</param>
      <param name="formatter">The media-type formatter.</param>
    </member>
    <member name="M:System.Net.Http.Formatting.DefaultContentNegotiator.MatchRequestMediaType(System.Net.Http.HttpRequestMessage,System.Net.Http.Formatting.MediaTypeFormatter)">
      <summary>Match the content type of a request against the media types that a formatter supports.</summary>
      <returns>Returns a <see cref="T:System.Net.Http.Formatting.MediaTypeFormatterMatch" /> object that indicates the quality of the match, or null if there is no match.</returns>
      <param name="request">The request.</param>
      <param name="formatter">The formatter to match against.</param>
    </member>
    <member name="M:System.Net.Http.Formatting.DefaultContentNegotiator.MatchType(System.Type,System.Net.Http.Formatting.MediaTypeFormatter)">
      <summary>Selects the first supported media type of a formatter.</summary>
      <returns>Returns a <see cref="T:System.Net.Http.Formatting.MediaTypeFormatterMatch" /> with <see cref="P:System.Net.Http.Formatting.MediaTypeFormatterMatch.Ranking" /> set to <see cref="F:System.Net.Http.Formatting.MediaTypeFormatterMatchRanking.MatchOnCanWriteType" />, or null if there is no match. </returns>
      <param name="type">The type to match.</param>
      <param name="formatter">The formatter to match against.</param>
    </member>
    <member name="M:System.Net.Http.Formatting.DefaultContentNegotiator.Negotiate(System.Type,System.Net.Http.HttpRequestMessage,System.Collections.Generic.IEnumerable{System.Net.Http.Formatting.MediaTypeFormatter})">
      <summary> Performs content negotiating by selecting the most appropriate <see cref="T:System.Net.Http.Formatting.MediaTypeFormatter" /> out of the passed in <paramref name="formatters" /> for the given <paramref name="request" /> that can serialize an object of the given <paramref name="type" />. </summary>
      <returns>The result of the negotiation containing the most appropriate <see cref="T:System.Net.Http.Formatting.MediaTypeFormatter" /> instance, or null if there is no appropriate formatter.</returns>
      <param name="type">The type to be serialized.</param>
      <param name="request">The request.</param>
      <param name="formatters">The set of <see cref="T:System.Net.Http.Formatting.MediaTypeFormatter" /> objects from which to choose.</param>
    </member>
    <member name="M:System.Net.Http.Formatting.DefaultContentNegotiator.SelectResponseCharacterEncoding(System.Net.Http.HttpRequestMessage,System.Net.Http.Formatting.MediaTypeFormatter)">
      <summary>Determines the best character encoding for writing the response.</summary>
      <returns>Returns the <see cref="T:System.Text.Encoding" /> that is the best match.</returns>
      <param name="request">The request.</param>
      <param name="formatter">The selected media formatter.</param>
    </member>
    <member name="M:System.Net.Http.Formatting.DefaultContentNegotiator.SelectResponseMediaTypeFormatter(System.Collections.Generic.ICollection{System.Net.Http.Formatting.MediaTypeFormatterMatch})">
      <summary>Selects the best match among the candidate matches found.</summary>
      <returns>Returns the <see cref="T:System.Net.Http.Formatting.MediaTypeFormatterMatch" /> object that represents the best match.</returns>
      <param name="matches">The collection of matches.</param>
    </member>
    <member name="M:System.Net.Http.Formatting.DefaultContentNegotiator.SortMediaTypeWithQualityHeaderValuesByQFactor(System.Collections.Generic.ICollection{System.Net.Http.Headers.MediaTypeWithQualityHeaderValue})">
      <summary>Sorts Accept header values in descending order of q factor.</summary>
      <returns>Returns the sorted list of MediaTypeWithQualityHeaderValue objects.</returns>
      <param name="headerValues">A collection of MediaTypeWithQualityHeaderValue objects, representing the Accept header values.</param>
    </member>
    <member name="M:System.Net.Http.Formatting.DefaultContentNegotiator.SortStringWithQualityHeaderValuesByQFactor(System.Collections.Generic.ICollection{System.Net.Http.Headers.StringWithQualityHeaderValue})">
      <summary>Sorts a list of Accept-Charset, Accept-Encoding, Accept-Language or related header values in descending order or q factor. </summary>
      <returns>Returns the sorted list of StringWithQualityHeaderValue objects.</returns>
      <param name="headerValues">A collection of StringWithQualityHeaderValue objects, representing the header fields.</param>
    </member>
    <member name="M:System.Net.Http.Formatting.DefaultContentNegotiator.UpdateBestMatch(System.Net.Http.Formatting.MediaTypeFormatterMatch,System.Net.Http.Formatting.MediaTypeFormatterMatch)">
      <summary>Evaluates whether a match is better than the current match.</summary>
      <returns>Returns whichever <see cref="T:System.Net.Http.Formatting.MediaTypeFormatterMatch" /> object is a better match.</returns>
      <param name="current">The current match.</param>
      <param name="potentialReplacement">The match to evaluate against the current match.</param>
    </member>
    <member name="T:System.Net.Http.Formatting.DelegatingEnumerable`1">
      <summary> Helper class to serialize &lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt; types by delegating them through a concrete implementation."/&amp;gt;. </summary>
      <typeparam name="T">The interface implementing  to proxy.</typeparam>
    </member>
    <member name="M:System.Net.Http.Formatting.DelegatingEnumerable`1.#ctor">
      <summary> Initialize a DelegatingEnumerable. This constructor is necessary for <see cref="T:System.Runtime.Serialization.DataContractSerializer" /> to work. </summary>
    </member>
    <member name="M:System.Net.Http.Formatting.DelegatingEnumerable`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
      <summary> Initialize a DelegatingEnumerable with an &lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;. This is a helper class to proxy &lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt; interfaces for <see cref="T:System.Xml.Serialization.XmlSerializer" />. </summary>
      <param name="source">The &lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt; instance to get the enumerator from.</param>
    </member>
    <member name="M:System.Net.Http.Formatting.DelegatingEnumerable`1.Add(System.Object)">
      <summary> This method is not implemented but is required method for serialization to work. Do not use. </summary>
      <param name="item">The item to add. Unused.</param>
    </member>
    <member name="M:System.Net.Http.Formatting.DelegatingEnumerable`1.GetEnumerator">
      <summary> Get the enumerator of the associated &lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;. </summary>
      <returns>The enumerator of the &lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt; source.</returns>
    </member>
    <member name="M:System.Net.Http.Formatting.DelegatingEnumerable`1.System#Collections#IEnumerable#GetEnumerator">
      <summary> Get the enumerator of the associated &lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;. </summary>
      <returns>The enumerator of the &lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt; source.</returns>
    </member>
    <member name="T:System.Net.Http.Formatting.FormDataCollection">
      <summary>Represent the collection of form data.</summary>
    </member>
    <member name="M:System.Net.Http.Formatting.FormDataCollection.#ctor(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.String}})">
      <summary>Initializes a new instance of <see cref="T:System.Net.Http.Formatting.FormDataCollection" /> class.</summary>
      <param name="pairs">The pairs.</param>
    </member>
    <member name="M:System.Net.Http.Formatting.FormDataCollection.#ctor(System.String)">
      <summary>Initializes a new instance of <see cref="T:System.Net.Http.Formatting.FormDataCollection" /> class.</summary>
      <param name="query">The query.</param>
    </member>
    <member name="M:System.Net.Http.Formatting.FormDataCollection.#ctor(System.Uri)">
      <summary>Initializes a new instance of <see cref="T:System.Net.Http.Formatting.FormDataCollection" /> class.</summary>
      <param name="uri">The URI</param>
    </member>
    <member name="M:System.Net.Http.Formatting.FormDataCollection.Get(System.String)">
      <summary>Gets the collection of form data.</summary>
      <returns>The collection of form data.</returns>
      <param name="key">The key.</param>
    </member>
    <member name="M:System.Net.Http.Formatting.FormDataCollection.GetEnumerator">
      <summary>Gets an enumerable that iterates through the collection.</summary>
      <returns>The enumerable that iterates through the collection.</returns>
    </member>
    <member name="M:System.Net.Http.Formatting.FormDataCollection.GetValues(System.String)">
      <summary>Gets the values of the collection of form data.</summary>
      <returns>The values of the collection of form data.</returns>
      <param name="key">The key.</param>
    </member>
    <member name="M:System.Net.Http.Formatting.FormDataCollection.ReadAsNameValueCollection">
      <summary>Reads the collection of form data as a collection of name value.</summary>
      <returns>The collection of form data as a collection of name value.</returns>
    </member>
    <member name="M:System.Net.Http.Formatting.FormDataCollection.System#Collections#IEnumerable#GetEnumerator">
      <summary>Gets an enumerable that iterates through the collection.</summary>
      <returns>The enumerable that iterates through the collection.</returns>
    </member>
    <member name="T:System.Net.Http.Formatting.FormUrlEncodedMediaTypeFormatter">
      <summary>
        <see cref="T:System.Net.Http.Formatting.MediaTypeFormatter" /> class for handling HTML form URL-ended data, also known as application/x-www-form-urlencoded.  </summary>
    </member>
    <member name="M:System.Net.Http.Formatting.FormUrlEncodedMediaTypeFormatter.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Net.Http.Formatting.FormUrlEncodedMediaTypeFormatter" /> class.</summary>
    </member>
    <member name="M:System.Net.Http.Formatting.FormUrlEncodedMediaTypeFormatter.CanReadType(System.Type)">
      <summary>Queries whether the <see cref="T:System.Net.Http.Formatting.FormUrlEncodedMediaTypeFormatter" /> can deserializean object of the specified type.</summary>
      <returns>true if the <see cref="T:System.Net.Http.Formatting.FormUrlEncodedMediaTypeFormatter" /> can deserialize the type; otherwise, false.</returns>
      <param name="type">The type to deserialize.</param>
    </member>
    <member name="M:System.Net.Http.Formatting.FormUrlEncodedMediaTypeFormatter.CanWriteType(System.Type)">
      <summary>Queries whether the <see cref="T:System.Net.Http.Formatting.FormUrlEncodedMediaTypeFormatter" /> can serializean object of the specified type.</summary>
      <returns>true if the <see cref="T:System.Net.Http.Formatting.FormUrlEncodedMediaTypeFormatter" /> can serialize the type; otherwise, false.</returns>
      <param name="type">The type to serialize.</param>
    </member>
    <member name="P:System.Net.Http.Formatting.FormUrlEncodedMediaTypeFormatter.DefaultMediaType">
      <summary>Gets the default media type for HTML form-URL-encoded data, which is application/x-www-form-urlencoded.</summary>
      <returns>The default media type for HTML form-URL-encoded data</returns>
    </member>
    <member name="P:System.Net.Http.Formatting.FormUrlEncodedMediaTypeFormatter.MaxDepth">
      <summary>Gets or sets the maximum depth allowed by this formatter.</summary>
      <returns>The maximum depth.</returns>
    </member>
    <member name="P:System.Net.Http.Formatting.FormUrlEncodedMediaTypeFormatter.ReadBufferSize">
      <summary>Gets or sets the size of the buffer when reading the incoming stream.</summary>
      <returns>The buffer size.</returns>
    </member>
    <member name="M:System.Net.Http.Formatting.FormUrlEncodedMediaTypeFormatter.ReadFromStreamAsync(System.Type,System.IO.Stream,System.Net.Http.HttpContent,System.Net.Http.Formatting.IFormatterLogger)">
      <summary> Asynchronously deserializes an object of the specified type.</summary>
      <returns>A <see cref="T:System.Threading.Tasks.Task" /> whose result will be the object instance that has been read.</returns>
      <param name="type">The type of object to deserialize.</param>
      <param name="readStream">The <see cref="T:System.IO.Stream" /> to read.</param>
      <param name="content">The <see cref="T:System.Net.Http.HttpContent" /> for the content being read.</param>
      <param name="formatterLogger">The <see cref="T:System.Net.Http.Formatting.IFormatterLogger" /> to log events to.</param>
    </member>
    <member name="T:System.Net.Http.Formatting.IContentNegotiator">
      <summary> Performs content negotiation.  This is the process of selecting a response writer (formatter) in compliance with header values in the request. </summary>
    </member>
    <member name="M:System.Net.Http.Formatting.IContentNegotiator.Negotiate(System.Type,System.Net.Http.HttpRequestMessage,System.Collections.Generic.IEnumerable{System.Net.Http.Formatting.MediaTypeFormatter})">
      <summary> Performs content negotiating by selecting the most appropriate <see cref="T:System.Net.Http.Formatting.MediaTypeFormatter" /> out of the passed in formatters for the given request that can serialize an object of the given type. </summary>
      <returns>The result of the negotiation containing the most appropriate <see cref="T:System.Net.Http.Formatting.MediaTypeFormatter" /> instance, or null if there is no appropriate formatter.</returns>
      <param name="type">The type to be serialized.</param>
      <param name="request">Request message, which contains the header values used to perform negotiation.</param>
      <param name="formatters">The set of <see cref="T:System.Net.Http.Formatting.MediaTypeFormatter" /> objects from which to choose.</param>
    </member>
    <member name="T:System.Net.Http.Formatting.IFormatterLogger">
      <summary>Specifies a callback interface that a formatter can use to log errors while reading.</summary>
    </member>
    <member name="M:System.Net.Http.Formatting.IFormatterLogger.LogError(System.String,System.Exception)">
      <summary>Logs an error.</summary>
      <param name="errorPath">The path to the member for which the error is being logged.</param>
      <param name="exception">The error message.</param>
    </member>
    <member name="M:System.Net.Http.Formatting.IFormatterLogger.LogError(System.String,System.String)">
      <summary>Logs an error.</summary>
      <param name="errorPath">The path to the member for which the error is being logged.</param>
      <param name="errorMessage">The error message to be logged.</param>
    </member>
    <member name="T:System.Net.Http.Formatting.IRequiredMemberSelector">
      <summary>Defines method that determines whether a given member is required on deserialization.</summary>
    </member>
    <member name="M:System.Net.Http.Formatting.IRequiredMemberSelector.IsRequiredMember(System.Reflection.MemberInfo)">
      <summary>Determines whether a given member is required on deserialization.</summary>
      <returns>true if <paramref name="member" /> should be treated as a required member; otherwise false.</returns>
      <param name="member">The <see cref="T:System.Reflection.MemberInfo" /> to be deserialized.</param>
    </member>
    <member name="T:System.Net.Http.Formatting.JsonMediaTypeFormatter">
      <summary>Represents the <see cref="T:System.Net.Http.Formatting.MediaTypeFormatter" /> class to handle JSON. </summary>
    </member>
    <member name="M:System.Net.Http.Formatting.JsonMediaTypeFormatter.#ctor">
      <summary> Initializes a new instance of the <see cref="T:System.Net.Http.Formatting.JsonMediaTypeFormatter" /> class. </summary>
    </member>
    <member name="M:System.Net.Http.Formatting.JsonMediaTypeFormatter.CanReadType(System.Type)">
      <summary>Determines whether this <see cref="T:System.Net.Http.Formatting.JsonMediaTypeFormatter" /> can read objects of the specified <paramref name="type" />.</summary>
      <returns>true if objects of this <paramref name="type" /> can be read, otherwise false.</returns>
      <param name="type">The type of object that will be read.</param>
    </member>
    <member name="M:System.Net.Http.Formatting.JsonMediaTypeFormatter.CanWriteType(System.Type)">
      <summary>Determines whether this <see cref="T:System.Net.Http.Formatting.JsonMediaTypeFormatter" /> can write objects of the specified <paramref name="type" />.</summary>
      <returns>true if objects of this <paramref name="type" /> can be written, otherwise false.</returns>
      <param name="type">The type of object that will be written.</param>
    </member>
    <member name="M:System.Net.Http.Formatting.JsonMediaTypeFormatter.CreateDefaultSerializerSettings">
      <summary> Creates a JsonSerializerSettings instance with the default settings used by the <see cref="T:System.Net.Http.Formatting.JsonMediaTypeFormatter" />. </summary>
      <returns>A newly created JsonSerializerSettings instance with the default settings used by the <see cref="T:System.Net.Http.Formatting.JsonMediaTypeFormatter" />.</returns>
    </member>
    <member name="P:System.Net.Http.Formatting.JsonMediaTypeFormatter.DefaultMediaType">
      <summary>Gets the default media type for JSON, namely "application/json".</summary>
      <returns>The <see cref="T:System.Net.Http.Headers.MediaTypeHeaderValue" /> for JSON.</returns>
    </member>
    <member name="P:System.Net.Http.Formatting.JsonMediaTypeFormatter.Indent">
      <summary> Gets or sets a value indicating whether to indent elements when writing data.  </summary>
      <returns>true if to indent elements when writing data; otherwise, false.</returns>
    </member>
    <member name="P:System.Net.Http.Formatting.JsonMediaTypeFormatter.MaxDepth">
      <summary>Gets or sets the maximum depth allowed by this formatter.</summary>
      <returns>The maximum depth allowed by this formatter.</returns>
    </member>
    <member name="M:System.Net.Http.Formatting.JsonMediaTypeFormatter.ReadFromStreamAsync(System.Type,System.IO.Stream,System.Net.Http.HttpContent,System.Net.Http.Formatting.IFormatterLogger)">
      <summary>Reads an object of the specified <paramref name="type" /> from the specified <paramref name="stream" />. This method is called during deserialization.</summary>
      <returns>Returns <see cref="T:System.Threading.Tasks.Task`1" />.</returns>
      <param name="type">The type of object to read.</param>
      <param name="readStream">Thestream from which to read</param>
      <param name="content">The content being written.</param>
      <param name="formatterLogger">The <see cref="T:System.Net.Http.Formatting.IFormatterLogger" /> to log events to.</param>
    </member>
    <member name="P:System.Net.Http.Formatting.JsonMediaTypeFormatter.SerializerSettings">
      <summary> Gets or sets the JsonSerializerSettings used to configure the JsonSerializer. </summary>
      <returns> The JsonSerializerSettings used to configure the JsonSerializer. </returns>
    </member>
    <member name="P:System.Net.Http.Formatting.JsonMediaTypeFormatter.UseDataContractJsonSerializer">
      <summary> Gets or sets a value indicating whether to use <see cref="T:System.Runtime.Serialization.Json.DataContractJsonSerializer" /> by default. </summary>
      <returns>true if to <see cref="T:System.Runtime.Serialization.Json.DataContractJsonSerializer" /> by default; otherwise, false.</returns>
    </member>
    <member name="M:System.Net.Http.Formatting.JsonMediaTypeFormatter.WriteToStreamAsync(System.Type,System.Object,System.IO.Stream,System.Net.Http.HttpContent,System.Net.TransportContext)">
      <summary>Writes an object of the specified <paramref name="type" /> to the specified <paramref name="stream" />. This method is called during serialization.</summary>
      <returns>A <see cref="T:System.Threading.Tasks.Task" /> that will write the value to the stream.</returns>
      <param name="type">The type of object to write.</param>
      <param name="value">The object to write.</param>
      <param name="writeStream">The <see cref="T:System.IO.Stream" /> to which to write.</param>
      <param name="content">The <see cref="T:System.Net.Http.HttpContent" /> where the content is being written.</param>
      <param name="transportContext">The <see cref="T:System.Net.TransportContext" />.</param>
    </member>
    <member name="T:System.Net.Http.Formatting.MediaTypeFormatter">
      <summary> Base class to handle serializing and deserializing strongly-typed objects using <see cref="T:System.Net.Http.ObjectContent" />. </summary>
    </member>
    <member name="M:System.Net.Http.Formatting.MediaTypeFormatter.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Net.Http.Formatting.MediaTypeFormatter" /> class.</summary>
    </member>
    <member name="M:System.Net.Http.Formatting.MediaTypeFormatter.CanReadType(System.Type)">
      <summary>Queries whether this <see cref="T:System.Net.Http.Formatting.MediaTypeFormatter" /> can deserializean object of the specified type.</summary>
      <returns>true if the <see cref="T:System.Net.Http.Formatting.MediaTypeFormatter" /> can deserialize the type; otherwise, false.</returns>
      <param name="type">The type to deserialize.</param>
    </member>
    <member name="M:System.Net.Http.Formatting.MediaTypeFormatter.CanWriteType(System.Type)">
      <summary>Queries whether this <see cref="T:System.Net.Http.Formatting.MediaTypeFormatter" /> can serializean object of the specified type.</summary>
      <returns>true if the <see cref="T:System.Net.Http.Formatting.MediaTypeFormatter" /> can serialize the type; otherwise, false.</returns>
      <param name="type">The type to serialize.</param>
    </member>
    <member name="M:System.Net.Http.Formatting.MediaTypeFormatter.GetDefaultValueForType(System.Type)">
      <summary>Gets the default value for the specified type.</summary>
      <returns>The default value.</returns>
      <param name="type">The type for which to get the default value.</param>
    </member>
    <member name="M:System.Net.Http.Formatting.MediaTypeFormatter.GetPerRequestFormatterInstance(System.Type,System.Net.Http.HttpRequestMessage,System.Net.Http.Headers.MediaTypeHeaderValue)">
      <summary>Returns a specialized instance of the <see cref="T:System.Net.Http.Formatting.MediaTypeFormatter" /> that can format a response for the given parameters.</summary>
      <returns>Returns <see cref="T:System.Net.Http.Formatting.MediaTypeFormatter" />.</returns>
      <param name="type">The type to format.</param>
      <param name="request">The request.</param>
      <param name="mediaType">The media type.</param>
    </member>
    <member name="P:System.Net.Http.Formatting.MediaTypeFormatter.MaxHttpCollectionKeys">
      <summary>Gets or sets the maximum number of keys stored in a T: <see cref="System.Collections.Specialized.NameValueCollection" />.</summary>
      <returns>The maximum number of keys.</returns>
    </member>
    <member name="P:System.Net.Http.Formatting.MediaTypeFormatter.MediaTypeMappings">
      <summary>Gets the mutable collection of <see cref="T:System.Net.Http.Formatting.MediaTypeMapping" /> objects that match HTTP requests to media types.</summary>
      <returns>The <see cref="T:System.Net.Http.Formatting.MediaTypeMapping" /> collection.</returns>
    </member>
    <member name="M:System.Net.Http.Formatting.MediaTypeFormatter.ReadFromStreamAsync(System.Type,System.IO.Stream,System.Net.Http.HttpContent,System.Net.Http.Formatting.IFormatterLogger)">
      <summary>Asynchronously deserializes an object of the specified type.</summary>
      <returns>A <see cref="T:System.Threading.Tasks.Task" /> whose result will be an object of the given type.</returns>
      <param name="type">The type of the object to deserialize.</param>
      <param name="readStream">The <see cref="T:System.IO.Stream" /> to read.</param>
      <param name="content">The <see cref="T:System.Net.Http.HttpContent" />, if available. It may be null.</param>
      <param name="formatterLogger">The <see cref="T:System.Net.Http.Formatting.IFormatterLogger" /> to log events to.</param>
      <exception cref="T:System.NotSupportedException">Derived types need to support reading.</exception>
    </member>
    <member name="P:System.Net.Http.Formatting.MediaTypeFormatter.RequiredMemberSelector">
      <summary>Gets or sets the <see cref="T:System.Net.Http.Formatting.IRequiredMemberSelector" /> instance used to determine required members.</summary>
      <returns>The <see cref="T:System.Net.Http.Formatting.IRequiredMemberSelector" /> instance.</returns>
    </member>
    <member name="M:System.Net.Http.Formatting.MediaTypeFormatter.SelectCharacterEncoding(System.Net.Http.Headers.HttpContentHeaders)">
      <summary>Determines the best character encoding for reading or writing an HTTP entity body, given a set of content headers.</summary>
      <returns>The encoding that is the best match.</returns>
      <param name="contentHeaders">The content headers.</param>
    </member>
    <member name="M:System.Net.Http.Formatting.MediaTypeFormatter.SetDefaultContentHeaders(System.Type,System.Net.Http.Headers.HttpContentHeaders,System.Net.Http.Headers.MediaTypeHeaderValue)">
      <summary> Sets the default headers for content that will be formatted using this formatter. This method is called from the <see cref="T:System.Net.Http.ObjectContent" /> constructor. This implementation sets the Content-Type header to the value of mediaType if it is not null. If it is null it sets the Content-Type to the default media type of this formatter. If the Content-Type does not specify a charset it will set it using this formatters configured <see cref="T:System.Text.Encoding" />. </summary>
      <param name="type">The type of the object being serialized. See <see cref="T:System.Net.Http.ObjectContent" />.</param>
      <param name="headers">The content headers that should be configured.</param>
      <param name="mediaType">The authoritative media type. Can be null.</param>
    </member>
    <member name="P:System.Net.Http.Formatting.MediaTypeFormatter.SupportedEncodings">
      <summary>Gets the mutable collection of character encodings supported bythis <see cref="T:System.Net.Http.Formatting.MediaTypeFormatter" />.</summary>
      <returns>The collection of <see cref="T:System.Text.Encoding" /> objects.</returns>
    </member>
    <member name="P:System.Net.Http.Formatting.MediaTypeFormatter.SupportedMediaTypes">
      <summary>Gets the mutable collection of media types supported bythis <see cref="T:System.Net.Http.Formatting.MediaTypeFormatter" />.</summary>
      <returns>The collection of <see cref="T:System.Net.Http.Headers.MediaTypeHeaderValue" /> objects.</returns>
    </member>
    <member name="M:System.Net.Http.Formatting.MediaTypeFormatter.WriteToStreamAsync(System.Type,System.Object,System.IO.Stream,System.Net.Http.HttpContent,System.Net.TransportContext)">
      <summary>Asynchronously writes an object of the specified type.</summary>
      <returns>A <see cref="T:System.Threading.Tasks.Task" /> that will perform the write.</returns>
      <param name="type">The type of the object to write.</param>
      <param name="value">The object value to write.  It may be null.</param>
      <param name="writeStream">The <see cref="T:System.IO.Stream" /> to which to write.</param>
      <param name="content">The <see cref="T:System.Net.Http.HttpContent" /> if available. It may be null.</param>
      <param name="transportContext">The <see cref="T:System.Net.TransportContext" /> if available. It may be null.</param>
      <exception cref="T:System.NotSupportedException">Derived types need to support writing.</exception>
    </member>
    <member name="T:System.Net.Http.Formatting.MediaTypeFormatterCollection">
      <summary>Represents a collection class that contains <see cref="T:System.Net.Http.Formatting.MediaTypeFormatter" /> instances.</summary>
    </member>
    <member name="M:System.Net.Http.Formatting.MediaTypeFormatterCollection.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Net.Http.Formatting.MediaTypeFormatterCollection" /> class with default values.</summary>
    </member>
    <member name="M:System.Net.Http.Formatting.MediaTypeFormatterCollection.#ctor(System.Collections.Generic.IEnumerable{System.Net.Http.Formatting.MediaTypeFormatter})">
      <summary>Initializes a new instance of the <see cref="T:System.Net.Http.Formatting.MediaTypeFormatterCollection" /> class with the given <paramref name="formatters" />.</summary>
      <param name="formatters">A collection of <see cref="T:System.Net.Http.Formatting.MediaTypeFormatter" /> instances to place in the collection.</param>
    </member>
    <member name="M:System.Net.Http.Formatting.MediaTypeFormatterCollection.FindReader(System.Type,System.Net.Http.Headers.MediaTypeHeaderValue)">
      <summary> Searches a collection for a formatter that can read the .NET <paramref name="type" /> in the given <paramref name="mediaType" />. </summary>
      <returns>The <see cref="T:System.Net.Http.Formatting.MediaTypeFormatter" /> that can read the type, or null if no formatter found.</returns>
      <param name="type">The .NET type to read.</param>
      <param name="mediaType">The media type to match on.</param>
    </member>
    <member name="M:System.Net.Http.Formatting.MediaTypeFormatterCollection.FindWriter(System.Type,System.Net.Http.Headers.MediaTypeHeaderValue)">
      <summary> Searches a collection for a formatter that can write the .NET <paramref name="type" /> in the given <paramref name="mediaType" />. </summary>
      <returns>The <see cref="T:System.Net.Http.Formatting.MediaTypeFormatter" /> that can write the type, or null if no formatter found.</returns>
      <param name="type">The .NET type to write.</param>
      <param name="mediaType">The media type to match on.</param>
    </member>
    <member name="P:System.Net.Http.Formatting.MediaTypeFormatterCollection.FormUrlEncodedFormatter">
      <summary> Gets the <see cref="T:System.Net.Http.Formatting.MediaTypeFormatter" /> to use for application/x-www-form-urlencoded data. </summary>
      <returns> The <see cref="T:System.Net.Http.Formatting.MediaTypeFormatter" /> to use for application/x-www-form-urlencoded data. </returns>
    </member>
    <member name="M:System.Net.Http.Formatting.MediaTypeFormatterCollection.IsTypeExcludedFromValidation(System.Type)">
      <summary> Determines whether the <paramref name="type" /> is one of those loosely defined types that should be excluded from validation.</summary>
      <returns>true if the type should be excluded; otherwise, false.</returns>
      <param name="type">The .NET <see cref="T:System.Type" /> to validate.</param>
    </member>
    <member name="P:System.Net.Http.Formatting.MediaTypeFormatterCollection.JsonFormatter">
      <summary> Gets the <see cref="T:System.Net.Http.Formatting.MediaTypeFormatter" /> to use for JSON. </summary>
      <returns>The <see cref="T:System.Net.Http.Formatting.MediaTypeFormatter" /> to use for JSON.</returns>
    </member>
    <member name="P:System.Net.Http.Formatting.MediaTypeFormatterCollection.XmlFormatter">
      <summary> Gets the <see cref="T:System.Net.Http.Formatting.MediaTypeFormatter" /> to use for XML.</summary>
      <returns> The <see cref="T:System.Net.Http.Formatting.MediaTypeFormatter" /> to use for XML.</returns>
    </member>
    <member name="M:System.Net.Http.Formatting.MediaTypeFormatterExtensions.AddQueryStringMapping(System.Net.Http.Formatting.MediaTypeFormatter,System.String,System.String,System.Net.Http.Headers.MediaTypeHeaderValue)">
      <summary> Updates the given set of formatter of <see cref="T:System.Net.Http.Formatting.MediaTypeMapping" /> elements so that it associates the mediaType with <see cref="T:System.Uri" />s containing a specific query parameter and value. </summary>
      <param name="formatter">The <see cref="T:System.Net.Http.Formatting.MediaTypeFormatter" /> to receive the new <see cref="T:System.Net.Http.Formatting.QueryStringMapping" /> item.</param>
      <param name="queryStringParameterName">The name of the query parameter.</param>
      <param name="queryStringParameterValue">The value assigned to that query parameter.</param>
      <param name="mediaType">The <see cref="T:System.Net.Http.Headers.MediaTypeHeaderValue" /> to associate  with a <see cref="T:System.Uri" /> containing a query string matching queryStringParameterName  and queryStringParameterValue.</param>
    </member>
    <member name="M:System.Net.Http.Formatting.MediaTypeFormatterExtensions.AddQueryStringMapping(System.Net.Http.Formatting.MediaTypeFormatter,System.String,System.String,System.String)">
      <summary> Updates the given set of formatter of <see cref="T:System.Net.Http.Formatting.MediaTypeMapping" /> elements so that it associates the mediaType with <see cref="T:System.Uri" />s containing a specific query parameter and value. </summary>
      <param name="formatter">The <see cref="T:System.Net.Http.Formatting.MediaTypeFormatter" /> to receive the new <see cref="T:System.Net.Http.Formatting.QueryStringMapping" /> item.</param>
      <param name="queryStringParameterName">The name of the query parameter.</param>
      <param name="queryStringParameterValue">The value assigned to that query parameter.</param>
      <param name="mediaType">The media type to associate  with a <see cref="T:System.Uri" /> containing a query string matching queryStringParameterName and queryStringParameterValue.</param>
    </member>
    <member name="M:System.Net.Http.Formatting.MediaTypeFormatterExtensions.AddRequestHeaderMapping(System.Net.Http.Formatting.MediaTypeFormatter,System.String,System.String,System.StringComparison,System.Boolean,System.Net.Http.Headers.MediaTypeHeaderValue)">
      <summary> Updates the given set of formatter of <see cref="T:System.Net.Http.Formatting.MediaTypeMapping" /> elements so that it associates the mediaType with a specific HTTP request header field with a specific value. </summary>
      <param name="formatter">The <see cref="T:System.Net.Http.Formatting.MediaTypeFormatter" /> to receive the new <see cref="T:System.Net.Http.Formatting.MediaRangeMapping" /> item.</param>
      <param name="headerName">Name of the header to match.</param>
      <param name="headerValue">The header value to match.</param>
      <param name="valueComparison">The <see cref="T:System.StringComparison" /> to use when matching headerValue.</param>
      <param name="isValueSubstring">if set to true then headerValue is  considered a match if it matches a substring of the actual header value.</param>
      <param name="mediaType">The <see cref="T:System.Net.Http.Headers.MediaTypeHeaderValue" /> to associate  with a <see cref="M:HttpRequestMessage.Header" /> entry with a name matching headerName and a value matching headerValue.</param>
    </member>
    <member name="M:System.Net.Http.Formatting.MediaTypeFormatterExtensions.AddRequestHeaderMapping(System.Net.Http.Formatting.MediaTypeFormatter,System.String,System.String,System.StringComparison,System.Boolean,System.String)">
      <summary> Updates the given set of formatter of <see cref="T:System.Net.Http.Formatting.MediaTypeMapping" /> elements so that it associates the mediaType with a specific HTTP request header field with a specific value. </summary>
      <param name="formatter">The <see cref="T:System.Net.Http.Formatting.MediaTypeFormatter" /> to receive the new <see cref="T:System.Net.Http.Formatting.MediaRangeMapping" /> item.</param>
      <param name="headerName">Name of the header to match.</param>
      <param name="headerValue">The header value to match.</param>
      <param name="valueComparison">The <see cref="T:System.StringComparison" /> to use when matching headerValue.</param>
      <param name="isValueSubstring">if set to true then headerValue is  considered a match if it matches a substring of the actual header value.</param>
      <param name="mediaType">The media type to associate  with a <see cref="M:HttpRequestMessage.Header" /> entry with a name matching headerName and a value matching headerValue.</param>
    </member>
    <member name="T:System.Net.Http.Formatting.MediaTypeFormatterMatch">
      <summary> This class describes how well a particular <see cref="T:System.Net.Http.Formatting.MediaTypeFormatter" /> matches a request. </summary>
    </member>
    <member name="M:System.Net.Http.Formatting.MediaTypeFormatterMatch.#ctor(System.Net.Http.Formatting.MediaTypeFormatter,System.Net.Http.Headers.MediaTypeHeaderValue,System.Nullable{System.Double},System.Net.Http.Formatting.MediaTypeFormatterMatchRanking)">
      <summary> Initializes a new instance of the <see cref="T:System.Net.Http.Formatting.MediaTypeFormatterMatch" /> class. </summary>
      <param name="formatter">The matching formatter.</param>
      <param name="mediaType">The media type. Can be null in which case the media type application/octet-stream is used.</param>
      <param name="quality">The quality of the match. Can be null in which case it is considered a full match with a value of 1.0</param>
      <param name="ranking">The kind of match.</param>
    </member>
    <member name="P:System.Net.Http.Formatting.MediaTypeFormatterMatch.Formatter">
      <summary> Gets the media type formatter. </summary>
    </member>
    <member name="P:System.Net.Http.Formatting.MediaTypeFormatterMatch.MediaType">
      <summary> Gets the matched media type. </summary>
    </member>
    <member name="P:System.Net.Http.Formatting.MediaTypeFormatterMatch.Quality">
      <summary> Gets the quality of the match </summary>
    </member>
    <member name="P:System.Net.Http.Formatting.MediaTypeFormatterMatch.Ranking">
      <summary> Gets the kind of match that occurred. </summary>
    </member>
    <member name="T:System.Net.Http.Formatting.MediaTypeFormatterMatchRanking">
      <summary> Contains information about the degree to which a <see cref="T:System.Net.Http.Formatting.MediaTypeFormatter" /> matches the   explicit or implicit preferences found in an incoming request. </summary>
    </member>
    <member name="F:System.Net.Http.Formatting.MediaTypeFormatterMatchRanking.None">
      <summary> No match was found </summary>
    </member>
    <member name="F:System.Net.Http.Formatting.MediaTypeFormatterMatchRanking.MatchOnCanWriteType">
      <summary> Matched on a type, meaning that the formatter is able to serialize the type.</summary>
    </member>
    <member name="F:System.Net.Http.Formatting.MediaTypeFormatterMatchRanking.MatchOnRequestAcceptHeaderLiteral">
      <summary>Matched on an explicit literal accept header, such as âapplication/jsonâ.</summary>
    </member>
    <member name="F:System.Net.Http.Formatting.MediaTypeFormatterMatchRanking.MatchOnRequestAcceptHeaderSubtypeMediaRange">
      <summary>Matched on an explicit subtype range in an Accept header, such as âapplication/*â.</summary>
    </member>
    <member name="F:System.Net.Http.Formatting.MediaTypeFormatterMatchRanking.MatchOnRequestAcceptHeaderAllMediaRange">
      <summary>Matched on an explicit â*/*â range in the Accept header.</summary>
    </member>
    <member name="F:System.Net.Http.Formatting.MediaTypeFormatterMatchRanking.MatchOnRequestWithMediaTypeMapping">
      <summary> Matched on <see cref="T:System.Net.Http.HttpRequestMessage" /> after having applied the various <see cref="T:System.Net.Http.Formatting.MediaTypeMapping" />s. </summary>
    </member>
    <member name="F:System.Net.Http.Formatting.MediaTypeFormatterMatchRanking.MatchOnRequestMediaType">
      <summary> Matched on the media type of the entity body in the HTTP request message.</summary>
    </member>
    <member name="T:System.Net.Http.Formatting.MediaTypeMapping">
      <summary> An abstract base class used to create an association between <see cref="T:System.Net.Http.HttpRequestMessage" /> or  <see cref="T:System.Net.Http.HttpResponseMessage" /> instances that have certain characteristics  and a specific <see cref="T:System.Net.Http.Headers.MediaTypeHeaderValue" />.  </summary>
    </member>
    <member name="M:System.Net.Http.Formatting.MediaTypeMapping.#ctor(System.Net.Http.Headers.MediaTypeHeaderValue)">
      <summary> Initializes a new instance of a <see cref="T:System.Net.Http.Formatting.MediaTypeMapping" /> with the given mediaType value. </summary>
      <param name="mediaType"> The <see cref="T:System.Net.Http.Headers.MediaTypeHeaderValue" /> that is associated with <see cref="T:System.Net.Http.HttpRequestMessage" /> or  <see cref="T:System.Net.Http.HttpResponseMessage" /> instances that have the given characteristics of the  <see cref="T:System.Net.Http.Formatting.MediaTypeMapping" />. </param>
    </member>
    <member name="M:System.Net.Http.Formatting.MediaTypeMapping.#ctor(System.String)">
      <summary> Initializes a new instance of a <see cref="T:System.Net.Http.Formatting.MediaTypeMapping" /> with the given mediaType value. </summary>
      <param name="mediaType"> The <see cref="T:System.String" /> that is associated with <see cref="T:System.Net.Http.HttpRequestMessage" /> or  <see cref="T:System.Net.Http.HttpResponseMessage" /> instances that have the given characteristics of the  <see cref="T:System.Net.Http.Formatting.MediaTypeMapping" />. </param>
    </member>
    <member name="P:System.Net.Http.Formatting.MediaTypeMapping.MediaType">
      <summary> Gets the <see cref="T:System.Net.Http.Headers.MediaTypeHeaderValue" /> that is associated with <see cref="T:System.Net.Http.HttpRequestMessage" /> or  <see cref="T:System.Net.Http.HttpResponseMessage" /> instances that have the given characteristics of the  <see cref="T:System.Net.Http.Formatting.MediaTypeMapping" />. </summary>
    </member>
    <member name="M:System.Net.Http.Formatting.MediaTypeMapping.TryMatchMediaType(System.Net.Http.HttpRequestMessage)">
      <summary> Returns the quality of the match of the <see cref="T:System.Net.Http.Headers.MediaTypeHeaderValue" /> associated with request. </summary>
      <returns> The quality of the match. It must be between 0.0 and 1.0. A value of 0.0 signifies no match. A value of 1.0 signifies a complete match. </returns>
      <param name="request"> The <see cref="T:System.Net.Http.HttpRequestMessage" /> to evaluate for the characteristics  associated with the <see cref="T:System.Net.Http.Headers.MediaTypeHeaderValue" /> of the <see cref="T:System.Net.Http.Formatting.MediaTypeMapping" />. </param>
    </member>
    <member name="T:System.Net.Http.Formatting.QueryStringMapping">
      <summary> Class that provides <see cref="T:System.Net.Http.Headers.MediaTypeHeaderValue" />s from query strings. </summary>
    </member>
    <member name="M:System.Net.Http.Formatting.QueryStringMapping.#ctor(System.String,System.String,System.Net.Http.Headers.MediaTypeHeaderValue)">
      <summary> Initializes a new instance of the <see cref="T:System.Net.Http.Formatting.QueryStringMapping" /> class. </summary>
      <param name="queryStringParameterName">The name of the query string parameter to match, if present.</param>
      <param name="queryStringParameterValue">The value of the query string parameter specified by queryStringParameterName.</param>
      <param name="mediaType">The <see cref="T:System.Net.Http.Headers.MediaTypeHeaderValue" /> to use if the query parameter specified by queryStringParameterName is present and assigned the value specified by queryStringParameterValue.</param>
    </member>
    <member name="M:System.Net.Http.Formatting.QueryStringMapping.#ctor(System.String,System.String,System.String)">
      <summary> Initializes a new instance of the <see cref="T:System.Net.Http.Formatting.QueryStringMapping" /> class. </summary>
      <param name="queryStringParameterName">The name of the query string parameter to match, if present.</param>
      <param name="queryStringParameterValue">The value of the query string parameter specified by queryStringParameterName.</param>
      <param name="mediaType">The media type to use if the query parameter specified by queryStringParameterName is present and assigned the value specified by queryStringParameterValue.</param>
    </member>
    <member name="P:System.Net.Http.Formatting.QueryStringMapping.QueryStringParameterName">
      <summary> Gets the query string parameter name. </summary>
    </member>
    <member name="P:System.Net.Http.Formatting.QueryStringMapping.QueryStringParameterValue">
      <summary> Gets the query string parameter value. </summary>
    </member>
    <member name="M:System.Net.Http.Formatting.QueryStringMapping.TryMatchMediaType(System.Net.Http.HttpRequestMessage)">
      <summary> Returns a value indicating whether the current <see cref="T:System.Net.Http.Formatting.QueryStringMapping" /> instance can return a <see cref="T:System.Net.Http.Headers.MediaTypeHeaderValue" /> from request. </summary>
      <returns>If this instance can produce a <see cref="T:System.Net.Http.Headers.MediaTypeHeaderValue" /> from request it returns 1.0 otherwise 0.0.</returns>
      <param name="request">The <see cref="T:System.Net.Http.HttpRequestMessage" /> to check.</param>
    </member>
    <member name="T:System.Net.Http.Formatting.RequestHeaderMapping">
      <summary> This class provides a mapping from an arbitrary HTTP request header field to a <see cref="T:System.Net.Http.Headers.MediaTypeHeaderValue" /> used to select <see cref="T:System.Net.Http.Formatting.MediaTypeFormatter" /> instances for handling the entity body of an <see cref="T:System.Net.Http.HttpRequestMessage" /> or <see cref="T:System.Net.Http.HttpResponseMessage" />. &lt;remarks&gt;This class only checks header fields associated with <see cref="M:HttpRequestMessage.Headers" /> for a match. It does not check header fields associated with <see cref="M:HttpResponseMessage.Headers" /> or <see cref="M:HttpContent.Headers" /> instances.&lt;/remarks&gt;</summary>
    </member>
    <member name="M:System.Net.Http.Formatting.RequestHeaderMapping.#ctor(System.String,System.String,System.StringComparison,System.Boolean,System.Net.Http.Headers.MediaTypeHeaderValue)">
      <summary> Initializes a new instance of the <see cref="T:System.Net.Http.Formatting.RequestHeaderMapping" /> class. </summary>
      <param name="headerName">Name of the header to match.</param>
      <param name="headerValue">The header value to match.</param>
      <param name="valueComparison">The <see cref="T:System.StringComparison" /> to use when matching headerValue.</param>
      <param name="isValueSubstring">if set to true then headerValue is  considered a match if it matches a substring of the actual header value.</param>
      <param name="mediaType">The <see cref="T:System.Net.Http.Headers.MediaTypeHeaderValue" /> to use if headerName and headerValue  is considered a match.</param>
    </member>
    <member name="M:System.Net.Http.Formatting.RequestHeaderMapping.#ctor(System.String,System.String,System.StringComparison,System.Boolean,System.String)">
      <summary> Initializes a new instance of the <see cref="T:System.Net.Http.Formatting.RequestHeaderMapping" /> class. </summary>
      <param name="headerName">Name of the header to match.</param>
      <param name="headerValue">The header value to match.</param>
      <param name="valueComparison">The value comparison to use when matching headerValue.</param>
      <param name="isValueSubstring">if set to true then headerValue is  considered a match if it matches a substring of the actual header value.</param>
      <param name="mediaType">The media type to use if headerName and headerValue  is considered a match.</param>
    </member>
    <member name="P:System.Net.Http.Formatting.RequestHeaderMapping.HeaderName">
      <summary> Gets the name of the header to match. </summary>
    </member>
    <member name="P:System.Net.Http.Formatting.RequestHeaderMapping.HeaderValue">
      <summary> Gets the header value to match. </summary>
    </member>
    <member name="P:System.Net.Http.Formatting.RequestHeaderMapping.HeaderValueComparison">
      <summary> Gets the <see cref="T:System.StringComparison" /> to use when matching <see cref="M:HeaderValue" />. </summary>
    </member>
    <member name="P:System.Net.Http.Formatting.RequestHeaderMapping.IsValueSubstring">
      <summary> Gets a value indicating whether <see cref="M:HeaderValue" /> is  a matched as a substring of the actual header value. this instance is value substring. </summary>
      <returns>true<see cref="P:System.Net.Http.Formatting.RequestHeaderMapping.HeaderValue" />false</returns>
    </member>
    <member name="M:System.Net.Http.Formatting.RequestHeaderMapping.TryMatchMediaType(System.Net.Http.HttpRequestMessage)">
      <summary> Returns a value indicating whether the current <see cref="T:System.Net.Http.Formatting.RequestHeaderMapping" /> instance can return a <see cref="T:System.Net.Http.Headers.MediaTypeHeaderValue" /> from request. </summary>
      <returns> The quality of the match. It must be between 0.0 and 1.0. A value of 0.0 signifies no match. A value of 1.0 signifies a complete match. </returns>
      <param name="request">The <see cref="T:System.Net.Http.HttpRequestMessage" /> to check.</param>
    </member>
    <member name="T:System.Net.Http.Formatting.XmlHttpRequestHeaderMapping">
      <summary> A <see cref="T:System.Net.Http.Formatting.RequestHeaderMapping" /> that maps the X-Requested-With http header field set by AJAX XmlHttpRequest (XHR) to the media type application/json if no explicit Accept header fields are present in the request. </summary>
    </member>
    <member name="M:System.Net.Http.Formatting.XmlHttpRequestHeaderMapping.#ctor">
      <summary> Initializes a new instance of <see cref="T:System.Net.Http.Formatting.XmlHttpRequestHeaderMapping" /> class </summary>
    </member>
    <member name="M:System.Net.Http.Formatting.XmlHttpRequestHeaderMapping.TryMatchMediaType(System.Net.Http.HttpRequestMessage)">
      <summary> Returns a value indicating whether the current <see cref="T:System.Net.Http.Formatting.RequestHeaderMapping" /> instance can return a <see cref="T:System.Net.Http.Headers.MediaTypeHeaderValue" /> from request. </summary>
      <returns> The quality of the match. A value of 0.0 signifies no match. A value of 1.0 signifies a complete match and that the request was made using XmlHttpRequest without an Accept header. </returns>
      <param name="request">The <see cref="T:System.Net.Http.HttpRequestMessage" /> to check.</param>
    </member>
    <member name="T:System.Net.Http.Formatting.XmlMediaTypeFormatter">
      <summary>
        <see cref="T:System.Net.Http.Formatting.MediaTypeFormatter" /> class to handle Xml. </summary>
    </member>
    <member name="M:System.Net.Http.Formatting.XmlMediaTypeFormatter.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Net.Http.Formatting.XmlMediaTypeFormatter" /> class.</summary>
    </member>
    <member name="M:System.Net.Http.Formatting.XmlMediaTypeFormatter.CanReadType(System.Type)">
      <summary>Queries whether the <see cref="T:System.Net.Http.Formatting.XmlMediaTypeFormatter" /> can deserializean object of the specified type.</summary>
      <returns>true if the <see cref="T:System.Net.Http.Formatting.XmlMediaTypeFormatter" /> can deserialize the type; otherwise, false.</returns>
      <param name="type">The type to deserialize.</param>
    </member>
    <member name="M:System.Net.Http.Formatting.XmlMediaTypeFormatter.CanWriteType(System.Type)">
      <summary>Queries whether the  <see cref="T:System.Net.Http.Formatting.XmlMediaTypeFormatter" /> can serializean object of the specified type.</summary>
      <returns>true if the <see cref="T:System.Net.Http.Formatting.XmlMediaTypeFormatter" /> can serialize the type; otherwise, false.</returns>
      <param name="type">The type to serialize.</param>
    </member>
    <member name="P:System.Net.Http.Formatting.XmlMediaTypeFormatter.DefaultMediaType">
      <summary>Gets the default media type for the XML formatter.</summary>
      <returns>The default media type, which is âapplication/xmlâ.</returns>
    </member>
    <member name="P:System.Net.Http.Formatting.XmlMediaTypeFormatter.Indent">
      <summary>Gets or sets a value indicating whether to indent elements when writing data.</summary>
      <returns>true to indent elements; otherwise, false.</returns>
    </member>
    <member name="P:System.Net.Http.Formatting.XmlMediaTypeFormatter.MaxDepth">
      <summary>Gets and sets the maximum nested node depth.</summary>
      <returns>The maximum nested node depth.</returns>
    </member>
    <member name="M:System.Net.Http.Formatting.XmlMediaTypeFormatter.ReadFromStreamAsync(System.Type,System.IO.Stream,System.Net.Http.HttpContent,System.Net.Http.Formatting.IFormatterLogger)">
      <summary> Called during deserialization to read an object of the specified type from the specified readStream. </summary>
      <returns>A <see cref="T:System.Threading.Tasks.Task" /> whose result will be the object instance that has been read.</returns>
      <param name="type">The type of object to read.</param>
      <param name="readStream">The <see cref="T:System.IO.Stream" /> from which to read.</param>
      <param name="content">The <see cref="T:System.Net.Http.HttpContent" /> for the content being read.</param>
      <param name="formatterLogger">The <see cref="T:System.Net.Http.Formatting.IFormatterLogger" /> to log events to.</param>
    </member>
    <member name="M:System.Net.Http.Formatting.XmlMediaTypeFormatter.RemoveSerializer(System.Type)">
      <summary>Unregisters the serializer currently associated with the given type.</summary>
      <returns>true if a serializer was previously registered for the type; otherwise, false.</returns>
      <param name="type">The type of object whose serializer should be removed.</param>
    </member>
    <member name="M:System.Net.Http.Formatting.XmlMediaTypeFormatter.SetSerializer``1(System.Runtime.Serialization.XmlObjectSerializer)">
      <summary>Registers an <see cref="T:System.Runtime.Serialization.XmlObjectSerializer" /> to read or write objects of a specified type.</summary>
      <param name="serializer">The <see cref="T:System.Runtime.Serialization.XmlObjectSerializer" /> instance.</param>
      <typeparam name="T">The type of object that will be serialized or deserialized with<paramref name="serializer" />.</typeparam>
    </member>
    <member name="M:System.Net.Http.Formatting.XmlMediaTypeFormatter.SetSerializer(System.Type,System.Runtime.Serialization.XmlObjectSerializer)">
      <summary>Registers an <see cref="T:System.Runtime.Serialization.XmlObjectSerializer" /> to read or write objects of a specified type.</summary>
      <param name="type">The type of object that will be serialized or deserialized with<paramref name="serializer" />.</param>
      <param name="serializer">The <see cref="T:System.Runtime.Serialization.XmlObjectSerializer" /> instance.</param>
    </member>
    <member name="M:System.Net.Http.Formatting.XmlMediaTypeFormatter.SetSerializer(System.Type,System.Xml.Serialization.XmlSerializer)">
      <summary>Registers an <see cref="T:System.Xml.Serialization.XmlSerializer" /> to read or write objects of a specified type.</summary>
      <param name="type">The type of object that will be serialized or deserialized with<paramref name="serializer" />.</param>
      <param name="serializer">The <see cref="T:System.Xml.Serialization.XmlSerializer" /> instance.</param>
    </member>
    <member name="M:System.Net.Http.Formatting.XmlMediaTypeFormatter.SetSerializer``1(System.Xml.Serialization.XmlSerializer)">
      <summary>Registers an <see cref="T:System.Xml.Serialization.XmlSerializer" /> to read or write objects of a specified type.</summary>
      <param name="serializer">The <see cref="T:System.Xml.Serialization.XmlSerializer" /> instance.</param>
      <typeparam name="T">The type of object that will be serialized or deserialized with<paramref name="serializer" />.</typeparam>
    </member>
    <member name="P:System.Net.Http.Formatting.XmlMediaTypeFormatter.UseXmlSerializer">
      <summary>Gets or sets a value indicating whether the XML formatter uses the <see cref="T:System.Xml.Serialization.XmlSerializer" /> as the default serializer, instead of  using the <see cref="T:System.Runtime.Serialization.DataContractSerializer" />.</summary>
      <returns>If true, the formatter uses the <see cref="T:System.Xml.Serialization.XmlSerializer" /> by default; otherwise, it uses the <see cref="T:System.Runtime.Serialization.DataContractSerializer" /> by default.</returns>
    </member>
    <member name="M:System.Net.Http.Formatting.XmlMediaTypeFormatter.WriteToStreamAsync(System.Type,System.Object,System.IO.Stream,System.Net.Http.HttpContent,System.Net.TransportContext)">
      <summary> Called during serialization to write an object of the specified type to the specified writeStream. </summary>
      <returns>A <see cref="T:System.Threading.Tasks.Task" /> that will write the value to the stream.</returns>
      <param name="type">The type of object to write.</param>
      <param name="value">The object to write.</param>
      <param name="writeStream">The <see cref="T:System.IO.Stream" /> to which to write.</param>
      <param name="content">The <see cref="T:System.Net.Http.HttpContent" /> for the content being written.</param>
      <param name="transportContext">The <see cref="T:System.Net.TransportContext" />.</param>
    </member>
    <member name="T:System.Net.Http.Handlers.HttpProgressEventArgs">
      <summary>Represents the event arguments for the HTTP progress.</summary>
    </member>
    <member name="M:System.Net.Http.Handlers.HttpProgressEventArgs.#ctor(System.Int32,System.Object,System.Int32,System.Nullable{System.Int64})">
      <summary>Initializes a new instance of the <see cref="T:System.Net.Http.Handlers.HttpProgressEventArgs" /> class.</summary>
      <param name="progressPercentage">The percentage of the progress.</param>
      <param name="userToken">The user token.</param>
      <param name="bytesTransferred">The number of bytes transferred.</param>
      <param name="totalBytes">The total number of bytes transferred.</param>
    </member>
    <member name="P:System.Net.Http.Handlers.HttpProgressEventArgs.BytesTransferred">
      <summary>Gets the number of bytes transferred in the HTTP progress.</summary>
      <returns>The number of bytes transferred in the HTTP progress.</returns>
    </member>
    <member name="P:System.Net.Http.Handlers.HttpProgressEventArgs.TotalBytes">
      <summary>Gets the total number of bytes transferred by the HTTP progress.</summary>
      <returns>The total number of bytes transferred by the HTTP progress.</returns>
    </member>
    <member name="T:System.Net.Http.Handlers.ProgressMessageHandler">
      <summary>Generates progress notification for both request entities being uploaded and response entities being downloaded.</summary>
    </member>
    <member name="M:System.Net.Http.Handlers.ProgressMessageHandler.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Net.Http.Handlers.ProgressMessageHandler" /> class.</summary>
    </member>
    <member name="M:System.Net.Http.Handlers.ProgressMessageHandler.#ctor(System.Net.Http.HttpMessageHandler)">
      <summary>Initializes a new instance of the <see cref="T:System.Net.Http.Handlers.ProgressMessageHandler" /> class.</summary>
      <param name="innerHandler">The inner message handler.</param>
    </member>
    <member name="E:System.Net.Http.Handlers.ProgressMessageHandler.HttpReceiveProgress">
      <summary>Occurs when event entities are being downloaded.</summary>
    </member>
    <member name="E:System.Net.Http.Handlers.ProgressMessageHandler.HttpSendProgress">
      <summary>Occurs when event entities are being uploaded.</summary>
    </member>
    <member name="M:System.Net.Http.Handlers.ProgressMessageHandler.OnHttpRequestProgress(System.Net.Http.HttpRequestMessage,System.Net.Http.Handlers.HttpProgressEventArgs)">
      <summary>Raises the event that handles the request of the progress.</summary>
      <param name="request">The request.</param>
      <param name="e">The event handler for the request.</param>
    </member>
    <member name="M:System.Net.Http.Handlers.ProgressMessageHandler.OnHttpResponseProgress(System.Net.Http.HttpRequestMessage,System.Net.Http.Handlers.HttpProgressEventArgs)">
      <summary>Raises the event that handles the response of the progress.</summary>
      <param name="request">The request.</param>
      <param name="e">The event handler for the request.</param>
    </member>
    <member name="M:System.Net.Http.Handlers.ProgressMessageHandler.SendAsync(System.Net.Http.HttpRequestMessage,System.Threading.CancellationToken)">
      <summary>Sends the specified progress message to an HTTP server for delivery.</summary>
      <returns>The sent progress message.</returns>
      <param name="request">The request.</param>
      <param name="cancellationToken">The cancellation token.</param>
    </member>
    <member name="T:System.Net.Http.Headers.CookieHeaderValue">
      <summary>Provides value for the cookie header.</summary>
    </member>
    <member name="M:System.Net.Http.Headers.CookieHeaderValue.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Net.Http.Headers.CookieHeaderValue" /> class.</summary>
    </member>
    <member name="M:System.Net.Http.Headers.CookieHeaderValue.#ctor(System.String,System.Collections.Specialized.NameValueCollection)">
      <summary>Initializes a new instance of the <see cref="T:System.Net.Http.Headers.CookieHeaderValue" /> class.</summary>
      <param name="name">The value of the name.</param>
      <param name="values">The values.</param>
    </member>
    <member name="M:System.Net.Http.Headers.CookieHeaderValue.#ctor(System.String,System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Net.Http.Headers.CookieHeaderValue" /> class.</summary>
      <param name="name">The value of the name.</param>
      <param name="value">The value.</param>
    </member>
    <member name="M:System.Net.Http.Headers.CookieHeaderValue.Clone">
      <summary>Creates a shallow copy of the cookie value.</summary>
      <returns>A shallow copy of the cookie value.</returns>
    </member>
    <member name="P:System.Net.Http.Headers.CookieHeaderValue.Cookies">
      <summary>Gets a collection of cookies sent by the client.</summary>
      <returns>A collection object representing the clientâs cookie variables.</returns>
    </member>
    <member name="P:System.Net.Http.Headers.CookieHeaderValue.Domain">
      <summary>Gets or sets the domain to associate the cookie with.</summary>
      <returns>The name of the domain to associate the cookie with.</returns>
    </member>
    <member name="P:System.Net.Http.Headers.CookieHeaderValue.Expires">
      <summary>Gets or sets the expiration date and time for the cookie.</summary>
      <returns>The time of day (on the client) at which the cookie expires.</returns>
    </member>
    <member name="P:System.Net.Http.Headers.CookieHeaderValue.HttpOnly">
      <summary>Gets or sets a value that specifies whether a cookie is accessible by client-side script.</summary>
      <returns>true if the cookie has the HttpOnly attribute and cannot be accessed through a client-side script; otherwise, false.</returns>
    </member>
    <member name="P:System.Net.Http.Headers.CookieHeaderValue.Item(System.String)">
      <summary>Gets a shortcut to the cookie property.</summary>
      <returns>The cookie value.</returns>
    </member>
    <member name="P:System.Net.Http.Headers.CookieHeaderValue.MaxAge">
      <summary>Gets or sets the maximum age permitted for a resource.</summary>
      <returns>The maximum age permitted for a resource.</returns>
    </member>
    <member name="P:System.Net.Http.Headers.CookieHeaderValue.Path">
      <summary>Gets or sets the virtual path to transmit with the current cookie.</summary>
      <returns>The virtual path to transmit with the cookie.</returns>
    </member>
    <member name="P:System.Net.Http.Headers.CookieHeaderValue.Secure">
      <summary>Gets or sets a value indicating whether to transmit the cookie using Secure Sockets Layer (SSL)âthat is, over HTTPS only.</summary>
      <returns>true to transmit the cookie over an SSL connection (HTTPS); otherwise, false.</returns>
    </member>
    <member name="M:System.Net.Http.Headers.CookieHeaderValue.ToString">
      <summary>Returns a string that represents the current object.</summary>
      <returns>A string that represents the current object.</returns>
    </member>
    <member name="M:System.Net.Http.Headers.CookieHeaderValue.TryParse(System.String,System.Net.Http.Headers.CookieHeaderValue@)">
      <summary>Indicates a value whether the string representation will be converted.</summary>
      <returns>true if the string representation will be converted; otherwise, false.</returns>
      <param name="input">The input value.</param>
      <param name="parsedValue">The parsed value to convert.</param>
    </member>
    <member name="T:System.Net.Http.Headers.CookieState">
      <summary>Contains cookie name and its associated cookie state.</summary>
    </member>
    <member name="M:System.Net.Http.Headers.CookieState.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Net.Http.Headers.CookieState" /> class.</summary>
      <param name="name">The name of the cookie.</param>
    </member>
    <member name="M:System.Net.Http.Headers.CookieState.#ctor(System.String,System.Collections.Specialized.NameValueCollection)">
      <summary>Initializes a new instance of the <see cref="T:System.Net.Http.Headers.CookieState" /> class.</summary>
      <param name="name">The name of the cookie.</param>
      <param name="values">The collection of name-value pair for the cookie.</param>
    </member>
    <member name="M:System.Net.Http.Headers.CookieState.#ctor(System.String,System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Net.Http.Headers.CookieState" /> class.</summary>
      <param name="name">The name of the cookie.</param>
      <param name="value">The value of the cookie.</param>
    </member>
    <member name="M:System.Net.Http.Headers.CookieState.Clone">
      <summary>Returns a new object that is a copy of the current instance.</summary>
      <returns>A new object that is a copy of the current instance.</returns>
    </member>
    <member name="P:System.Net.Http.Headers.CookieState.Item(System.String)">
      <summary>Gets or sets the cookie value with the specified cookie name, if the cookie data is structured.</summary>
      <returns>The cookie value with the specified cookie name.</returns>
    </member>
    <member name="P:System.Net.Http.Headers.CookieState.Name">
      <summary>Gets or sets the name of the cookie.</summary>
      <returns>The name of the cookie.</returns>
    </member>
    <member name="M:System.Net.Http.Headers.CookieState.ToString">
      <summary>Returns the string representation the current object.</summary>
      <returns>The string representation the current object.</returns>
    </member>
    <member name="P:System.Net.Http.Headers.CookieState.Value">
      <summary>Gets or sets the cookie value, if cookie data is a simple string value.</summary>
      <returns>The value of the cookie. </returns>
    </member>
    <member name="P:System.Net.Http.Headers.CookieState.Values">
      <summary>Gets or sets the collection of name-value pair, if the cookie data is structured.</summary>
      <returns>The collection of name-value pair for the cookie.</returns>
    </member>
  </members>
=======
ï»¿<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>System.Net.Http.Formatting</name>
  </assembly>
  <members>
    <member name="T:System.Net.Http.HttpClientExtensions">
      <summary>ç¨äºä½¿ç¨ <see cref="T:System.Net.Http.HttpClient" /> æ¥å¸®å©ååºæ ¼å¼åè¯·æ±çæ©å±æ¹æ³ã</summary>
    </member>
    <member name="M:System.Net.Http.HttpClientExtensions.PostAsJsonAsync``1(System.Net.Http.HttpClient,System.String,``0)">
      <summary>ä½¿ç¨åºååä¸º JSON çæå®å¼ä»¥å¼æ­¥æä½æ¹å¼åé POST è¯·æ±ã</summary>
      <returns>ä¸ä¸ªè¡¨ç¤ºå¼æ­¥æä½çä»»å¡å¯¹è±¡ã</returns>
      <param name="client">ç¨äºååºè¯·æ±çå®¢æ·ç«¯ã</param>
      <param name="requestUri">è¯·æ±å°åéå°ç URIã</param>
      <param name="value">è¦åå¥å°è¯·æ±çå®ä½æ­£æçå¼ã</param>
      <typeparam name="T">è¦åºååçå¯¹è±¡çç±»åã</typeparam>
    </member>
    <member name="M:System.Net.Http.HttpClientExtensions.PostAsJsonAsync``1(System.Net.Http.HttpClient,System.String,``0,System.Threading.CancellationToken)">
      <summary>ä½¿ç¨åºååä¸º JSON çæå®å¼ä»¥å¼æ­¥æä½æ¹å¼åé POST è¯·æ±ãåå«ç¨äºåæ¶è¯·æ±çåæ¶æ è®°ã</summary>
      <returns>ä¸ä¸ªè¡¨ç¤ºå¼æ­¥æä½çä»»å¡å¯¹è±¡ã</returns>
      <param name="client">ç¨äºååºè¯·æ±çå®¢æ·ç«¯ã</param>
      <param name="requestUri">è¯·æ±å°åéå°ç URIã</param>
      <param name="value">è¦åå¥å°è¯·æ±çå®ä½æ­£æçå¼ã</param>
      <param name="cancellationToken">ä¸ä¸ªåæ¶æ è®°ï¼å¯ä¾å¶ä»å¯¹è±¡æçº¿ç¨ç¨æ¥æ¥æ¶åæ¶éç¥ã</param>
      <typeparam name="T">è¦åºååçå¯¹è±¡çç±»åã</typeparam>
    </member>
    <member name="M:System.Net.Http.HttpClientExtensions.PostAsXmlAsync``1(System.Net.Http.HttpClient,System.String,``0)">
      <summary>ä½¿ç¨åºååä¸º XML çæå®å¼ä»¥å¼æ­¥æä½æ¹å¼åé POST è¯·æ±ã</summary>
      <returns>ä¸ä¸ªè¡¨ç¤ºå¼æ­¥æä½çä»»å¡å¯¹è±¡ã</returns>
      <param name="client">ç¨äºååºè¯·æ±çå®¢æ·ç«¯ã</param>
      <param name="requestUri">è¯·æ±å°åéå°ç URIã</param>
      <param name="value">è¦åå¥å°è¯·æ±çå®ä½æ­£æçå¼ã</param>
      <typeparam name="T">è¦åºååçå¯¹è±¡çç±»åã</typeparam>
    </member>
    <member name="M:System.Net.Http.HttpClientExtensions.PostAsXmlAsync``1(System.Net.Http.HttpClient,System.String,``0,System.Threading.CancellationToken)">
      <summary>ä½¿ç¨åºååä¸º XML çæå®å¼ä»¥å¼æ­¥æä½æ¹å¼åé POST è¯·æ±ãåå«ç¨äºåæ¶è¯·æ±çåæ¶æ è®°ã</summary>
      <returns>ä¸ä¸ªè¡¨ç¤ºå¼æ­¥æä½çä»»å¡å¯¹è±¡ã</returns>
      <param name="client">ç¨äºååºè¯·æ±çå®¢æ·ç«¯ã</param>
      <param name="requestUri">è¯·æ±å°åéå°ç URIã</param>
      <param name="value">è¦åå¥å°è¯·æ±çå®ä½æ­£æçå¼ã</param>
      <param name="cancellationToken">ä¸ä¸ªåæ¶æ è®°ï¼å¯ä¾å¶ä»å¯¹è±¡æçº¿ç¨ç¨æ¥æ¥æ¶åæ¶éç¥ã</param>
      <typeparam name="T">è¦åºååçå¯¹è±¡çç±»åã</typeparam>
    </member>
    <member name="M:System.Net.Http.HttpClientExtensions.PostAsync``1(System.Net.Http.HttpClient,System.String,``0,System.Net.Http.Formatting.MediaTypeFormatter)">
      <summary>ä½¿ç¨éè¿ç»å®æ ¼å¼åç¨åºåºååçæå®å¼ï¼ä»¥å¼æ­¥æä½æ¹å¼åé POST è¯·æ±ã</summary>
      <returns>ä¸ä¸ªè¡¨ç¤ºå¼æ­¥æä½çä»»å¡å¯¹è±¡ã</returns>
      <param name="client">ç¨äºååºè¯·æ±çå®¢æ·ç«¯ã</param>
      <param name="requestUri">è¯·æ±å°åéå°ç URIã</param>
      <param name="value">è¦åå¥å°è¯·æ±çå®ä½æ­£æçå¼ã</param>
      <param name="formatter">ç¨äºåºååå¼çæ ¼å¼åç¨åºã</param>
      <typeparam name="T">è¦åºååçå¯¹è±¡çç±»åã</typeparam>
    </member>
    <member name="M:System.Net.Http.HttpClientExtensions.PostAsync``1(System.Net.Http.HttpClient,System.String,``0,System.Net.Http.Formatting.MediaTypeFormatter,System.Net.Http.Headers.MediaTypeHeaderValue,System.Threading.CancellationToken)">
      <summary>ä½¿ç¨éè¿ç»å®æ ¼å¼åç¨åºååªä½ç±»ååºååçæå®å¼ï¼ä»¥å¼æ­¥æä½æ¹å¼åé POST è¯·æ±ã</summary>
      <returns>ä¸ä¸ªè¡¨ç¤ºå¼æ­¥æä½çä»»å¡å¯¹è±¡ã</returns>
      <param name="client">ç¨äºååºè¯·æ±çå®¢æ·ç«¯ã</param>
      <param name="requestUri">è¯·æ±å°åéå°ç URIã</param>
      <param name="value">è¦åå¥å°è¯·æ±çå®ä½æ­£æçå¼ã</param>
      <param name="formatter">ç¨äºåºååå¼çæ ¼å¼åç¨åºã</param>
      <param name="mediaType">Content-Type æ å¤´çææå¼ãå¯ä»¥ä¸º nullï¼å¨è¿ç§æåµä¸å°ä½¿ç¨æ ¼å¼åç¨åºçé»è®¤åå®¹ç±»åã</param>
      <param name="cancellationToken">ä¸ä¸ªåæ¶æ è®°ï¼å¯ä¾å¶ä»å¯¹è±¡æçº¿ç¨ç¨æ¥æ¥æ¶åæ¶éç¥ã</param>
      <typeparam name="T">è¦åºååçå¯¹è±¡çç±»åã</typeparam>
    </member>
    <member name="M:System.Net.Http.HttpClientExtensions.PostAsync``1(System.Net.Http.HttpClient,System.String,``0,System.Net.Http.Formatting.MediaTypeFormatter,System.String)">
      <summary>ä½¿ç¨éè¿ç»å®æ ¼å¼åç¨åºååªä½ç±»åå­ç¬¦ä¸²åºååçæå®å¼ï¼ä»¥å¼æ­¥æä½æ¹å¼åé POST è¯·æ±ã</summary>
      <returns>ä¸ä¸ªè¡¨ç¤ºå¼æ­¥æä½çä»»å¡å¯¹è±¡ã</returns>
      <param name="client">ç¨äºååºè¯·æ±çå®¢æ·ç«¯ã</param>
      <param name="requestUri">è¯·æ±å°åéå°ç URIã</param>
      <param name="value">è¦åå¥å°è¯·æ±çå®ä½æ­£æçå¼ã</param>
      <param name="formatter">ç¨äºåºååå¼çæ ¼å¼åç¨åºã</param>
      <param name="mediaType">Content-Type æ å¤´çææå¼ãå¯ä»¥ä¸º nullï¼å¨è¿ç§æåµä¸å°ä½¿ç¨æ ¼å¼åç¨åºçé»è®¤åå®¹ç±»åã</param>
      <typeparam name="T">è¦åºååçå¯¹è±¡çç±»åã</typeparam>
    </member>
    <member name="M:System.Net.Http.HttpClientExtensions.PostAsync``1(System.Net.Http.HttpClient,System.String,``0,System.Net.Http.Formatting.MediaTypeFormatter,System.String,System.Threading.CancellationToken)">
      <summary>ä½¿ç¨éè¿ç»å®æ ¼å¼åç¨åºååªä½ç±»åå­ç¬¦ä¸²åºååçæå®å¼ï¼ä»¥å¼æ­¥æä½æ¹å¼åé POST è¯·æ±ãåå«ç¨äºåæ¶è¯·æ±çåæ¶æ è®°ã</summary>
      <returns>ä¸ä¸ªè¡¨ç¤ºå¼æ­¥æä½çä»»å¡å¯¹è±¡ã</returns>
      <param name="client">ç¨äºååºè¯·æ±çå®¢æ·ç«¯ã</param>
      <param name="requestUri">è¯·æ±å°åéå°ç URIã</param>
      <param name="value">è¦åå¥å°è¯·æ±çå®ä½æ­£æçå¼ã</param>
      <param name="formatter">ç¨äºåºååå¼çæ ¼å¼åç¨åºã</param>
      <param name="mediaType">Content-Type æ å¤´çææå¼ãå¯ä»¥ä¸º nullï¼å¨è¿ç§æåµä¸å°ä½¿ç¨æ ¼å¼åç¨åºçé»è®¤åå®¹ç±»åã</param>
      <param name="cancellationToken">ä¸ä¸ªåæ¶æ è®°ï¼å¯ä¾å¶ä»å¯¹è±¡æçº¿ç¨ç¨æ¥æ¥æ¶åæ¶éç¥ã</param>
      <typeparam name="T">è¦åºååçå¯¹è±¡çç±»åã</typeparam>
    </member>
    <member name="M:System.Net.Http.HttpClientExtensions.PostAsync``1(System.Net.Http.HttpClient,System.String,``0,System.Net.Http.Formatting.MediaTypeFormatter,System.Threading.CancellationToken)">
      <summary>ä½¿ç¨éè¿ç»å®æ ¼å¼åç¨åºåºååçæå®å¼ï¼ä»¥å¼æ­¥æä½æ¹å¼åé POST è¯·æ±ãåå«ç¨äºåæ¶è¯·æ±çåæ¶æ è®°ã</summary>
      <returns>ä¸ä¸ªè¡¨ç¤ºå¼æ­¥æä½çä»»å¡å¯¹è±¡ã</returns>
      <param name="client">ç¨äºååºè¯·æ±çå®¢æ·ç«¯ã</param>
      <param name="requestUri">è¯·æ±å°åéå°ç URIã</param>
      <param name="value">è¦åå¥å°è¯·æ±çå®ä½æ­£æçå¼ã</param>
      <param name="formatter">ç¨äºåºååå¼çæ ¼å¼åç¨åºã</param>
      <param name="cancellationToken">ä¸ä¸ªåæ¶æ è®°ï¼å¯ä¾å¶ä»å¯¹è±¡æçº¿ç¨ç¨æ¥æ¥æ¶åæ¶éç¥ã</param>
      <typeparam name="T">è¦åºååçå¯¹è±¡çç±»åã</typeparam>
    </member>
    <member name="M:System.Net.Http.HttpClientExtensions.PutAsJsonAsync``1(System.Net.Http.HttpClient,System.String,``0)">
      <summary>ä½¿ç¨åºååä¸º JSON çæå®å¼ä»¥å¼æ­¥æä½æ¹å¼åé PUT è¯·æ±ã</summary>
      <returns>ä¸ä¸ªè¡¨ç¤ºå¼æ­¥æä½çä»»å¡å¯¹è±¡ã</returns>
      <param name="client">ç¨äºååºè¯·æ±çå®¢æ·ç«¯ã</param>
      <param name="requestUri">è¯·æ±å°åéå°ç URIã</param>
      <param name="value">è¦åå¥å°è¯·æ±çå®ä½æ­£æçå¼ã</param>
      <typeparam name="T">è¦åºååçå¯¹è±¡çç±»åã</typeparam>
    </member>
    <member name="M:System.Net.Http.HttpClientExtensions.PutAsJsonAsync``1(System.Net.Http.HttpClient,System.String,``0,System.Threading.CancellationToken)">
      <summary>ä½¿ç¨åºååä¸º JSON çæå®å¼ä»¥å¼æ­¥æä½æ¹å¼åé PUT è¯·æ±ãåå«ç¨äºåæ¶è¯·æ±çåæ¶æ è®°ã</summary>
      <returns>ä¸ä¸ªè¡¨ç¤ºå¼æ­¥æä½çä»»å¡å¯¹è±¡ã</returns>
      <param name="client">ç¨äºååºè¯·æ±çå®¢æ·ç«¯ã</param>
      <param name="requestUri">è¯·æ±å°åéå°ç URIã</param>
      <param name="value">è¦åå¥å°è¯·æ±çå®ä½æ­£æçå¼ã</param>
      <param name="cancellationToken">ä¸ä¸ªåæ¶æ è®°ï¼å¯ä¾å¶ä»å¯¹è±¡æçº¿ç¨ç¨æ¥æ¥æ¶åæ¶éç¥ã</param>
      <typeparam name="T">è¦åºååçå¯¹è±¡çç±»åã</typeparam>
    </member>
    <member name="M:System.Net.Http.HttpClientExtensions.PutAsXmlAsync``1(System.Net.Http.HttpClient,System.String,``0)">
      <summary>ä½¿ç¨åºååä¸º XML çæå®å¼ä»¥å¼æ­¥æä½æ¹å¼åé PUT è¯·æ±ã</summary>
      <returns>ä¸ä¸ªè¡¨ç¤ºå¼æ­¥æä½çä»»å¡å¯¹è±¡ã</returns>
      <param name="client">ç¨äºååºè¯·æ±çå®¢æ·ç«¯ã</param>
      <param name="requestUri">è¯·æ±å°åéå°ç URIã</param>
      <param name="value">è¦åå¥å°è¯·æ±çå®ä½æ­£æçå¼ã</param>
      <typeparam name="T">è¦åºååçå¯¹è±¡çç±»åã</typeparam>
    </member>
    <member name="M:System.Net.Http.HttpClientExtensions.PutAsXmlAsync``1(System.Net.Http.HttpClient,System.String,``0,System.Threading.CancellationToken)">
      <summary>ä½¿ç¨åºååä¸º XML çæå®å¼ä»¥å¼æ­¥æä½æ¹å¼åé PUT è¯·æ±ãåå«ç¨äºåæ¶è¯·æ±çåæ¶æ è®°ã</summary>
      <returns>ä¸ä¸ªè¡¨ç¤ºå¼æ­¥æä½çä»»å¡å¯¹è±¡ã</returns>
      <param name="client">ç¨äºååºè¯·æ±çå®¢æ·ç«¯ã</param>
      <param name="requestUri">è¯·æ±å°åéå°ç URIã</param>
      <param name="value">è¦åå¥å°è¯·æ±çå®ä½æ­£æçå¼ã</param>
      <param name="cancellationToken">ä¸ä¸ªåæ¶æ è®°ï¼å¯ä¾å¶ä»å¯¹è±¡æçº¿ç¨ç¨æ¥æ¥æ¶åæ¶éç¥ã</param>
      <typeparam name="T">è¦åºååçå¯¹è±¡çç±»åã</typeparam>
    </member>
    <member name="M:System.Net.Http.HttpClientExtensions.PutAsync``1(System.Net.Http.HttpClient,System.String,``0,System.Net.Http.Formatting.MediaTypeFormatter)">
      <summary>ä½¿ç¨éè¿ç»å®æ ¼å¼åç¨åºåºååçæå®å¼ï¼ä»¥å¼æ­¥æä½æ¹å¼åé PUT è¯·æ±ã</summary>
      <returns>ä¸ä¸ªè¡¨ç¤ºå¼æ­¥æä½çä»»å¡å¯¹è±¡ã</returns>
      <param name="client">ç¨äºååºè¯·æ±çå®¢æ·ç«¯ã</param>
      <param name="requestUri">è¯·æ±å°åéå°ç URIã</param>
      <param name="value">è¦åå¥å°è¯·æ±çå®ä½æ­£æçå¼ã</param>
      <param name="formatter">ç¨äºåºååå¼çæ ¼å¼åç¨åºã</param>
      <typeparam name="T">è¦åºååçå¯¹è±¡çç±»åã</typeparam>
    </member>
    <member name="M:System.Net.Http.HttpClientExtensions.PutAsync``1(System.Net.Http.HttpClient,System.String,``0,System.Net.Http.Formatting.MediaTypeFormatter,System.Net.Http.Headers.MediaTypeHeaderValue,System.Threading.CancellationToken)">
      <summary> ä½¿ç¨éè¿ç»å®æ ¼å¼åç¨åºååªä½ç±»ååºååçæå®å¼ï¼ä»¥å¼æ­¥æä½æ¹å¼åé PUT è¯·æ±ãåå«ç¨äºåæ¶è¯·æ±çåæ¶æ è®°ã</summary>
      <returns>ä¸ä¸ªè¡¨ç¤ºå¼æ­¥æä½çä»»å¡å¯¹è±¡ã</returns>
      <param name="client">ç¨äºååºè¯·æ±çå®¢æ·ç«¯ã</param>
      <param name="requestUri">è¯·æ±å°åéå°ç URIã</param>
      <param name="value">è¦åå¥å°è¯·æ±çå®ä½æ­£æçå¼ã</param>
      <param name="formatter">ç¨äºåºååå¼çæ ¼å¼åç¨åºã</param>
      <param name="mediaType">Content-Type æ å¤´çææå¼ãå¯ä»¥ä¸º nullï¼å¨è¿ç§æåµä¸å°ä½¿ç¨æ ¼å¼åç¨åºçé»è®¤åå®¹ç±»åã</param>
      <param name="cancellationToken">ä¸ä¸ªåæ¶æ è®°ï¼å¯ä¾å¶ä»å¯¹è±¡æçº¿ç¨ç¨æ¥æ¥æ¶åæ¶éç¥ã</param>
      <typeparam name="T">è¦åºååçå¯¹è±¡çç±»åã</typeparam>
    </member>
    <member name="M:System.Net.Http.HttpClientExtensions.PutAsync``1(System.Net.Http.HttpClient,System.String,``0,System.Net.Http.Formatting.MediaTypeFormatter,System.String)">
      <summary>ä½¿ç¨éè¿ç»å®æ ¼å¼åç¨åºååªä½ç±»åå­ç¬¦ä¸²åºååçæå®å¼ï¼ä»¥å¼æ­¥æä½æ¹å¼åé PUT è¯·æ±ã</summary>
      <returns>ä¸ä¸ªè¡¨ç¤ºå¼æ­¥æä½çä»»å¡å¯¹è±¡ã</returns>
      <param name="client">ç¨äºååºè¯·æ±çå®¢æ·ç«¯ã</param>
      <param name="requestUri">è¯·æ±å°åéå°ç URIã</param>
      <param name="value">è¦åå¥å°è¯·æ±çå®ä½æ­£æçå¼ã</param>
      <param name="formatter">ç¨äºåºååå¼çæ ¼å¼åç¨åºã</param>
      <param name="mediaType">Content-Type æ å¤´çææå¼ãå¯ä»¥ä¸º nullï¼å¨è¿ç§æåµä¸å°ä½¿ç¨æ ¼å¼åç¨åºçé»è®¤åå®¹ç±»åã</param>
      <typeparam name="T">è¦åºååçå¯¹è±¡çç±»åã</typeparam>
    </member>
    <member name="M:System.Net.Http.HttpClientExtensions.PutAsync``1(System.Net.Http.HttpClient,System.String,``0,System.Net.Http.Formatting.MediaTypeFormatter,System.String,System.Threading.CancellationToken)">
      <summary>ä½¿ç¨éè¿ç»å®æ ¼å¼åç¨åºååªä½ç±»åå­ç¬¦ä¸²åºååçæå®å¼ï¼ä»¥å¼æ­¥æä½æ¹å¼åé PUT è¯·æ±ãåå«ç¨äºåæ¶è¯·æ±çåæ¶æ è®°ã</summary>
      <returns>ä¸ä¸ªè¡¨ç¤ºå¼æ­¥æä½çä»»å¡å¯¹è±¡ã</returns>
      <param name="client">ç¨äºååºè¯·æ±çå®¢æ·ç«¯ã</param>
      <param name="requestUri">è¯·æ±å°åéå°ç URIã</param>
      <param name="value">è¦åå¥å°è¯·æ±çå®ä½æ­£æçå¼ã</param>
      <param name="formatter">ç¨äºåºååå¼çæ ¼å¼åç¨åºã</param>
      <param name="mediaType">Content-Type æ å¤´çææå¼ãå¯ä»¥ä¸º nullï¼å¨è¿ç§æåµä¸å°ä½¿ç¨æ ¼å¼åç¨åºçé»è®¤åå®¹ç±»åã</param>
      <param name="cancellationToken">ä¸ä¸ªåæ¶æ è®°ï¼å¯ä¾å¶ä»å¯¹è±¡æçº¿ç¨ç¨æ¥æ¥æ¶åæ¶éç¥ã</param>
      <typeparam name="T">è¦åºååçå¯¹è±¡çç±»åã</typeparam>
    </member>
    <member name="M:System.Net.Http.HttpClientExtensions.PutAsync``1(System.Net.Http.HttpClient,System.String,``0,System.Net.Http.Formatting.MediaTypeFormatter,System.Threading.CancellationToken)">
      <summary>ä½¿ç¨éè¿ç»å®æ ¼å¼åç¨åºååªä½ç±»åå­ç¬¦ä¸²åºååçæå®å¼ï¼ä»¥å¼æ­¥æä½æ¹å¼åé PUT è¯·æ±ãåå«ç¨äºåæ¶è¯·æ±çåæ¶æ è®°ã</summary>
      <returns>ä¸ä¸ªè¡¨ç¤ºå¼æ­¥æä½çä»»å¡å¯¹è±¡ã</returns>
      <param name="client">ç¨äºååºè¯·æ±çå®¢æ·ç«¯ã</param>
      <param name="requestUri">è¯·æ±å°åéå°ç URIã</param>
      <param name="value">è¦åå¥å°è¯·æ±çå®ä½æ­£æçå¼ã</param>
      <param name="formatter">ç¨äºåºååå¼çæ ¼å¼åç¨åºã</param>
      <param name="cancellationToken">ä¸ä¸ªåæ¶æ è®°ï¼å¯ä¾å¶ä»å¯¹è±¡æçº¿ç¨ç¨æ¥æ¥æ¶åæ¶éç¥ã</param>
      <typeparam name="T">è¦åºååçå¯¹è±¡çç±»åã</typeparam>
    </member>
    <member name="T:System.Net.Http.HttpClientFactory">
      <summary>è¡¨ç¤ºç¨äºåå»º <see cref="T:System.Net.Http.HttpClient" /> çæ°å®ä¾çå·¥åã</summary>
    </member>
    <member name="M:System.Net.Http.HttpClientFactory.Create(System.Net.Http.DelegatingHandler[])">
      <summary>åå»º <see cref="T:System.Net.Http.HttpClient" /> çæ°å®ä¾ã</summary>
      <returns>
        <see cref="T:System.Net.Http.HttpClient" /> çæ°å®ä¾ã</returns>
      <param name="handlers">å° HTTP ååºæ¶æ¯å¤çå§æç»å¶ä»å¤çç¨åºç HTTP å¤çç¨åºçåè¡¨ã</param>
    </member>
    <member name="M:System.Net.Http.HttpClientFactory.Create(System.Net.Http.HttpMessageHandler,System.Net.Http.DelegatingHandler[])">
      <summary>åå»º <see cref="T:System.Net.Http.HttpClient" /> çæ°å®ä¾ã</summary>
      <returns>
        <see cref="T:System.Net.Http.HttpClient" /> çæ°å®ä¾ã</returns>
      <param name="innerHandler">è´è´£å¤ç HTTP ååºæ¶æ¯çåé¨å¤çç¨åºã</param>
      <param name="handlers">å° HTTP ååºæ¶æ¯å¤çå§æç»å¶ä»å¤çç¨åºç HTTP å¤çç¨åºçåè¡¨ã</param>
    </member>
    <member name="M:System.Net.Http.HttpClientFactory.CreatePipeline(System.Net.Http.HttpMessageHandler,System.Collections.Generic.IEnumerable{System.Net.Http.DelegatingHandler})">
      <summary>åå»ºåºéè¿ç®¡éä¼ è¾ç <see cref="T:System.Net.Http.HttpClient" /> çæ°å®ä¾ã</summary>
      <returns>åºéè¿ç®¡éä¼ è¾ç <see cref="T:System.Net.Http.HttpClient" /> çæ°å®ä¾ã</returns>
      <param name="innerHandler">è´è´£å¤ç HTTP ååºæ¶æ¯çåé¨å¤çç¨åºã</param>
      <param name="handlers">å° HTTP ååºæ¶æ¯å¤çå§æç»å¶ä»å¤çç¨åºç HTTP å¤çç¨åºçåè¡¨ã</param>
    </member>
    <member name="T:System.Net.Http.HttpContentExtensions">
      <summary>æå®ç¨äºåè®¸ä» HttpContent å®ä¾è¯»åå¼ºç±»åå¯¹è±¡çæ©å±æ¹æ³ã</summary>
    </member>
    <member name="M:System.Net.Http.HttpContentExtensions.ReadAsAsync``1(System.Net.Http.HttpContent)">
      <summary> è¿åä¸ä¸ªä»»å¡ï¼è¯¥ä»»å¡å°ä» content å®ä¾çææå®ç±»å &lt;typeparamref name="T" /&gt; çå¯¹è±¡ã</summary>
      <returns>ä¸ä¸ªæå®ç±»åçå¯¹è±¡å®ä¾ã</returns>
      <param name="content">è¦ä»ä¸­è¯»åç HttpContent å®ä¾ã</param>
      <typeparam name="T">è¦è¯»åçå¯¹è±¡çç±»åã</typeparam>
    </member>
    <member name="M:System.Net.Http.HttpContentExtensions.ReadAsAsync``1(System.Net.Http.HttpContent,System.Collections.Generic.IEnumerable{System.Net.Http.Formatting.MediaTypeFormatter})">
      <summary> è¿åä¸ä¸ªä»»å¡ï¼è¯¥ä»»å¡å°ä» content å®ä¾çææå®ç±»å &lt;typeparamref name="T" /&gt; çå¯¹è±¡ã</summary>
      <returns>ä¸ä¸ªæå®ç±»åçå¯¹è±¡å®ä¾ã</returns>
      <param name="content">è¦ä»ä¸­è¯»åç HttpContent å®ä¾ã</param>
      <param name="formatters">è¦ä½¿ç¨ç MediaTyepFormatter å®ä¾çéåã</param>
      <typeparam name="T">è¦è¯»åçå¯¹è±¡çç±»åã</typeparam>
    </member>
    <member name="M:System.Net.Http.HttpContentExtensions.ReadAsAsync``1(System.Net.Http.HttpContent,System.Collections.Generic.IEnumerable{System.Net.Http.Formatting.MediaTypeFormatter},System.Net.Http.Formatting.IFormatterLogger)">
      <summary> è¿åä¸ä¸ªä»»å¡ï¼è¯¥ä»»å¡å°ä» content å®ä¾çææå®ç±»å &lt;typeparamref name="T" /&gt; çå¯¹è±¡ã</summary>
      <returns>ä¸ä¸ªæå®ç±»åçå¯¹è±¡å®ä¾ã</returns>
      <param name="content">è¦ä»ä¸­è¯»åç HttpContent å®ä¾ã</param>
      <param name="formatters">è¦ä½¿ç¨ç MediaTypeFormatter å®ä¾çéåã</param>
      <param name="formatterLogger">è¦å°äºä»¶è®°å½å°ç IFormatterLoggerã</param>
      <typeparam name="T">è¦è¯»åçå¯¹è±¡çç±»åã</typeparam>
    </member>
    <member name="M:System.Net.Http.HttpContentExtensions.ReadAsAsync(System.Net.Http.HttpContent,System.Type)">
      <summary> è¿åä¸ä¸ªä»»å¡ï¼è¯¥ä»»å¡å°ä» content å®ä¾çææå® type çå¯¹è±¡ã</summary>
      <returns>ä¸ä¸ªä»»å¡ï¼å°çææå®ç±»åçå¯¹è±¡å®ä¾ã</returns>
      <param name="content">è¦ä»ä¸­è¯»åç HttpContent å®ä¾ã</param>
      <param name="type">è¦è¯»åçå¯¹è±¡çç±»åã</param>
    </member>
    <member name="M:System.Net.Http.HttpContentExtensions.ReadAsAsync(System.Net.Http.HttpContent,System.Type,System.Collections.Generic.IEnumerable{System.Net.Http.Formatting.MediaTypeFormatter})">
      <summary> è¿åä¸ä¸ªä»»å¡ï¼è¯¥ä»»å¡å°ä½¿ç¨ææä¾çç¨äºååºåååå®¹ç formatters ä¹ä¸ä» content å®ä¾çææå® type çå¯¹è±¡ã</summary>
      <returns>ä¸ä¸ªæå®ç±»åçå¯¹è±¡å®ä¾ã</returns>
      <param name="content">è¦ä»ä¸­è¯»åç HttpContent å®ä¾ã</param>
      <param name="type">è¦è¯»åçå¯¹è±¡çç±»åã</param>
      <param name="formatters">è¦ä½¿ç¨ç MediaTypeFormatter å®ä¾çéåã</param>
    </member>
    <member name="M:System.Net.Http.HttpContentExtensions.ReadAsAsync(System.Net.Http.HttpContent,System.Type,System.Collections.Generic.IEnumerable{System.Net.Http.Formatting.MediaTypeFormatter},System.Net.Http.Formatting.IFormatterLogger)">
      <summary> è¿åä¸ä¸ªä»»å¡ï¼è¯¥ä»»å¡å°ä½¿ç¨ææä¾çç¨äºååºåååå®¹ç formatters ä¹ä¸ä» content å®ä¾çææå® type çå¯¹è±¡ã</summary>
      <returns>ä¸ä¸ªæå®ç±»åçå¯¹è±¡å®ä¾ã</returns>
      <param name="content">è¦ä»ä¸­è¯»åç HttpContent å®ä¾ã</param>
      <param name="type">è¦è¯»åçå¯¹è±¡çç±»åã</param>
      <param name="formatters">è¦ä½¿ç¨ç MediaTypeFormatter å®ä¾çéåã</param>
      <param name="formatterLogger">è¦å°äºä»¶è®°å½å°ç IFormatterLoggerã</param>
    </member>
    <member name="T:System.Net.Http.HttpContentFormDataExtensions">
      <summary>ç¨äºä» <see cref="T:System.Net.Http.HttpContent" /> å®ä¾è¯»å HTML çªä½ URL ç¼ç æ°æ®çæ©å±æ¹æ³ã</summary>
    </member>
    <member name="M:System.Net.Http.HttpContentFormDataExtensions.IsFormData(System.Net.Http.HttpContent)">
      <summary>ç¡®å®æå®çåå®¹æ¯å¦æ¯ HTML çªä½ URL ç¼ç æ°æ®ã</summary>
      <returns>å¦ææå®çåå®¹æ¯ HTML çªä½ URL ç¼ç æ°æ®ï¼åä¸º trueï¼å¦åä¸º falseã</returns>
      <param name="content">åå®¹ã</param>
    </member>
    <member name="M:System.Net.Http.HttpContentFormDataExtensions.ReadAsFormDataAsync(System.Net.Http.HttpContent)">
      <summary>ä» <see cref="T:System.Net.Http.HttpContent" /> å®ä¾å¼æ­¥è¯»å HTML çªä½ URL ç¼ç æ°æ®ï¼å¹¶å°ç»æå­å¨å¨ <see cref="T:System.Collections.Specialized.NameValueCollection" /> å¯¹è±¡ä¸­ã</summary>
      <returns>ä¸ä¸ªè¡¨ç¤ºå¼æ­¥æä½çä»»å¡å¯¹è±¡ã</returns>
      <param name="content">åå®¹ã</param>
    </member>
    <member name="T:System.Net.Http.HttpContentMessageExtensions">
      <summary>è¡¨ç¤ºç¨äºä» <see cref="T:System.Net.Http.HttpContent" /> å®ä¾è¯»å <see cref="T:System.Net.Http.HttpRequestMessage" /> å <see cref="T:System.Net.Http.HttpResponseMessage" /> å®ä½çæ©å±æ¹æ³ã</summary>
    </member>
    <member name="M:System.Net.Http.HttpContentMessageExtensions.IsHttpRequestMessageContent(System.Net.Http.HttpContent)">
      <summary>ç¡®å®æå®çåå®¹æ¯å¦æ¯ HTTP è¯·æ±æ¶æ¯åå®¹ã</summary>
      <returns>å¦ææå®çåå®¹æ¯ HTTP æ¶æ¯åå®¹ï¼åä¸º trueï¼å¦åä¸º falseã</returns>
      <param name="content">è¦æ£æ¥çåå®¹ã</param>
    </member>
    <member name="M:System.Net.Http.HttpContentMessageExtensions.IsHttpResponseMessageContent(System.Net.Http.HttpContent)">
      <summary>ç¡®å®æå®çåå®¹æ¯å¦æ¯ HTTP ååºæ¶æ¯åå®¹ã</summary>
      <returns>å¦ææå®çåå®¹æ¯ HTTP æ¶æ¯åå®¹ï¼åä¸º trueï¼å¦åä¸º falseã</returns>
      <param name="content">è¦æ£æ¥çåå®¹ã</param>
    </member>
    <member name="M:System.Net.Http.HttpContentMessageExtensions.ReadAsHttpRequestMessageAsync(System.Net.Http.HttpContent)">
      <summary> å° <see cref="T:System.Net.Http.HttpContent" /> è¯»åä¸º <see cref="T:System.Net.Http.HttpRequestMessage" />ã</summary>
      <returns>åæç <see cref="T:System.Net.Http.HttpRequestMessage" /> å®ä¾ã</returns>
      <param name="content">è¦è¯»åçåå®¹ã</param>
    </member>
    <member name="M:System.Net.Http.HttpContentMessageExtensions.ReadAsHttpRequestMessageAsync(System.Net.Http.HttpContent,System.String)">
      <summary> å° <see cref="T:System.Net.Http.HttpContent" /> è¯»åä¸º <see cref="T:System.Net.Http.HttpRequestMessage" />ã</summary>
      <returns>åæç <see cref="T:System.Net.Http.HttpRequestMessage" /> å®ä¾ã</returns>
      <param name="content">è¦è¯»åçåå®¹ã</param>
      <param name="uriScheme">è¦å¨è¯·æ± URI ä¸­ä½¿ç¨ç URI æ¹æ¡ã</param>
    </member>
    <member name="M:System.Net.Http.HttpContentMessageExtensions.ReadAsHttpRequestMessageAsync(System.Net.Http.HttpContent,System.String,System.Int32)">
      <summary> å° <see cref="T:System.Net.Http.HttpContent" /> è¯»åä¸º <see cref="T:System.Net.Http.HttpRequestMessage" />ã</summary>
      <returns>åæç <see cref="T:System.Net.Http.HttpRequestMessage" /> å®ä¾ã</returns>
      <param name="content">è¦è¯»åçåå®¹ã</param>
      <param name="uriScheme">è¦å¨è¯·æ± URI ä¸­ä½¿ç¨ç URI æ¹æ¡ã</param>
      <param name="bufferSize">ç¼å²åºçå¤§å°ã</param>
    </member>
    <member name="M:System.Net.Http.HttpContentMessageExtensions.ReadAsHttpRequestMessageAsync(System.Net.Http.HttpContent,System.String,System.Int32,System.Int32)">
      <summary>å° <see cref="T:System.Net.Http.HttpContent" /> è¯»åä¸º <see cref="T:System.Net.Http.HttpRequestMessage" />ã</summary>
      <returns>åæç <see cref="T:System.Net.Http.HttpRequestMessage" /> å®ä¾ã</returns>
      <param name="content">è¦è¯»åçåå®¹ã</param>
      <param name="uriScheme">è¦å¨è¯·æ± URI ä¸­ä½¿ç¨ç URI æ¹æ¡ã</param>
      <param name="bufferSize">ç¼å²åºçå¤§å°ã</param>
      <param name="maxHeaderSize">HTTP æ å¤´çæå¤§é¿åº¦ã</param>
    </member>
    <member name="M:System.Net.Http.HttpContentMessageExtensions.ReadAsHttpResponseMessageAsync(System.Net.Http.HttpContent)">
      <summary> å° <see cref="T:System.Net.Http.HttpContent" /> è¯»åä¸º <see cref="T:System.Net.Http.HttpResponseMessage" />ã</summary>
      <returns>åæç <see cref="T:System.Net.Http.HttpResponseMessage" /> å®ä¾ã</returns>
      <param name="content">è¦è¯»åçåå®¹ã</param>
    </member>
    <member name="M:System.Net.Http.HttpContentMessageExtensions.ReadAsHttpResponseMessageAsync(System.Net.Http.HttpContent,System.Int32)">
      <summary>å° <see cref="T:System.Net.Http.HttpContent" /> è¯»åä¸º <see cref="T:System.Net.Http.HttpResponseMessage" />ã</summary>
      <returns>åæç <see cref="T:System.Net.Http.HttpResponseMessage" /> å®ä¾ã</returns>
      <param name="content">è¦è¯»åçåå®¹ã</param>
      <param name="bufferSize">ç¼å²åºçå¤§å°ã</param>
    </member>
    <member name="M:System.Net.Http.HttpContentMessageExtensions.ReadAsHttpResponseMessageAsync(System.Net.Http.HttpContent,System.Int32,System.Int32)">
      <summary>å° <see cref="T:System.Net.Http.HttpContent" /> è¯»åä¸º <see cref="T:System.Net.Http.HttpResponseMessage" />ã</summary>
      <returns>åæç <see cref="T:System.Net.Http.HttpResponseMessage" /> å®ä¾ã</returns>
      <param name="content">è¦è¯»åçåå®¹ã</param>
      <param name="bufferSize">ç¼å²åºçå¤§å°ã</param>
      <param name="maxHeaderSize">HTTP æ å¤´çæå¤§é¿åº¦ã</param>
    </member>
    <member name="T:System.Net.Http.HttpContentMultipartExtensions">
      <summary>ç¨äºä» <see cref="T:System.Net.Http.HttpContent" /> å®ä¾è¯»å MIME å¤é¨åå®ä½çæ©å±æ¹æ³ã</summary>
    </member>
    <member name="M:System.Net.Http.HttpContentMultipartExtensions.IsMimeMultipartContent(System.Net.Http.HttpContent)">
      <summary>ç¡®å®æå®çåå®¹æ¯å¦æ¯ MIME å¤é¨ååå®¹ã</summary>
      <returns>å¦ææå®çåå®¹æ¯ MIME å¤é¨ååå®¹ï¼åä¸º trueï¼å¦åä¸º falseã</returns>
      <param name="content">åå®¹ã</param>
    </member>
    <member name="M:System.Net.Http.HttpContentMultipartExtensions.IsMimeMultipartContent(System.Net.Http.HttpContent,System.String)">
      <summary>ç¡®å®æå®çåå®¹æ¯å¦æ¯å·ææå®å­ç±»åç MIME å¤é¨ååå®¹ã</summary>
      <returns>å¦ææå®çåå®¹æ¯å·ææå®å­ç±»åç MIME å¤é¨ååå®¹ï¼åä¸º trueï¼å¦åä¸º falseã</returns>
      <param name="content">åå®¹ã</param>
      <param name="subtype">è¦å¹éç MIME å¤é¨åå­ç±»åã</param>
    </member>
    <member name="M:System.Net.Http.HttpContentMultipartExtensions.ReadAsMultipartAsync(System.Net.Http.HttpContent)">
      <summary>è¯»å MIME å¤é¨åæ¶æ¯ä¸­çæææ­£æé¨åï¼å¹¶çæä¸ç» <see cref="T:System.Net.Http.HttpContent" /> å®ä¾ä½ä¸ºç»æã</summary>
      <returns>ä¸ä¸ª &lt;see cref="T:System.Threading.Tasks.Task`1" /&gt;ï¼è¡¨ç¤ºè·å <see cref="T:System.Net.Http.HttpContent" /> å®ä¾éåçä»»å¡ï¼å¶ä¸­ï¼æ¯ä¸ªå®ä¾é½è¡¨ç¤ºä¸ä¸ªæ­£æé¨åã</returns>
      <param name="content">è¦ç¨äºå¯¹è±¡åå®¹çç°æ <see cref="T:System.Net.Http.HttpContent" /> å®ä¾ã</param>
    </member>
    <member name="M:System.Net.Http.HttpContentMultipartExtensions.ReadAsMultipartAsync``1(System.Net.Http.HttpContent,``0)">
      <summary>è¯»å MIME å¤é¨åæ¶æ¯ä¸­çæææ­£æé¨åï¼å¹¶éè¿ä½¿ç¨ streamProvider å®ä¾ç¡®å®æ¯ä¸ªæ­£æé¨ååå®¹çåå¥ä½ç½®ï¼æ¥çæä¸ç» <see cref="T:System.Net.Http.HttpContent" /> å®ä¾ä½ä¸ºç»æã</summary>
      <returns>
        <see cref="T:System.Threading.Tasks.Task`1" />ï¼è¡¨ç¤ºè·å <see cref="T:System.Net.Http.HttpContent" /> å®ä¾éåçä»»å¡ï¼èè¯¥å®ä¾éåä¸­çæ¯ä¸ªå®ä¾åè¡¨ç¤ºæ­£æé¨åã</returns>
      <param name="content">è¦ç¨äºå¯¹è±¡åå®¹çç°æ <see cref="T:System.Net.Http.HttpContent" /> å®ä¾ã</param>
      <param name="streamProvider">ä¸ä¸ªæµæä¾ç¨åºï¼ç¨äºä¸ºåææ­£æé¨åæ¶è¦åå¥æåææ­£æé¨åçä½ç½®æä¾è¾åºæµã</param>
      <typeparam name="T">MIME å¤é¨åçç±»åã</typeparam>
    </member>
    <member name="M:System.Net.Http.HttpContentMultipartExtensions.ReadAsMultipartAsync``1(System.Net.Http.HttpContent,``0,System.Int32)">
      <summary>éè¿ä½¿ç¨ bufferSize ä½ä¸ºè¯»åç¼å²åºå¤§å°æ¥è¯»å MIME å¤é¨åæ¶æ¯ä¸­çæææ­£æé¨åï¼å¹¶éè¿ä½¿ç¨ streamProvider å®ä¾ç¡®å®æ¯ä¸ªæ­£æé¨ååå®¹çåå¥ä½ç½®ï¼æ¥çæä¸ç» <see cref="T:System.Net.Http.HttpContent" /> å®ä¾ä½ä¸ºç»æã</summary>
      <returns>
        <see cref="T:System.Threading.Tasks.Task`1" />ï¼è¡¨ç¤ºè·å <see cref="T:System.Net.Http.HttpContent" /> å®ä¾éåçä»»å¡ï¼èè¯¥å®ä¾éåä¸­çæ¯ä¸ªå®ä¾åè¡¨ç¤ºæ­£æé¨åã</returns>
      <param name="content">è¦ç¨äºå¯¹è±¡åå®¹çç°æ <see cref="T:System.Net.Http.HttpContent" /> å®ä¾ã</param>
      <param name="streamProvider">ä¸ä¸ªæµæä¾ç¨åºï¼ç¨äºä¸ºåææ­£æé¨åæ¶è¦åå¥æåææ­£æé¨åçä½ç½®æä¾è¾åºæµã</param>
      <param name="bufferSize">ç¨äºè¯»ååå®¹çç¼å²åºçå¤§å°ã</param>
      <typeparam name="T">MIME å¤é¨åçç±»åã</typeparam>
    </member>
    <member name="T:System.Net.Http.HttpMessageContent">
      <summary> æ´¾çç <see cref="T:System.Net.Http.HttpContent" /> ç±»ï¼è¯¥ç±»å¯ä»¥å° <see cref="P:System.Net.Http.HttpMessageContent.HttpResponseMessage" /> æ <see cref="P:System.Net.Http.HttpMessageContent.HttpRequestMessage" /> å°è£ä¸ºå·æåªä½ç±»åâapplication/httpâçå®ä½ã</summary>
    </member>
    <member name="M:System.Net.Http.HttpMessageContent.#ctor(System.Net.Http.HttpRequestMessage)">
      <summary> å¯¹å°è£ <see cref="P:System.Net.Http.HttpMessageContent.HttpRequestMessage" /> ç <see cref="T:System.Net.Http.HttpMessageContent" /> ç±»çæ°å®ä¾è¿è¡åå§åã</summary>
      <param name="httpRequest">è¦å°è£ç <see cref="P:System.Net.Http.HttpMessageContent.HttpResponseMessage" /> å®ä¾ã</param>
    </member>
    <member name="M:System.Net.Http.HttpMessageContent.#ctor(System.Net.Http.HttpResponseMessage)">
      <summary> å¯¹å°è£ <see cref="P:System.Net.Http.HttpMessageContent.HttpResponseMessage" /> ç <see cref="T:System.Net.Http.HttpMessageContent" /> ç±»çæ°å®ä¾è¿è¡åå§åã</summary>
      <param name="httpResponse">è¦å°è£ç <see cref="P:System.Net.Http.HttpMessageContent.HttpResponseMessage" /> å®ä¾ã</param>
    </member>
    <member name="M:System.Net.Http.HttpMessageContent.Dispose(System.Boolean)">
      <summary> éæ¾éæç®¡èµæºåæç®¡èµæºï¼åèä¸ºå¯éé¡¹ï¼</summary>
      <param name="disposing">è¥ä¸º trueï¼ååæ¶éæ¾æç®¡èµæºåéæç®¡èµæºï¼è¥ä¸º falseï¼åä»éæ¾éæç®¡èµæºã</param>
    </member>
    <member name="P:System.Net.Http.HttpMessageContent.HttpRequestMessage">
      <summary> è·å HTTP è¯·æ±æ¶æ¯ã</summary>
    </member>
    <member name="P:System.Net.Http.HttpMessageContent.HttpResponseMessage">
      <summary> è·å HTTP ååºæ¶æ¯ã</summary>
    </member>
    <member name="M:System.Net.Http.HttpMessageContent.SerializeToStreamAsync(System.IO.Stream,System.Net.TransportContext)">
      <summary> ä»¥å¼æ­¥æ¹å¼å°å¯¹è±¡çåå®¹åºååä¸ºç»å® streamã</summary>
      <returns>ä¸ä¸ªä»¥å¼æ­¥æ¹å¼åºååå¯¹è±¡åå®¹ç <see cref="T:System.Threading.Tasks.Task" /> å®ä¾ã</returns>
      <param name="stream">è¦åå¥å°ç <see cref="T:System.IO.Stream" />ã</param>
      <param name="context">å³èç <see cref="T:System.Net.TransportContext" />ã</param>
    </member>
    <member name="M:System.Net.Http.HttpMessageContent.TryComputeLength(System.Int64@)">
      <summary> è®¡ç®æµçé¿åº¦ï¼å¦æå¯è½ï¼ã</summary>
      <returns>å¦æå·²è®¡ç®é¿åº¦ï¼åä¸º trueï¼å¦åä¸º falseã</returns>
      <param name="length">æè®¡ç®çæµçé¿åº¦ã</param>
    </member>
    <member name="T:System.Net.Http.HttpRequestHeadersExtensions">
      <summary>ä¸º <see cref="T:System.Net.Http.Headers.HttpRequestHeaders" /> ç±»æä¾æ©å±æ¹æ³ã</summary>
    </member>
    <member name="M:System.Net.Http.HttpRequestHeadersExtensions.GetCookies(System.Net.Http.Headers.HttpRequestHeaders)">
      <summary>è·åè¯·æ±ä¸­å­å¨çä»»ä½ cookie æ å¤´ã</summary>
      <returns>
        <see cref="T:System.Net.Http.Headers.CookieHeaderValue" /> å®ä¾çéåã</returns>
      <param name="headers">è¯·æ±æ å¤´ã</param>
    </member>
    <member name="M:System.Net.Http.HttpRequestHeadersExtensions.GetCookies(System.Net.Http.Headers.HttpRequestHeaders,System.String)">
      <summary>è·åè¯·æ±ä¸­å­å¨çä»»ä½ Cookie æ å¤´ï¼è¿äºæ å¤´ä¸­åå«åç§°ä¸æå®å¼å¹éç Cookie ç¶æã</summary>
      <returns>
        <see cref="T:System.Net.Http.Headers.CookieHeaderValue" /> å®ä¾çéåã</returns>
      <param name="headers">è¯·æ±æ å¤´ã</param>
      <param name="name">è¦å¹éç Cookie ç¶æåç§°ã</param>
    </member>
    <member name="M:System.Net.Http.HttpRequestMessageExtensions.CreateResponse(System.Net.Http.HttpRequestMessage)"></member>
    <member name="M:System.Net.Http.HttpRequestMessageExtensions.CreateResponse(System.Net.Http.HttpRequestMessage,System.Net.HttpStatusCode)"></member>
    <member name="T:System.Net.Http.HttpResponseHeadersExtensions">
      <summary> ä¸º <see cref="T:System.Net.Http.Headers.HttpResponseHeaders" /> ç±»æä¾æ©å±æ¹æ³ã</summary>
    </member>
    <member name="M:System.Net.Http.HttpResponseHeadersExtensions.AddCookies(System.Net.Http.Headers.HttpResponseHeaders,System.Collections.Generic.IEnumerable{System.Net.Http.Headers.CookieHeaderValue})">
      <summary> å° cookies æ·»å å°ååºãæ¯ä¸ª Set-Cookie æ å¤´åè¡¨ç¤ºä¸ºä¸ä¸ª <see cref="T:System.Net.Http.Headers.CookieHeaderValue" /> å®ä¾ã<see cref="T:System.Net.Http.Headers.CookieHeaderValue" /> åå«æå³åãè·¯å¾çä¿¡æ¯åå¶ä» cookie ä¿¡æ¯ï¼ä»¥åä¸ä¸ªæå¤ä¸ª <see cref="T:System.Net.Http.Headers.CookieState" /> å®ä¾ãæ¯ä¸ª <see cref="T:System.Net.Http.Headers.CookieState" /> å®ä¾åå«ä¸ä¸ª cookie åç§°åä¸è¯¥åç§°å³èç cookie ç¶æãç¶æéç¨äºå°ä¼å¨çº¿ç¼ç ä¸º HTML çªä½ URL ç¼ç çæ°æ®ç <see cref="T:System.Collections.Specialized.NameValueCollection" /> æ ¼å¼ãè¿ç§è¡¨ç¤ºå½¢å¼ä½¿åä¸ Cookie æ å¤´ä¸­å¯ä»¥å¸¦æå¤ä¸ªç¸å³âCookieâï¼åæ¶ä»å¯å¯¹æ¯ä¸ª Cookie ç¶æè¿è¡åéãä¸é¢æ¾ç¤ºäºä¸ä¸ªç¤ºä¾ Cookie æ å¤´ãå¨æ­¤ç¤ºä¾ä¸­ï¼æä¸¤ä¸ª <see cref="T:System.Net.Http.Headers.CookieState" />ï¼å¶åç§°åå«ä¸º state1 å state2ãæ­¤å¤ï¼æ¯ä¸ª cookie ç¶æåå«ä¸¤ä¸ªåç§°/å¼å¯¹ï¼name1/value1 å name2/value2ï¼åï¼name3/value3 å name4/value4ï¼ã&lt;code&gt; Set-Cookie:state1:name1=value1&amp;amp;name2=value2; state2:name3=value3&amp;amp;name4=value4; domain=domain1; path=path1; &lt;/code&gt;</summary>
      <param name="headers">ååºæ å¤´</param>
      <param name="cookies">è¦æ·»å å°ååºä¸­ç cookie å¼ã</param>
    </member>
    <member name="T:System.Net.Http.MultipartFileData">
      <summary>è¡¨ç¤ºå¤é¨åæä»¶æ°æ®ã</summary>
    </member>
    <member name="M:System.Net.Http.MultipartFileData.#ctor(System.Net.Http.Headers.HttpContentHeaders,System.String)">
      <summary>åå§å <see cref="T:System.Net.Http.MultipartFileData" /> ç±»çæ°å®ä¾ã</summary>
      <param name="headers">å¤é¨åæä»¶æ°æ®çæ å¤´ã</param>
      <param name="localFileName">å¤é¨åæä»¶æ°æ®çæ¬å°æä»¶çåç§°ã</param>
    </member>
    <member name="P:System.Net.Http.MultipartFileData.Headers">
      <summary>è·åæè®¾ç½®å¤é¨åæä»¶æ°æ®çæ å¤´ã</summary>
      <returns>å¤é¨åæä»¶æ°æ®çæ å¤´ã</returns>
    </member>
    <member name="P:System.Net.Http.MultipartFileData.LocalFileName">
      <summary>è·åæè®¾ç½®å¤é¨åæä»¶æ°æ®çæ¬å°æä»¶çåç§°ã</summary>
      <returns>å¤é¨åæä»¶æ°æ®çæ¬å°æä»¶çåç§°ã</returns>
    </member>
    <member name="T:System.Net.Http.MultipartFileStreamProvider">
      <summary>è¡¨ç¤ºä¸ä¸ª <see cref="T:System.Net.Http.IMultipartStreamProvider" />ï¼è¯¥æ¥å£éç¨äºä½¿ç¨ <see cref="T:System.IO.FileStream" /> å° MIME å¤é¨åæ¶æ¯çæ¯ä¸ª MIME æ­£æé¨ååå¥æä»¶ä¸­ã</summary>
    </member>
    <member name="M:System.Net.Http.MultipartFileStreamProvider.#ctor(System.String)">
      <summary>åå§å <see cref="T:System.Net.Http.MultipartFileStreamProvider" /> ç±»çæ°å®ä¾ã</summary>
      <param name="rootPath">MIME å¤é¨åæ­£æé¨åçåå®¹åå¥å°çæ ¹è·¯å¾ã</param>
    </member>
    <member name="M:System.Net.Http.MultipartFileStreamProvider.#ctor(System.String,System.Int32)">
      <summary>åå§å <see cref="T:System.Net.Http.MultipartFileStreamProvider" /> ç±»çæ°å®ä¾ã</summary>
      <param name="rootPath">MIME å¤é¨åæ­£æé¨åçåå®¹åå¥å°çæ ¹è·¯å¾ã</param>
      <param name="bufferSize">ä¸ºåå¥å°æä»¶èç¼å²çå­èæ°ã</param>
    </member>
    <member name="P:System.Net.Http.MultipartFileStreamProvider.BufferSize">
      <summary>è·åæè®¾ç½®ä¸ºåå¥å°æä»¶èç¼å²çå­èæ°ã</summary>
      <returns>ä¸ºåå¥å°æä»¶èç¼å²çå­èæ°ã</returns>
    </member>
    <member name="P:System.Net.Http.MultipartFileStreamProvider.FileData">
      <summary>è·åæè®¾ç½®å¤é¨åæä»¶æ°æ®ã</summary>
      <returns>å¤é¨åæä»¶æ°æ®ã</returns>
    </member>
    <member name="M:System.Net.Http.MultipartFileStreamProvider.GetLocalFileName(System.Net.Http.Headers.HttpContentHeaders)">
      <summary>è·åæ¬å°æä»¶åï¼è¯¥æä»¶åå°ä¸ç¨äºåå»ºå­å¨å½å MIME æ­£æé¨ååå®¹çç»å¯¹æä»¶åçæ ¹è·¯å¾ç»åå¨ä¸èµ·ã</summary>
      <returns>ä¸åå«è·¯å¾é¨åçç¸å¯¹æä»¶åã</returns>
      <param name="headers">å½å MIME æ­£æé¨åçæ å¤´ã</param>
    </member>
    <member name="M:System.Net.Http.MultipartFileStreamProvider.GetStream(System.Net.Http.HttpContent,System.Net.Http.Headers.HttpContentHeaders)">
      <summary>è·åæ¶æ¯æ­£æé¨ååå¥å°çæµå®ä¾ã</summary>
      <returns>æ¶æ¯æ­£æé¨ååå¥å°ç <see cref="T:System.IO.Stream" /> å®ä¾ã</returns>
      <param name="parent">HTTP åå®¹ã</param>
      <param name="headers">æè¿°æ­£æé¨åçæ å¤´å­æ®µã</param>
    </member>
    <member name="P:System.Net.Http.MultipartFileStreamProvider.RootPath">
      <summary>è·åæè®¾ç½® MIME å¤é¨åæ­£æé¨åçåå®¹åå¥å°çæ ¹è·¯å¾ã</summary>
      <returns>MIME å¤é¨åæ­£æé¨åçåå®¹åå¥å°çæ ¹è·¯å¾ã</returns>
    </member>
    <member name="T:System.Net.Http.MultipartFormDataStreamProvider">
      <summary> ä¸ä¸ª <see cref="T:System.Net.Http.IMultipartStreamProvider" />ï¼éåä¸ HTML æä»¶ä¸è½½ä¸èµ·ä½¿ç¨ï¼ä»¥å°æä»¶åå®¹åå¥ <see cref="T:System.IO.FileStream" />ãæµæä¾ç¨åºå°æ¥ç &lt;b&gt;Content-Disposition&lt;/b&gt; æ å¤´å­æ®µï¼å¹¶æ ¹æ® &lt;b&gt;filename&lt;/b&gt; åæ°æ¯å¦å­å¨æ¥ç¡®å®è¾åº <see cref="T:System.IO.Stream" />ãå¦æ &lt;b&gt;Content-Disposition&lt;/b&gt; æ å¤´å­æ®µä¸­å­å¨ &lt;b&gt;filename&lt;/b&gt; åæ°ï¼åæ­£æé¨åå°åå¥ <see cref="T:System.IO.FileStream" /> ä¸­ï¼å¦åï¼æ­£æé¨åå°åå¥ <see cref="T:System.IO.MemoryStream" /> ä¸­ãè¿å°æ´å ä¾¿äºå¤çä½ä¸ºçªä½æ°æ®åæä»¶åå®¹çç»åç MIME å¤é¨å HTML çªä½æ°æ®ã</summary>
    </member>
    <member name="M:System.Net.Http.MultipartFormDataStreamProvider.#ctor(System.String)">
      <summary> åå§å <see cref="T:System.Net.Http.MultipartFormDataStreamProvider" /> ç±»çæ°å®ä¾ã</summary>
      <param name="rootPath">MIME å¤é¨åæ­£æé¨åçåå®¹åå¥å°çæ ¹è·¯å¾ã</param>
    </member>
    <member name="M:System.Net.Http.MultipartFormDataStreamProvider.#ctor(System.String,System.Int32)">
      <summary> åå§å <see cref="T:System.Net.Http.MultipartFormDataStreamProvider" /> ç±»çæ°å®ä¾ã</summary>
      <param name="rootPath">MIME å¤é¨åæ­£æé¨åçåå®¹åå¥å°çæ ¹è·¯å¾ã</param>
      <param name="bufferSize">ä¸ºåå¥å°æä»¶èç¼å²çå­èæ°ã</param>
    </member>
    <member name="M:System.Net.Http.MultipartFormDataStreamProvider.ExecutePostProcessingAsync">
      <summary>å°éæä»¶åå®¹è¯»åä¸ºçªä½æ°æ®</summary>
      <returns>è¡¨ç¤ºå¼æ­¥æä½çä»»å¡ã</returns>
    </member>
    <member name="P:System.Net.Http.MultipartFormDataStreamProvider.FormData">
      <summary>è·åä½ä¸ºå¤é¨åçªä½æ°æ®çä¸é¨åä¼ éççªä½æ°æ®ç <see cref="T:System.Collections.Specialized.NameValueCollection" />ã</summary>
      <returns>çªä½æ°æ®ç <see cref="T:System.Collections.Specialized.NameValueCollection" />ã</returns>
    </member>
    <member name="M:System.Net.Http.MultipartFormDataStreamProvider.GetStream(System.Net.Http.HttpContent,System.Net.Http.Headers.HttpContentHeaders)">
      <returns>æ¶æ¯æ­£æé¨ååå¥å°ç <see cref="T:System.IO.Stream" /> å®ä¾ã</returns>
      <param name="parent">åå«æ­¤æ­£æé¨åç HTTP åå®¹ã</param>
      <param name="headers">æè¿°æ­£æé¨åçæ å¤´å­æ®µã</param>
    </member>
    <member name="T:System.Net.Http.MultipartMemoryStreamProvider">
      <summary>è¡¨ç¤ºä¸ä¸ªå¤é¨ååå­æµæä¾ç¨åºã</summary>
    </member>
    <member name="M:System.Net.Http.MultipartMemoryStreamProvider.#ctor">
      <summary>åå§å <see cref="T:System.Net.Http.MultipartMemoryStreamProvider" /> ç±»çæ°å®ä¾ã</summary>
    </member>
    <member name="M:System.Net.Http.MultipartMemoryStreamProvider.GetStream(System.Net.Http.HttpContent,System.Net.Http.Headers.HttpContentHeaders)">
      <summary>è¿å <see cref="T:System.Net.Http.MultipartMemoryStreamProvider" /> ç <see cref="T:System.IO.Stream" />ã</summary>
      <returns>
        <see cref="T:System.Net.Http.MultipartMemoryStreamProvider" /> ç <see cref="T:System.IO.Stream" />ã</returns>
      <param name="parent">
        <see cref="T:System.Net.Http.HttpContent" /> å¯¹è±¡ã</param>
      <param name="headers">HTTP åå®¹æ å¤´ã</param>
    </member>
    <member name="T:System.Net.Http.MultipartRelatedStreamProvider">
      <summary>è¡¨ç¤ºä¸å¤é¨åç¸å³çå¤æµçæä¾ç¨åºã</summary>
    </member>
    <member name="M:System.Net.Http.MultipartRelatedStreamProvider.#ctor">
      <summary>åå§å <see cref="T:System.Net.Http.MultipartRelatedStreamProvider" /> ç±»çæ°å®ä¾ã</summary>
    </member>
    <member name="M:System.Net.Http.MultipartRelatedStreamProvider.GetStream(System.Net.Http.HttpContent,System.Net.Http.Headers.HttpContentHeaders)">
      <summary>è·åæä¾ç¨åºçç¸å³æµã</summary>
      <returns>åå®¹æ å¤´ã</returns>
      <param name="parent">ç¶åå®¹ã</param>
      <param name="headers">http åå®¹æ å¤´ã</param>
    </member>
    <member name="P:System.Net.Http.MultipartRelatedStreamProvider.RootContent">
      <summary>è·å <see cref="T:System.Net.Http.MultipartRelatedStreamProvider" /> çæ ¹åå®¹ã</summary>
      <returns>
        <see cref="T:System.Net.Http.MultipartRelatedStreamProvider" /> çæ ¹åå®¹ã</returns>
    </member>
    <member name="T:System.Net.Http.MultipartStreamProvider">
      <summary>è¡¨ç¤ºä¸ä¸ªæµæä¾ç¨åºï¼è¯¥æµæä¾ç¨åºå°æ£æ¥ MIME å¤é¨ååæå¨ä½ä¸º MIME å¤é¨åæ©å±æ¹æ³ï¼è¯·åè§ <see cref="T:System.Net.Http.HttpContentMultipartExtensions" />ï¼çä¸é¨åæä¾çæ å¤´ï¼å¹¶å³å®è¦è¿ååªç§ç±»åçæµä¾æ­£æé¨ååå¥ã</summary>
    </member>
    <member name="M:System.Net.Http.MultipartStreamProvider.#ctor">
      <summary>åå§å <see cref="T:System.Net.Http.MultipartStreamProvider" /> ç±»çæ°å®ä¾ã</summary>
    </member>
    <member name="P:System.Net.Http.MultipartStreamProvider.Contents">
      <summary>è·åæè®¾ç½®æ­¤ <see cref="T:System.Net.Http.MultipartStreamProvider" /> çåå®¹ã</summary>
      <returns>æ­¤ <see cref="T:System.Net.Http.MultipartStreamProvider" /> çåå®¹ã</returns>
    </member>
    <member name="M:System.Net.Http.MultipartStreamProvider.ExecutePostProcessingAsync">
      <summary>æ§è¡æ­¤ <see cref="T:System.Net.Http.MultipartStreamProvider" /> çå¤çåæä½ã</summary>
      <returns>æ­¤æä½çå¼æ­¥ä»»å¡ã</returns>
    </member>
    <member name="M:System.Net.Http.MultipartStreamProvider.GetStream(System.Net.Http.HttpContent,System.Net.Http.Headers.HttpContentHeaders)">
      <summary>è·åè¦å°æ­£æé¨ååå¥å°çæµãåæå® MIME å¤é¨åæ­£æé¨ååå°è°ç¨æ­¤æ¹æ³ã</summary>
      <returns>æ¶æ¯æ­£æé¨ååå¥å°ç <see cref="T:System.IO.Stream" /> å®ä¾ã</returns>
      <param name="parent">HTTP åå®¹ã</param>
      <param name="headers">æè¿°æ­£æé¨åçæ å¤´å­æ®µã</param>
    </member>
    <member name="T:System.Net.Http.ObjectContent">
      <summary> åå«ä¸ä¸ªå¼ï¼ä»¥åè¦å¨åå¥æ­¤åå®¹æ¶ç¨äºåºååè¯¥å¼çå³è <see cref="T:System.Net.Http.Formatting.MediaTypeFormatter" />ã</summary>
    </member>
    <member name="M:System.Net.Http.ObjectContent.#ctor(System.Type,System.Object,System.Net.Http.Formatting.MediaTypeFormatter)">
      <summary>åå§å <see cref="T:System.Net.Http.ObjectContent" /> ç±»çæ°å®ä¾ã</summary>
      <param name="type">æ­¤å®ä¾å°åå«çå¯¹è±¡çç±»åã</param>
      <param name="value">æ­¤å®ä¾å°åå«çå¯¹è±¡çå¼ã</param>
      <param name="formatter">åºååå¼æ¶è¦ä½¿ç¨çæ ¼å¼åç¨åºã</param>
    </member>
    <member name="M:System.Net.Http.ObjectContent.#ctor(System.Type,System.Object,System.Net.Http.Formatting.MediaTypeFormatter,System.Net.Http.Headers.MediaTypeHeaderValue)">
      <summary> åå§å <see cref="T:System.Net.Http.ObjectContent" /> ç±»çæ°å®ä¾ã</summary>
      <param name="type">æ­¤å®ä¾å°åå«çå¯¹è±¡çç±»åã</param>
      <param name="value">æ­¤å®ä¾å°åå«çå¯¹è±¡çå¼ã</param>
      <param name="formatter">åºååå¼æ¶è¦ä½¿ç¨çæ ¼å¼åç¨åºã</param>
      <param name="mediaType">Content-Type æ å¤´çææå¼ãå¯ä»¥ä¸º nullï¼å¨è¿ç§æåµä¸å°ä½¿ç¨æ ¼å¼åç¨åºçé»è®¤åå®¹ç±»åã</param>
    </member>
    <member name="M:System.Net.Http.ObjectContent.#ctor(System.Type,System.Object,System.Net.Http.Formatting.MediaTypeFormatter,System.String)">
      <summary>åå§å <see cref="T:System.Net.Http.ObjectContent" /> ç±»çæ°å®ä¾ã</summary>
      <param name="type">æ­¤å®ä¾å°åå«çå¯¹è±¡çç±»åã</param>
      <param name="value">æ­¤å®ä¾å°åå«çå¯¹è±¡çå¼ã</param>
      <param name="formatter">åºååå¼æ¶è¦ä½¿ç¨çæ ¼å¼åç¨åºã</param>
      <param name="mediaType">Content-Type æ å¤´çææå¼ã</param>
    </member>
    <member name="P:System.Net.Http.ObjectContent.Formatter">
      <summary>è·åä¸æ­¤åå®¹å®ä¾å³èçåªä½ç±»åæ ¼å¼åç¨åºã</summary>
      <returns>
        <see cref="T:System.Net.Http.Formatting.MediaTypeFormatter" />ã</returns>
    </member>
    <member name="P:System.Net.Http.ObjectContent.ObjectType">
      <summary>è·åç±æ­¤ <see cref="T:System.Net.Http.ObjectContent" /> å®ä¾ç®¡ççå¯¹è±¡çç±»åã</summary>
      <returns>å¯¹è±¡ç±»åã</returns>
    </member>
    <member name="M:System.Net.Http.ObjectContent.SerializeToStreamAsync(System.IO.Stream,System.Net.TransportContext)">
      <summary>ä»¥å¼æ­¥æ¹å¼å°å¯¹è±¡çåå®¹åºååä¸ºç»å®æµã</summary>
      <returns>è¡¨ç¤ºå¼æ­¥æä½çä»»å¡å¯¹è±¡ã</returns>
      <param name="stream">è¦åå¥å°çæµã</param>
      <param name="context">å³èç <see cref="T:System.Net.TransportContext" />ã</param>
    </member>
    <member name="M:System.Net.Http.ObjectContent.TryComputeLength(System.Int64@)">
      <summary>è®¡ç®æµçé¿åº¦ï¼å¦æå¯è½ï¼ã</summary>
      <returns>å¦æå·²è®¡ç®é¿åº¦ï¼åä¸º trueï¼å¦åä¸º falseã</returns>
      <param name="length">æ¥æ¶æè®¡ç®çæµçé¿åº¦ã</param>
    </member>
    <member name="P:System.Net.Http.ObjectContent.Value">
      <summary>è·åæè®¾ç½®åå®¹å¼ã</summary>
      <returns>åå®¹å¼ã</returns>
    </member>
    <member name="T:System.Net.Http.ObjectContent`1">
      <summary>
        <see cref="T:System.Net.Http.ObjectContent" /> çæ³åå½¢å¼ã</summary>
      <typeparam name="T">æ­¤ç±»å°åå«çå¯¹è±¡çç±»åã</typeparam>
    </member>
    <member name="M:System.Net.Http.ObjectContent`1.#ctor(`0,System.Net.Http.Formatting.MediaTypeFormatter)">
      <summary>åå§å <see cref="T:System.Net.Http.ObjectContent`1" /> ç±»çæ°å®ä¾ã</summary>
      <param name="value">æ­¤å®ä¾å°åå«çå¯¹è±¡çå¼ã</param>
      <param name="formatter">åºååå¼æ¶è¦ä½¿ç¨çæ ¼å¼åç¨åºã</param>
    </member>
    <member name="M:System.Net.Http.ObjectContent`1.#ctor(`0,System.Net.Http.Formatting.MediaTypeFormatter,System.Net.Http.Headers.MediaTypeHeaderValue)">
      <summary> åå§å &lt;see cref="T:System.Net.Http.ObjectContent`1" /&gt; ç±»çæ°å®ä¾ã</summary>
      <param name="value">æ­¤å®ä¾å°åå«çå¯¹è±¡çå¼ã</param>
      <param name="formatter">åºååå¼æ¶è¦ä½¿ç¨çæ ¼å¼åç¨åºã</param>
      <param name="mediaType">Content-Type æ å¤´çææå¼ãå¯ä»¥ä¸º nullï¼å¨è¿ç§æåµä¸å°ä½¿ç¨æ ¼å¼åç¨åºçé»è®¤åå®¹ç±»åã</param>
    </member>
    <member name="M:System.Net.Http.ObjectContent`1.#ctor(`0,System.Net.Http.Formatting.MediaTypeFormatter,System.String)">
      <summary>åå§å <see cref="T:System.Net.Http.ObjectContent`1" /> ç±»çæ°å®ä¾ã</summary>
      <param name="value">æ­¤å®ä¾å°åå«çå¯¹è±¡çå¼ã</param>
      <param name="formatter">åºååå¼æ¶è¦ä½¿ç¨çæ ¼å¼åç¨åºã</param>
      <param name="mediaType">Content-Type æ å¤´çææå¼ã</param>
    </member>
    <member name="T:System.Net.Http.PushStreamContent">
      <summary>å®ç°äºæ°æ®çäº§èå¸æç´æ¥ä½¿ç¨æµåå¥ï¼ä»¥åæ­¥æ¹å¼æä»¥å¼æ­¥æ¹å¼ï¼çæ¹æ¡ã</summary>
    </member>
    <member name="M:System.Net.Http.PushStreamContent.#ctor(System.Action{System.IO.Stream,System.Net.Http.HttpContent,System.Net.TransportContext})">
      <summary>åå§å <see cref="T:System.Net.Http.PushStreamContent" /> ç±»çæ°å®ä¾ã</summary>
      <param name="onStreamAvailable">å½è¾åºæµå¯ç¨ä¸åè®¸æä½ç´æ¥åå¥æ¶è°ç¨çæä½ã</param>
    </member>
    <member name="M:System.Net.Http.PushStreamContent.#ctor(System.Action{System.IO.Stream,System.Net.Http.HttpContent,System.Net.TransportContext},System.Net.Http.Headers.MediaTypeHeaderValue)">
      <summary>åå§å <see cref="T:System.Net.Http.PushStreamContent" /> ç±»çæ°å®ä¾ã</summary>
      <param name="onStreamAvailable">å½è¾åºæµå¯ç¨ä¸åè®¸æä½ç´æ¥åå¥æ¶è°ç¨çæä½ã</param>
      <param name="mediaType">åªä½ç±»åã</param>
    </member>
    <member name="M:System.Net.Http.PushStreamContent.#ctor(System.Action{System.IO.Stream,System.Net.Http.HttpContent,System.Net.TransportContext},System.String)">
      <summary>åå§å <see cref="T:System.Net.Http.PushStreamContent" /> ç±»çæ°å®ä¾ã</summary>
      <param name="onStreamAvailable">å½è¾åºæµå¯ç¨ä¸åè®¸æä½ç´æ¥åå¥æ¶è°ç¨çæä½ã</param>
      <param name="mediaType">åªä½ç±»åã</param>
    </member>
    <member name="M:System.Net.Http.PushStreamContent.SerializeToStreamAsync(System.IO.Stream,System.Net.TransportContext)">
      <summary>ä»¥å¼æ­¥æ¹å¼å°æ¨éåå®¹åºååä¸ºæµã</summary>
      <returns>åºåååçæ¨éåå®¹ã</returns>
      <param name="stream">å°åºååæ¨éåå®¹çæµã</param>
      <param name="context">ä¸ä¸æã</param>
    </member>
    <member name="M:System.Net.Http.PushStreamContent.TryComputeLength(System.Int64@)">
      <summary>ç¡®å®æµåå®¹æ¯å¦å·æææçé¿åº¦ï¼ä»¥å­èä¸ºåä½ï¼ã</summary>
      <returns>å¦æè¯¥é¿åº¦ä¸ºææé¿åº¦ï¼åä¸º trueï¼å¦åä¸º falseã</returns>
      <param name="length">æµåå®¹çé¿åº¦ï¼ä»¥å­èä¸ºåä½ï¼ã</param>
    </member>
    <member name="T:System.Net.Http.UriExtensions">
      <summary>åå«åè®¸ä» <see cref="T:System.Uri" /> å®ä¾çæ¥è¯¢ç»ä»¶è¯»åå¼ºç±»åå¯¹è±¡çæ©å±æ¹æ³ã</summary>
    </member>
    <member name="M:System.Net.Http.UriExtensions.ParseQueryString(System.Uri)">
      <summary>åææå®ç URI çæ¥è¯¢é¨åã</summary>
      <returns>åå«æ¥è¯¢åæ°ç <see cref="T:System.Collections.Specialized.NameValueCollection" />ã</returns>
      <param name="address">è¦åæç URIã</param>
    </member>
    <member name="M:System.Net.Http.UriExtensions.TryReadQueryAs(System.Uri,System.Type,System.Object@)">
      <summary>å° URI æ¥è¯¢å­ç¬¦ä¸²ä¸­æä¾ç HTML çªä½ URL ç¼ç æ°æ®è¯»åä¸ºæå®ç±»åçå¯¹è±¡ã</summary>
      <returns>å¦æ URI çæ¥è¯¢ç»ä»¶å¯ä»¥è¯»åä¸ºæå®çç±»åï¼åä¸º trueï¼å¦åä¸º falseã</returns>
      <param name="address">è¦è¯»åç URIã</param>
      <param name="type">è¦è¯»åçå¯¹è±¡çç±»åã</param>
      <param name="value">æ­¤æ¹æ³è¿åæ¶ï¼å°åå«ä¸ä¸ªä» URI çæ¥è¯¢ç»ä»¶åå§åçå¯¹è±¡ãå°æ­¤åæ°è§ä¸ºæªåå§åã</param>
    </member>
    <member name="M:System.Net.Http.UriExtensions.TryReadQueryAs``1(System.Uri,``0@)">
      <summary>å° URI æ¥è¯¢å­ç¬¦ä¸²ä¸­æä¾ç HTML çªä½ URL ç¼ç æ°æ®è¯»åä¸ºæå®ç±»åçå¯¹è±¡ã</summary>
      <returns>å¦æ URI çæ¥è¯¢ç»ä»¶å¯ä»¥è¯»åä¸ºæå®çç±»åï¼åä¸º trueï¼å¦åä¸º falseã</returns>
      <param name="address">è¦è¯»åç URIã</param>
      <param name="value">æ­¤æ¹æ³è¿åæ¶ï¼å°åå«ä¸ä¸ªä» URI çæ¥è¯¢ç»ä»¶åå§åçå¯¹è±¡ãå°æ­¤åæ°è§ä¸ºæªåå§åã</param>
      <typeparam name="T">è¦è¯»åçå¯¹è±¡çç±»åã</typeparam>
    </member>
    <member name="M:System.Net.Http.UriExtensions.TryReadQueryAsJson(System.Uri,Newtonsoft.Json.Linq.JObject@)">
      <summary>è¯»å <see cref="T:System.Uri" /> æ¥è¯¢ç»ä»¶ä¸­ä½ä¸º <see cref="T:Newtonsoft.Json.Linq.JObject" /> å¯¹è±¡æä¾ç HTML çªä½ URL ç¼ç æ°æ®ã</summary>
      <returns>  å¦ææ¥è¯¢ç»ä»¶å¯ä»¥è¯»åä¸º <see cref="T:Newtonsoft.Json.Linq.JObject" />ï¼åä¸º trueï¼å¦åä¸º falseã</returns>
      <param name="address">è¦ä»ä¸­è¯»åç <see cref="T:System.Uri" /> å®ä¾ã</param>
      <param name="value">è¦ä½¿ç¨æ­¤å®ä¾æ nullï¼å¦ææ æ³æ§è¡è½¬æ¢ï¼è¿è¡åå§åçå¯¹è±¡ã</param>
    </member>
    <member name="T:System.Net.Http.Formatting.BufferedMediaTypeFormatter">
      <summary>è¡¨ç¤ºåè®¸å¨å¼æ­¥æ ¼å¼åç¨åºåºç¡ç»æä¹ä¸ä½¿ç¨åæ­¥æ ¼å¼åç¨åºçå¸®å©å¨ç±»ã</summary>
    </member>
    <member name="M:System.Net.Http.Formatting.BufferedMediaTypeFormatter.#ctor">
      <summary>åå§å <see cref="T:System.Net.Http.Formatting.BufferedMediaTypeFormatter" /> ç±»çæ°å®ä¾ã</summary>
    </member>
    <member name="P:System.Net.Http.Formatting.BufferedMediaTypeFormatter.BufferSize">
      <summary>è·åæè®¾ç½®ç¨äºæµçå»ºè®®ç¼å²åºå¤§å°ï¼ä»¥å­èä¸ºåä½ï¼ã</summary>
      <returns>ç¨äºæµçå»ºè®®ç¼å²åºå¤§å°ï¼ä»¥å­èä¸ºåä½ï¼ã</returns>
    </member>
    <member name="M:System.Net.Http.Formatting.BufferedMediaTypeFormatter.ReadFromStream(System.Type,System.IO.Stream,System.Net.Http.HttpContent,System.Net.Http.Formatting.IFormatterLogger)">
      <summary>ä»ç¼å²æµåæ­¥è¯»åã</summary>
      <returns>ç»å® <paramref name="type" /> çå¯¹è±¡ã</returns>
      <param name="type">è¦ååºååçå¯¹è±¡çç±»åã</param>
      <param name="readStream">è¦ä»ä¸­è¯»åçæµ</param>
      <param name="content">
        <see cref="T:System.Net.Http.HttpContent" />ï¼å¦æå¯ç¨ï¼ãå¯ä»¥ä¸º nullã</param>
      <param name="formatterLogger">è¦å°äºä»¶è®°å½å°ç <see cref="T:System.Net.Http.Formatting.IFormatterLogger" />ã</param>
    </member>
    <member name="M:System.Net.Http.Formatting.BufferedMediaTypeFormatter.ReadFromStreamAsync(System.Type,System.IO.Stream,System.Net.Http.HttpContent,System.Net.Http.Formatting.IFormatterLogger)">
      <summary>ä»ç¼å²æµå¼æ­¥è¯»åã</summary>
      <returns>ä¸ä¸ªè¡¨ç¤ºå¼æ­¥æä½çä»»å¡å¯¹è±¡ã</returns>
      <param name="type">è¦ååºååçå¯¹è±¡çç±»åã</param>
      <param name="readStream">è¦ä»ä¸­è¯»åçæµã</param>
      <param name="content">
        <see cref="T:System.Net.Http.HttpContent" />ï¼å¦æå¯ç¨ï¼ãå¯ä»¥ä¸º nullã</param>
      <param name="formatterLogger">è¦å°äºä»¶è®°å½å°ç <see cref="T:System.Net.Http.Formatting.IFormatterLogger" />ã</param>
    </member>
    <member name="M:System.Net.Http.Formatting.BufferedMediaTypeFormatter.WriteToStream(System.Type,System.Object,System.IO.Stream,System.Net.Http.HttpContent)">
      <summary>åæ­¥åå¥å°ç¼å²æµã</summary>
      <param name="type">è¦åºååçå¯¹è±¡çç±»åã</param>
      <param name="value">è¦åå¥çå¯¹è±¡å¼ãå¯ä»¥ä¸º nullã</param>
      <param name="writeStream">è¦åå¥å°çæµã</param>
      <param name="content">
        <see cref="T:System.Net.Http.HttpContent" />ï¼å¦æå¯ç¨ï¼ãå¯ä»¥ä¸º nullã</param>
    </member>
    <member name="M:System.Net.Http.Formatting.BufferedMediaTypeFormatter.WriteToStreamAsync(System.Type,System.Object,System.IO.Stream,System.Net.Http.HttpContent,System.Net.TransportContext)">
      <summary>å¼æ­¥åå¥å°ç¼å²æµã</summary>
      <returns>ä¸ä¸ªè¡¨ç¤ºå¼æ­¥æä½çä»»å¡å¯¹è±¡ã</returns>
      <param name="type">è¦åºååçå¯¹è±¡çç±»åã</param>
      <param name="value">è¦åå¥çå¯¹è±¡å¼ãå®å¯ä»¥ä¸º nullã</param>
      <param name="writeStream">è¦åå¥å°çæµã</param>
      <param name="content">
        <see cref="T:System.Net.Http.HttpContent" />ï¼å¦æå¯ç¨ï¼ãå¯ä»¥ä¸º nullã</param>
      <param name="transportContext">ä¼ è¾ä¸ä¸æã</param>
    </member>
    <member name="T:System.Net.Http.Formatting.ContentNegotiationResult">
      <summary> è¡¨ç¤ºä½¿ç¨ &lt;see cref="M:System.Net.Http.Formatting.IContentNegotiator.Negotiate(System.Type,System.Net.Http.HttpRequestMessage,System.Collections.Generic.IEnumerable{System.Net.Http.Formatting.MediaTypeFormatter})" /&gt; æ§è¡çåå®¹ååçç»æ</summary>
    </member>
    <member name="M:System.Net.Http.Formatting.ContentNegotiationResult.#ctor(System.Net.Http.Formatting.MediaTypeFormatter,System.Net.Http.Headers.MediaTypeHeaderValue)">
      <summary> åå»ºåå®¹ååç»æå¯¹è±¡ã</summary>
      <param name="formatter">æ ¼å¼åç¨åºã</param>
      <param name="mediaType">é¦éåªä½ç±»åãå¯ä»¥ä¸º nullã</param>
    </member>
    <member name="P:System.Net.Http.Formatting.ContentNegotiationResult.Formatter">
      <summary> ä¸ºåºååéæ©çæ ¼å¼åç¨åºã</summary>
    </member>
    <member name="P:System.Net.Http.Formatting.ContentNegotiationResult.MediaType">
      <summary> ä¸ä¸ºåºååéæ©çæ ¼å¼åç¨åºå³èçåªä½ç±»åãå¯ä»¥ä¸º nullã </summary>
    </member>
    <member name="T:System.Net.Http.Formatting.DefaultContentNegotiator">
      <summary>
        <see cref="T:System.Net.Http.Formatting.IContentNegotiator" /> çé»è®¤å®ç°ï¼ç¨äºä¸º <see cref="T:System.Net.Http.HttpRequestMessage" /> æ <see cref="T:System.Net.Http.HttpResponseMessage" /> éæ© <see cref="T:System.Net.Http.Formatting.MediaTypeFormatter" />ã</summary>
    </member>
    <member name="M:System.Net.Http.Formatting.DefaultContentNegotiator.#ctor">
      <summary>åå§å <see cref="T:System.Net.Http.Formatting.DefaultContentNegotiator" /> ç±»çæ°å®ä¾ã</summary>
    </member>
    <member name="M:System.Net.Http.Formatting.DefaultContentNegotiator.#ctor(System.Boolean)">
      <summary>åå§å <see cref="T:System.Net.Http.Formatting.DefaultContentNegotiator" /> ç±»çæ°å®ä¾ã</summary>
      <param name="excludeMatchOnTypeOnly">è¥è¦æé¤ä»å¨å¯¹è±¡ç±»åä¸å¹éçæ ¼å¼åç¨åºï¼åä¸º trueï¼å¦åä¸º falseã</param>
    </member>
    <member name="M:System.Net.Http.Formatting.DefaultContentNegotiator.ComputeFormatterMatches(System.Type,System.Net.Http.HttpRequestMessage,System.Collections.Generic.IEnumerable{System.Net.Http.Formatting.MediaTypeFormatter})">
      <summary>ç¡®å®æ¯ä¸ªæ ¼å¼åç¨åºä¸ HTTP è¯·æ±çå·ä½å¹éç¨åº¦ã</summary>
      <returns>è¿åè¡¨ç¤ºææå¹éé¡¹ç <see cref="T:System.Net.Http.Formatting.MediaTypeFormatterMatch" /> å¯¹è±¡çéåã</returns>
      <param name="type">è¦åºååçç±»åã</param>
      <param name="request">è¯·æ±ã</param>
      <param name="formatters">å¯ä¾éæ©ç <see cref="T:System.Net.Http.Formatting.MediaTypeFormatter" /> å¯¹è±¡éã</param>
    </member>
    <member name="P:System.Net.Http.Formatting.DefaultContentNegotiator.ExcludeMatchOnTypeOnly">
      <summary>è¥è¦æé¤ä»å¨å¯¹è±¡ç±»åä¸å¹éçæ ¼å¼åç¨åºï¼åä¸º trueï¼å¦åä¸º falseã</summary>
      <returns>è¿åä¸ä¸ª <see cref="T:System.Boolean" />ã</returns>
    </member>
    <member name="M:System.Net.Http.Formatting.DefaultContentNegotiator.MatchAcceptHeader(System.Collections.Generic.IEnumerable{System.Net.Http.Headers.MediaTypeWithQualityHeaderValue},System.Net.Http.Formatting.MediaTypeFormatter)">
      <summary>å°ä¸ç» Accept æ å¤´å­æ®µä¸æ ¼å¼åç¨åºæ¯æçåªä½ç±»åè¿è¡å¹éã</summary>
      <returns>è¿åæç¤ºå¹éè´¨éç <see cref="T:System.Net.Http.Formatting.MediaTypeFormatterMatch" /> å¯¹è±¡ï¼å¦ææ²¡æå¹éé¡¹ï¼åè¿å nullã</returns>
      <param name="sortedAcceptValues">æ q å å­éåºæåç Accept æ å¤´å¼çåè¡¨ãå¯ä»¥éè¿è°ç¨ <see cref="M:System.Net.Http.Formatting.DefaultContentNegotiator.SortMediaTypeWithQualityHeaderValuesByQFactor(System.Collections.Generic.ICollection{System.Net.Http.Headers.MediaTypeWithQualityHeaderValue})" /> æ¹æ³æ¥åå»ºæ­¤åè¡¨ã</param>
      <param name="formatter">è¦å¹éçæ ¼å¼åç¨åºã</param>
    </member>
    <member name="M:System.Net.Http.Formatting.DefaultContentNegotiator.MatchMediaTypeMapping(System.Net.Http.HttpRequestMessage,System.Net.Http.Formatting.MediaTypeFormatter)">
      <summary>å°è¯·æ±ä¸åªä½ç±»åæ ¼å¼åç¨åºä¸­ç <see cref="T:System.Net.Http.Formatting.MediaTypeMapping" /> å¯¹è±¡è¿è¡å¹éã</summary>
      <returns>è¿åæç¤ºå¹éè´¨éç <see cref="T:System.Net.Http.Formatting.MediaTypeFormatterMatch" /> å¯¹è±¡ï¼å¦ææ²¡æå¹éé¡¹ï¼åè¿å nullã</returns>
      <param name="request">è¯·æ±ã</param>
      <param name="formatter">åªä½ç±»åæ ¼å¼åç¨åºã</param>
    </member>
    <member name="M:System.Net.Http.Formatting.DefaultContentNegotiator.MatchRequestMediaType(System.Net.Http.HttpRequestMessage,System.Net.Http.Formatting.MediaTypeFormatter)">
      <summary>å°è¯·æ±çåå®¹ç±»åä¸æ ¼å¼åç¨åºæ¯æçåªä½ç±»åè¿è¡å¹éã</summary>
      <returns>è¿åæç¤ºå¹éè´¨éç <see cref="T:System.Net.Http.Formatting.MediaTypeFormatterMatch" /> å¯¹è±¡ï¼å¦ææ²¡æå¹éé¡¹ï¼åè¿å nullã</returns>
      <param name="request">è¯·æ±ã</param>
      <param name="formatter">è¦å¹éçæ ¼å¼åç¨åºã</param>
    </member>
    <member name="M:System.Net.Http.Formatting.DefaultContentNegotiator.MatchType(System.Type,System.Net.Http.Formatting.MediaTypeFormatter)">
      <summary>éæ©æ ¼å¼åç¨åºç¬¬ä¸ä¸ªåæ¯æçåªä½ç±»åã</summary>
      <returns>è¿åä¸ä¸ª <see cref="P:System.Net.Http.Formatting.MediaTypeFormatterMatch.Ranking" /> è®¾ç½®ä¸º <see cref="F:System.Net.Http.Formatting.MediaTypeFormatterMatchRanking.MatchOnCanWriteType" /> ç <see cref="T:System.Net.Http.Formatting.MediaTypeFormatterMatch" />ï¼å¦ææ²¡æå¹éé¡¹ï¼åè¿å nullã</returns>
      <param name="type">è¦å¹éçç±»åã</param>
      <param name="formatter">è¦å¹éçæ ¼å¼åç¨åºã</param>
    </member>
    <member name="M:System.Net.Http.Formatting.DefaultContentNegotiator.Negotiate(System.Type,System.Net.Http.HttpRequestMessage,System.Collections.Generic.IEnumerable{System.Net.Http.Formatting.MediaTypeFormatter})">
      <summary> éè¿å¨å·²ä¸ºç»å® <paramref name="request" /> ä¼ å¥ç <paramref name="formatters" /> ä¸­éæ©å¯ä»¥åºååç»å® <paramref name="type" /> çå¯¹è±¡çæéå½ <see cref="T:System.Net.Http.Formatting.MediaTypeFormatter" />ï¼æ¥æ§è¡åå®¹ååã</summary>
      <returns>åå«æéå½ç <see cref="T:System.Net.Http.Formatting.MediaTypeFormatter" /> å®ä¾çååç»ææ nullï¼å¦ææ²¡æéå½çæ ¼å¼åç¨åºï¼ã</returns>
      <param name="type">è¦åºååçç±»åã</param>
      <param name="request">è¯·æ±ã</param>
      <param name="formatters">å¯ä¾éæ©ç <see cref="T:System.Net.Http.Formatting.MediaTypeFormatter" /> å¯¹è±¡éã</param>
    </member>
    <member name="M:System.Net.Http.Formatting.DefaultContentNegotiator.SelectResponseCharacterEncoding(System.Net.Http.HttpRequestMessage,System.Net.Http.Formatting.MediaTypeFormatter)">
      <summary>ç¡®å®ç¨äºåå¥ååºçæä½³å­ç¬¦ç¼ç ã</summary>
      <returns>è¿åæå¹éç <see cref="T:System.Text.Encoding" />ã</returns>
      <param name="request">è¯·æ±ã</param>
      <param name="formatter">æéåªä½æ ¼å¼åç¨åºã</param>
    </member>
    <member name="M:System.Net.Http.Formatting.DefaultContentNegotiator.SelectResponseMediaTypeFormatter(System.Collections.Generic.ICollection{System.Net.Http.Formatting.MediaTypeFormatterMatch})">
      <summary>ä»æ¾å°çåéå¹éé¡¹ä¸­éæ©æå¹éé¡¹ã</summary>
      <returns>è¿åç¨äºè¡¨ç¤ºæå¹éé¡¹ç <see cref="T:System.Net.Http.Formatting.MediaTypeFormatterMatch" /> å¯¹è±¡ã</returns>
      <param name="matches">å¹éé¡¹çéåã</param>
    </member>
    <member name="M:System.Net.Http.Formatting.DefaultContentNegotiator.SortMediaTypeWithQualityHeaderValuesByQFactor(System.Collections.Generic.ICollection{System.Net.Http.Headers.MediaTypeWithQualityHeaderValue})">
      <summary>å° Accept æ å¤´å¼æ q å å­çéåºè¿è¡æåºã</summary>
      <returns>è¿å MediaTypeWithQualityHeaderValue å¯¹è±¡çå·²æåºåè¡¨ã</returns>
      <param name="headerValues">ä¸ä¸ªè¡¨ç¤º Accept æ å¤´å¼ç MediaTypeWithQualityHeaderValue å¯¹è±¡çéåã</param>
    </member>
    <member name="M:System.Net.Http.Formatting.DefaultContentNegotiator.SortStringWithQualityHeaderValuesByQFactor(System.Collections.Generic.ICollection{System.Net.Http.Headers.StringWithQualityHeaderValue})">
      <summary>å° Accept-CharsetãAccept-EncodingãAccept-Language æç¸å³æ å¤´å¼çåè¡¨æ q å å­çéåºè¿è¡æåºã</summary>
      <returns>è¿å StringWithQualityHeaderValue å¯¹è±¡çå·²æåºåè¡¨ã</returns>
      <param name="headerValues">ä¸ä¸ªè¡¨ç¤ºæ å¤´å­æ®µç StringWithQualityHeaderValue å¯¹è±¡çéåã</param>
    </member>
    <member name="M:System.Net.Http.Formatting.DefaultContentNegotiator.UpdateBestMatch(System.Net.Http.Formatting.MediaTypeFormatterMatch,System.Net.Http.Formatting.MediaTypeFormatterMatch)">
      <summary>è¯ä¼°æä¸ªå¹éé¡¹æ¯å¦æ¯å½åå¹éé¡¹æ´å¹éã</summary>
      <returns>è¿åè¾å¹éç <see cref="T:System.Net.Http.Formatting.MediaTypeFormatterMatch" /> å¯¹è±¡ã</returns>
      <param name="current">å½åå¹éé¡¹ã</param>
      <param name="potentialReplacement">è¦éå¯¹å½åå¹éé¡¹è¿è¡è¯ä¼°çå¹éé¡¹ã</param>
    </member>
    <member name="T:System.Net.Http.Formatting.DelegatingEnumerable`1">
      <summary> å¸®å©å¨ç±»ï¼ç¨äºéè¿å·ä½çå®ç°å§æ &lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt; ç±»åæ¥åºååè¿äºç±»åã</summary>
      <typeparam name="T">å®ç°ä¸ºä»£ççæ¥å£ã</typeparam>
    </member>
    <member name="M:System.Net.Http.Formatting.DelegatingEnumerable`1.#ctor">
      <summary> åå§å DelegatingEnumerableãè¦ä½¿ <see cref="T:System.Runtime.Serialization.DataContractSerializer" /> æ­£å¸¸å·¥ä½ï¼æ­¤æé å½æ°æ¯å¿éçã</summary>
    </member>
    <member name="M:System.Net.Http.Formatting.DelegatingEnumerable`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
      <summary> ä½¿ç¨ &lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt; åå§å DelegatingEnumerableãè¿æ¯ç¨äºä¸º <see cref="T:System.Xml.Serialization.XmlSerializer" /> ä»£ç &lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt; æ¥å£çå¸®å©å¨ç±»ã</summary>
      <param name="source">è¦ä»ä¸­è·åæä¸¾å¨ç &lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt; å®ä¾ã</param>
    </member>
    <member name="M:System.Net.Http.Formatting.DelegatingEnumerable`1.Add(System.Object)">
      <summary> æ­¤æ¹æ³æªå®ç°ï¼ä½å´æ¯ä½¿åºååå¯ä»¥æ­£å¸¸å·¥ä½æå¿éçæ¹æ³ãè¯·å¿ä½¿ç¨ã</summary>
      <param name="item">è¦æ·»å çé¡¹ãæªä½¿ç¨ã</param>
    </member>
    <member name="M:System.Net.Http.Formatting.DelegatingEnumerable`1.GetEnumerator">
      <summary> è·åå³èç &lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt; çæä¸¾å¨ã</summary>
      <returns>&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt; æºçæä¸¾å¨ã</returns>
    </member>
    <member name="M:System.Net.Http.Formatting.DelegatingEnumerable`1.System#Collections#IEnumerable#GetEnumerator">
      <summary> è·åå³èç &lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt; çæä¸¾å¨ã</summary>
      <returns>&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt; æºçæä¸¾å¨ã</returns>
    </member>
    <member name="T:System.Net.Http.Formatting.FormDataCollection">
      <summary>è¡¨ç¤ºçªä½æ°æ®çéåã</summary>
    </member>
    <member name="M:System.Net.Http.Formatting.FormDataCollection.#ctor(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.String}})">
      <summary>åå§å <see cref="T:System.Net.Http.Formatting.FormDataCollection" /> ç±»çæ°å®ä¾ã</summary>
      <param name="pairs">å¯¹ã</param>
    </member>
    <member name="M:System.Net.Http.Formatting.FormDataCollection.#ctor(System.String)">
      <summary>åå§å <see cref="T:System.Net.Http.Formatting.FormDataCollection" /> ç±»çæ°å®ä¾ã</summary>
      <param name="query">æ¥è¯¢ã</param>
    </member>
    <member name="M:System.Net.Http.Formatting.FormDataCollection.#ctor(System.Uri)">
      <summary>åå§å <see cref="T:System.Net.Http.Formatting.FormDataCollection" /> ç±»çæ°å®ä¾ã</summary>
      <param name="uri">URI</param>
    </member>
    <member name="M:System.Net.Http.Formatting.FormDataCollection.Get(System.String)">
      <summary>è·åçªä½æ°æ®çéåã</summary>
      <returns>çªä½æ°æ®çéåã</returns>
      <param name="key">é®ã</param>
    </member>
    <member name="M:System.Net.Http.Formatting.FormDataCollection.GetEnumerator">
      <summary>è·åå¾ªç¯è®¿é®éåçå¯æä¸¾å¼ã</summary>
      <returns>å¾ªç¯è®¿é®éåçå¯æä¸¾å¼ã</returns>
    </member>
    <member name="M:System.Net.Http.Formatting.FormDataCollection.GetValues(System.String)">
      <summary>è·åçªä½æ°æ®éåçå¼ã</summary>
      <returns>çªä½æ°æ®éåçå¼ã</returns>
      <param name="key">é®ã</param>
    </member>
    <member name="M:System.Net.Http.Formatting.FormDataCollection.ReadAsNameValueCollection">
      <summary>è¯»ååç§°å¼éåå½¢å¼ççªä½æ°æ®éåã</summary>
      <returns>åç§°å¼éåå½¢å¼ççªä½æ°æ®éåã</returns>
    </member>
    <member name="M:System.Net.Http.Formatting.FormDataCollection.System#Collections#IEnumerable#GetEnumerator">
      <summary>è·åå¾ªç¯è®¿é®éåçå¯æä¸¾å¼ã</summary>
      <returns>å¾ªç¯è®¿é®éåçå¯æä¸¾å¼ã</returns>
    </member>
    <member name="T:System.Net.Http.Formatting.FormUrlEncodedMediaTypeFormatter">
      <summary>
        <see cref="T:System.Net.Http.Formatting.MediaTypeFormatter" /> ç±»ï¼ç¨äºå¤çä»¥ HTML çªä½ URL ç»å°¾çæ°æ®ï¼ä¹ç§°ä¸º application/x-www-form-urlencodedï¼ã</summary>
    </member>
    <member name="M:System.Net.Http.Formatting.FormUrlEncodedMediaTypeFormatter.#ctor">
      <summary>åå§å <see cref="T:System.Net.Http.Formatting.FormUrlEncodedMediaTypeFormatter" /> ç±»çæ°å®ä¾ã</summary>
    </member>
    <member name="M:System.Net.Http.Formatting.FormUrlEncodedMediaTypeFormatter.CanReadType(System.Type)">
      <summary>æ¥è¯¢ <see cref="T:System.Net.Http.Formatting.FormUrlEncodedMediaTypeFormatter" /> æ¯å¦å¯ä»¥ååºååæå®ç±»åçå¯¹è±¡ã</summary>
      <returns>å¦æ <see cref="T:System.Net.Http.Formatting.FormUrlEncodedMediaTypeFormatter" /> å¯ä»¥ååºååè¯¥ç±»åï¼åä¸º trueï¼å¦åä¸º falseã</returns>
      <param name="type">è¦ååºååçç±»åã</param>
    </member>
    <member name="M:System.Net.Http.Formatting.FormUrlEncodedMediaTypeFormatter.CanWriteType(System.Type)">
      <summary>æ¥è¯¢ <see cref="T:System.Net.Http.Formatting.FormUrlEncodedMediaTypeFormatter" /> æ¯å¦å¯ä»¥åºååæå®ç±»åçå¯¹è±¡ã</summary>
      <returns>å¦æ <see cref="T:System.Net.Http.Formatting.FormUrlEncodedMediaTypeFormatter" /> å¯ä»¥åºååè¯¥ç±»åï¼åä¸º trueï¼å¦åä¸º falseã</returns>
      <param name="type">è¦åºååçç±»åã</param>
    </member>
    <member name="P:System.Net.Http.Formatting.FormUrlEncodedMediaTypeFormatter.DefaultMediaType">
      <summary>è·å HTML çªä½ URL ç¼ç æ°æ®çé»è®¤åªä½ç±»åï¼å³ application/x-www-form-urlencodedã</summary>
      <returns>HTML çªä½ URL ç¼ç æ°æ®çé»è®¤åªä½ç±»å</returns>
    </member>
    <member name="P:System.Net.Http.Formatting.FormUrlEncodedMediaTypeFormatter.MaxDepth">
      <summary>è·åæè®¾ç½®æ­¤æ ¼å¼åç¨åºæåè®¸çæå¤§æ·±åº¦ã</summary>
      <returns>æå¤§æ·±åº¦ã</returns>
    </member>
    <member name="P:System.Net.Http.Formatting.FormUrlEncodedMediaTypeFormatter.ReadBufferSize">
      <summary>è·åæè®¾ç½®å¨è¯»åä¼ å¥æµæ¶çç¼å²åºå¤§å°ã</summary>
      <returns>ç¼å²åºå¤§å°ã</returns>
    </member>
    <member name="M:System.Net.Http.Formatting.FormUrlEncodedMediaTypeFormatter.ReadFromStreamAsync(System.Type,System.IO.Stream,System.Net.Http.HttpContent,System.Net.Http.Formatting.IFormatterLogger)">
      <summary> ä»¥å¼æ­¥æ¹å¼ååºååæå®ç±»åçå¯¹è±¡ã</summary>
      <returns>ä¸ä¸ª <see cref="T:System.Threading.Tasks.Task" />ï¼å¶ç»æå°æ¯å·²è¯»åçå¯¹è±¡å®ä¾ã</returns>
      <param name="type">è¦ååºååçå¯¹è±¡çç±»åã</param>
      <param name="readStream">è¦è¯»åç <see cref="T:System.IO.Stream" />ã</param>
      <param name="content">è¦è¯»åçåå®¹ç <see cref="T:System.Net.Http.HttpContent" />ã</param>
      <param name="formatterLogger">è¦å°äºä»¶è®°å½å°ç <see cref="T:System.Net.Http.Formatting.IFormatterLogger" />ã</param>
    </member>
    <member name="T:System.Net.Http.Formatting.IContentNegotiator">
      <summary> æ§è¡åå®¹ååãè¿æ¯æ ¹æ®è¯·æ±ä¸­çæ å¤´å¼éæ©ååºç¼åå¨ï¼æ ¼å¼åç¨åºï¼çè¿ç¨ã</summary>
    </member>
    <member name="M:System.Net.Http.Formatting.IContentNegotiator.Negotiate(System.Type,System.Net.Http.HttpRequestMessage,System.Collections.Generic.IEnumerable{System.Net.Http.Formatting.MediaTypeFormatter})">
      <summary> éè¿å¨å·²ä¸ºç»å® request ä¼ å¥ç formatters ä¸­éæ©å¯ä»¥åºååç»å® type çå¯¹è±¡çæéå½ <see cref="T:System.Net.Http.Formatting.MediaTypeFormatter" />ï¼æ¥æ§è¡åå®¹ååã</summary>
      <returns>åå«æéå½ç <see cref="T:System.Net.Http.Formatting.MediaTypeFormatter" /> å®ä¾çååç»ææ nullï¼å¦ææ²¡æéå½çæ ¼å¼åç¨åºï¼ã</returns>
      <param name="type">è¦åºååçç±»åã</param>
      <param name="request">è¯·æ±æ¶æ¯ï¼å¶ä¸­åå«ç¨äºæ§è¡ååçæ å¤´å¼ã</param>
      <param name="formatters">å¯ä¾éæ©ç <see cref="T:System.Net.Http.Formatting.MediaTypeFormatter" /> å¯¹è±¡éã</param>
    </member>
    <member name="T:System.Net.Http.Formatting.IFormatterLogger">
      <summary>æå®ä¸ä¸ªå¯ä¾æ ¼å¼åç¨åºç¨æ¥å¨è¯»åæ¶è®°å½éè¯¯çåè°æ¥å£ã</summary>
    </member>
    <member name="M:System.Net.Http.Formatting.IFormatterLogger.LogError(System.String,System.Exception)">
      <summary>è®°å½éè¯¯ã</summary>
      <param name="errorPath">è¦ä¸ºå¶è®°å½éè¯¯çæåçè·¯å¾ã</param>
      <param name="exception">éè¯¯æ¶æ¯ã</param>
    </member>
    <member name="M:System.Net.Http.Formatting.IFormatterLogger.LogError(System.String,System.String)">
      <summary>è®°å½éè¯¯ã</summary>
      <param name="errorPath">è¦ä¸ºå¶è®°å½éè¯¯çæåçè·¯å¾ã</param>
      <param name="errorMessage">è¦è®°å½çéè¯¯æ¶æ¯ã</param>
    </member>
    <member name="T:System.Net.Http.Formatting.IRequiredMemberSelector">
      <summary>å®ä¹ç¨äºç¡®å®ååºååæ¶æ¯å¦éè¦ç»å®æåçæ¹æ³ã</summary>
    </member>
    <member name="M:System.Net.Http.Formatting.IRequiredMemberSelector.IsRequiredMember(System.Reflection.MemberInfo)">
      <summary>ç¡®å®ååºååæ¶æ¯å¦éè¦ç»å®çæåã</summary>
      <returns>å¦æåºå° <paramref name="member" /> è§ä¸ºæéæåï¼åä¸º trueï¼å¦åä¸º falseã</returns>
      <param name="member">è¦è¢«ååºååç <see cref="T:System.Reflection.MemberInfo" />ã</param>
    </member>
    <member name="T:System.Net.Http.Formatting.JsonMediaTypeFormatter">
      <summary>è¡¨ç¤ºç¨äºå¤ç JSON ç <see cref="T:System.Net.Http.Formatting.MediaTypeFormatter" /> ç±»ã</summary>
    </member>
    <member name="M:System.Net.Http.Formatting.JsonMediaTypeFormatter.#ctor">
      <summary> åå§å <see cref="T:System.Net.Http.Formatting.JsonMediaTypeFormatter" /> ç±»çæ°å®ä¾ã</summary>
    </member>
    <member name="M:System.Net.Http.Formatting.JsonMediaTypeFormatter.CanReadType(System.Type)">
      <summary>ç¡®å®æ­¤ <see cref="T:System.Net.Http.Formatting.JsonMediaTypeFormatter" /> æ¯å¦å¯ä»¥è¯»åæå® <paramref name="type" /> çå¯¹è±¡ã</summary>
      <returns>å¦æå¯ä»¥è¯»åæ­¤ <paramref name="type" /> çå¯¹è±¡ï¼åä¸º trueï¼å¦åä¸º falseã</returns>
      <param name="type">å°è¦è¯»åçå¯¹è±¡çç±»åã</param>
    </member>
    <member name="M:System.Net.Http.Formatting.JsonMediaTypeFormatter.CanWriteType(System.Type)">
      <summary>ç¡®å®æ­¤ <see cref="T:System.Net.Http.Formatting.JsonMediaTypeFormatter" /> æ¯å¦å¯ä»¥åå¥æå® <paramref name="type" /> çå¯¹è±¡ã</summary>
      <returns>å¦æå¯ä»¥åå¥æ­¤ <paramref name="type" /> çå¯¹è±¡ï¼åä¸º trueï¼å¦åä¸º falseã</returns>
      <param name="type">å°è¦åå¥çå¯¹è±¡çç±»åã</param>
    </member>
    <member name="M:System.Net.Http.Formatting.JsonMediaTypeFormatter.CreateDefaultSerializerSettings">
      <summary> ä½¿ç¨ <see cref="T:System.Net.Http.Formatting.JsonMediaTypeFormatter" /> æä½¿ç¨çé»è®¤è®¾ç½®åå»ºä¸ä¸ª JsonSerializerSettings å®ä¾ã</summary>
      <returns>æ ¹æ® <see cref="T:System.Net.Http.Formatting.JsonMediaTypeFormatter" /> æä½¿ç¨çé»è®¤è®¾ç½®æ°å»ºç JsonSerializerSettings å®ä¾ã</returns>
    </member>
    <member name="P:System.Net.Http.Formatting.JsonMediaTypeFormatter.DefaultMediaType">
      <summary>è·å JSON çé»è®¤åªä½ç±»åï¼å³âapplication/jsonâã</summary>
      <returns>JSON ç <see cref="T:System.Net.Http.Headers.MediaTypeHeaderValue" />ã</returns>
    </member>
    <member name="P:System.Net.Http.Formatting.JsonMediaTypeFormatter.Indent">
      <summary> è·åæè®¾ç½®ä¸ä¸ªå¼ï¼è¯¥å¼æç¤ºåå¥æ°æ®æ¶æ¯å¦ç¼©è¿åç´ ã</summary>
      <returns>å¦æè¦å¨åå¥æ°æ®æ¶ç¼©è¿åç´ ï¼åä¸º trueï¼å¦åä¸º falseã</returns>
    </member>
    <member name="P:System.Net.Http.Formatting.JsonMediaTypeFormatter.MaxDepth">
      <summary>è·åæè®¾ç½®æ­¤æ ¼å¼åç¨åºæåè®¸çæå¤§æ·±åº¦ã</summary>
      <returns>æ­¤æ ¼å¼åç¨åºæåè®¸çæå¤§æ·±åº¦ã</returns>
    </member>
    <member name="M:System.Net.Http.Formatting.JsonMediaTypeFormatter.ReadFromStreamAsync(System.Type,System.IO.Stream,System.Net.Http.HttpContent,System.Net.Http.Formatting.IFormatterLogger)">
      <summary>ä»æå® <paramref name="stream" /> ä¸­è¯»åæå® <paramref name="type" /> çå¯¹è±¡ãå¨ååºååæé´è°ç¨æ­¤æ¹æ³ã</summary>
      <returns>è¿å <see cref="T:System.Threading.Tasks.Task`1" />ã</returns>
      <param name="type">è¦è¯»åçå¯¹è±¡çç±»åã</param>
      <param name="readStream">è¦ä»ä¸­è¯»åçæµ</param>
      <param name="content">è¦åå¥çåå®¹ã</param>
      <param name="formatterLogger">è¦å°äºä»¶è®°å½å°ç <see cref="T:System.Net.Http.Formatting.IFormatterLogger" />ã</param>
    </member>
    <member name="P:System.Net.Http.Formatting.JsonMediaTypeFormatter.SerializerSettings">
      <summary> è·åæè®¾ç½®ç¨äºéç½® JsonSerializer ç JsonSerializerSettingsã</summary>
      <returns> ç¨äºéç½® JsonSerializer ç JsonSerializerSettingsã</returns>
    </member>
    <member name="P:System.Net.Http.Formatting.JsonMediaTypeFormatter.UseDataContractJsonSerializer">
      <summary> è·åæè®¾ç½®ä¸ä¸ªå¼ï¼è¯¥å¼æç¤ºæ¯å¦å¨é»è®¤æåµä¸ä½¿ç¨ <see cref="T:System.Runtime.Serialization.Json.DataContractJsonSerializer" />ã</summary>
      <returns>å¦æè¦å¨é»è®¤æåµä¸ä½¿ç¨ <see cref="T:System.Runtime.Serialization.Json.DataContractJsonSerializer" />ï¼åä¸º trueï¼å¦åä¸º falseã</returns>
    </member>
    <member name="M:System.Net.Http.Formatting.JsonMediaTypeFormatter.WriteToStreamAsync(System.Type,System.Object,System.IO.Stream,System.Net.Http.HttpContent,System.Net.TransportContext)">
      <summary>å°æå® <paramref name="type" /> çå¯¹è±¡åå¥å°æå® <paramref name="stream" /> ä¸­ãå¨åºååæé´è°ç¨æ­¤æ¹æ³ã</summary>
      <returns>ä¸ä¸ªå°å¼åå¥æµç <see cref="T:System.Threading.Tasks.Task" />ã</returns>
      <param name="type">è¦åå¥çå¯¹è±¡çç±»åã</param>
      <param name="value">è¦åå¥çå¯¹è±¡ã</param>
      <param name="writeStream">è¦åå¥å°ç <see cref="T:System.IO.Stream" />ã</param>
      <param name="content">è¦å¨å¶ä¸­åå¥åå®¹ç <see cref="T:System.Net.Http.HttpContent" />ã</param>
      <param name="transportContext">
        <see cref="T:System.Net.TransportContext" />ã</param>
    </member>
    <member name="T:System.Net.Http.Formatting.MediaTypeFormatter">
      <summary> ç¨äºä½¿ç¨ <see cref="T:System.Net.Http.ObjectContent" /> å¤çåºåååååºååå¼ºç±»åå¯¹è±¡çåºç±»ã</summary>
    </member>
    <member name="M:System.Net.Http.Formatting.MediaTypeFormatter.#ctor">
      <summary>åå§å <see cref="T:System.Net.Http.Formatting.MediaTypeFormatter" /> ç±»çæ°å®ä¾ã</summary>
    </member>
    <member name="M:System.Net.Http.Formatting.MediaTypeFormatter.CanReadType(System.Type)">
      <summary>æ¥è¯¢æ­¤ <see cref="T:System.Net.Http.Formatting.MediaTypeFormatter" /> æ¯å¦å¯ä»¥ååºååæå®ç±»åçå¯¹è±¡ã</summary>
      <returns>å¦æ <see cref="T:System.Net.Http.Formatting.MediaTypeFormatter" /> å¯ä»¥ååºååè¯¥ç±»åï¼åä¸º trueï¼å¦åä¸º falseã</returns>
      <param name="type">è¦ååºååçç±»åã</param>
    </member>
    <member name="M:System.Net.Http.Formatting.MediaTypeFormatter.CanWriteType(System.Type)">
      <summary>æ¥è¯¢æ­¤ <see cref="T:System.Net.Http.Formatting.MediaTypeFormatter" /> æ¯å¦å¯ä»¥åºååæå®ç±»åçå¯¹è±¡ã</summary>
      <returns>å¦æ <see cref="T:System.Net.Http.Formatting.MediaTypeFormatter" /> å¯ä»¥åºååè¯¥ç±»åï¼åä¸º trueï¼å¦åä¸º falseã</returns>
      <param name="type">è¦åºååçç±»åã</param>
    </member>
    <member name="M:System.Net.Http.Formatting.MediaTypeFormatter.GetDefaultValueForType(System.Type)">
      <summary>è·åæå®ç±»åçé»è®¤å¼ã</summary>
      <returns>é»è®¤å¼ã</returns>
      <param name="type">è¦è·åå¶é»è®¤å¼çç±»åã</param>
    </member>
    <member name="M:System.Net.Http.Formatting.MediaTypeFormatter.GetPerRequestFormatterInstance(System.Type,System.Net.Http.HttpRequestMessage,System.Net.Http.Headers.MediaTypeHeaderValue)">
      <summary>è¿åå¯ä»¥ä¸ºç»å®åæ°è®¾ç½®ååºæ ¼å¼ç <see cref="T:System.Net.Http.Formatting.MediaTypeFormatter" /> ä¸ç¨å®ä¾ã</summary>
      <returns>è¿å <see cref="T:System.Net.Http.Formatting.MediaTypeFormatter" />ã</returns>
      <param name="type">è¦è®¾ç½®æ ¼å¼çç±»åã</param>
      <param name="request">è¯·æ±ã</param>
      <param name="mediaType">åªä½ç±»åã</param>
    </member>
    <member name="P:System.Net.Http.Formatting.MediaTypeFormatter.MaxHttpCollectionKeys">
      <summary>è·åæè®¾ç½® T ä¸­å­å¨çæå¤§é®æ°ï¼<see cref="System.Collections.Specialized.NameValueCollection" />.</summary>
      <returns>æå¤§é®æ°ã</returns>
    </member>
    <member name="P:System.Net.Http.Formatting.MediaTypeFormatter.MediaTypeMappings">
      <summary>è·åä¸åªä½ç±»åç HTTP è¯·æ±å¹éç <see cref="T:System.Net.Http.Formatting.MediaTypeMapping" /> å¯¹è±¡çå¯åéåã</summary>
      <returns>
        <see cref="T:System.Net.Http.Formatting.MediaTypeMapping" /> éåã</returns>
    </member>
    <member name="M:System.Net.Http.Formatting.MediaTypeFormatter.ReadFromStreamAsync(System.Type,System.IO.Stream,System.Net.Http.HttpContent,System.Net.Http.Formatting.IFormatterLogger)">
      <summary>ä»¥å¼æ­¥æ¹å¼ååºååæå®ç±»åçå¯¹è±¡ã</summary>
      <returns>ä¸ä¸ª <see cref="T:System.Threading.Tasks.Task" />ï¼å¶ç»æå°æ¯ç»å®ç±»åçå¯¹è±¡ã</returns>
      <param name="type">è¦ååºååçå¯¹è±¡çç±»åã</param>
      <param name="readStream">è¦è¯»åç <see cref="T:System.IO.Stream" />ã</param>
      <param name="content">
        <see cref="T:System.Net.Http.HttpContent" />ï¼å¦æå¯ç¨ï¼ãå®å¯ä»¥ä¸º nullã</param>
      <param name="formatterLogger">è¦å°äºä»¶è®°å½å°ç <see cref="T:System.Net.Http.Formatting.IFormatterLogger" />ã</param>
      <exception cref="T:System.NotSupportedException">æ´¾çç±»åéè¦æ¯æè¯»åã</exception>
    </member>
    <member name="P:System.Net.Http.Formatting.MediaTypeFormatter.RequiredMemberSelector">
      <summary>è·åæè®¾ç½®ç¨äºç¡®å®æéæåç <see cref="T:System.Net.Http.Formatting.IRequiredMemberSelector" /> å®ä¾ã</summary>
      <returns>
        <see cref="T:System.Net.Http.Formatting.IRequiredMemberSelector" /> å®ä¾ã</returns>
    </member>
    <member name="M:System.Net.Http.Formatting.MediaTypeFormatter.SelectCharacterEncoding(System.Net.Http.Headers.HttpContentHeaders)">
      <summary>æ ¹æ®ç»å®çä¸ç»åå®¹æ å¤´ï¼ç¡®å®ç¨äºè¯»åæåå¥ HTTP å®ä½æ­£æçæä½³å­ç¬¦ç¼ç ã</summary>
      <returns>æå¹éçç¼ç ã</returns>
      <param name="contentHeaders">åå®¹æ å¤´ã</param>
    </member>
    <member name="M:System.Net.Http.Formatting.MediaTypeFormatter.SetDefaultContentHeaders(System.Type,System.Net.Http.Headers.HttpContentHeaders,System.Net.Http.Headers.MediaTypeHeaderValue)">
      <summary> ä¸ºå°è¦ä½¿ç¨æ­¤æ ¼å¼åç¨åºè®¾ç½®æ ¼å¼çåå®¹è®¾ç½®é»è®¤æ å¤´ãæ­¤æ¹æ³æ¯ä» <see cref="T:System.Net.Http.ObjectContent" /> æé å½æ°ä¸­è°ç¨çãæ­¤å®ç°å° Content-Type æ å¤´è®¾ç½®ä¸º mediaType çå¼ï¼å¦æè¯¥å¼ä¸ä¸º nullï¼ãå¦æè¯¥å¼ä¸º nullï¼åæ­¤å®ç°ä¼å° Content-Type è®¾ç½®ä¸ºæ­¤æ ¼å¼åç¨åºçé»è®¤åªä½ç±»åãå¦æ Content-Type æªæå®å­ç¬¦éï¼åæ­¤å®ç°å°ä½¿ç¨æ­¤æ ¼å¼åç¨åºéç½®ç <see cref="T:System.Text.Encoding" /> æ¥è®¾ç½®å­ç¬¦éã</summary>
      <param name="type">è¦åºååçå¯¹è±¡çç±»åãè¯·åè§ <see cref="T:System.Net.Http.ObjectContent" />ã</param>
      <param name="headers">åºéç½®çåå®¹æ å¤´ã</param>
      <param name="mediaType">ææåªä½ç±»åãå¯ä»¥ä¸º nullã</param>
    </member>
    <member name="P:System.Net.Http.Formatting.MediaTypeFormatter.SupportedEncodings">
      <summary>è·åæ­¤ <see cref="T:System.Net.Http.Formatting.MediaTypeFormatter" /> ææ¯æçå­ç¬¦ç¼ç çå¯åéåã</summary>
      <returns>
        <see cref="T:System.Text.Encoding" /> å¯¹è±¡çéåã</returns>
    </member>
    <member name="P:System.Net.Http.Formatting.MediaTypeFormatter.SupportedMediaTypes">
      <summary>è·åæ­¤ <see cref="T:System.Net.Http.Formatting.MediaTypeFormatter" /> ææ¯æçåªä½ç±»åçå¯åéåã</summary>
      <returns>
        <see cref="T:System.Net.Http.Headers.MediaTypeHeaderValue" /> å¯¹è±¡çéåã</returns>
    </member>
    <member name="M:System.Net.Http.Formatting.MediaTypeFormatter.WriteToStreamAsync(System.Type,System.Object,System.IO.Stream,System.Net.Http.HttpContent,System.Net.TransportContext)">
      <summary>ä»¥å¼æ­¥æ¹å¼åå¥æå®ç±»åçå¯¹è±¡ã</summary>
      <returns>å°æ§è¡åæä½ç <see cref="T:System.Threading.Tasks.Task" />ã</returns>
      <param name="type">è¦åå¥çå¯¹è±¡çç±»åã</param>
      <param name="value">è¦åå¥çå¯¹è±¡å¼ãå®å¯ä»¥ä¸º nullã</param>
      <param name="writeStream">è¦åå¥å°ç <see cref="T:System.IO.Stream" />ã</param>
      <param name="content">
        <see cref="T:System.Net.Http.HttpContent" />ï¼å¦æå¯ç¨ï¼ãå®å¯ä»¥ä¸º nullã</param>
      <param name="transportContext">
        <see cref="T:System.Net.TransportContext" />ï¼å¦æå¯ç¨ï¼ãå®å¯ä»¥ä¸º nullã</param>
      <exception cref="T:System.NotSupportedException">æ´¾çç±»åéè¦æ¯æåå¥ã</exception>
    </member>
    <member name="T:System.Net.Http.Formatting.MediaTypeFormatterCollection">
      <summary>è¡¨ç¤ºåå« <see cref="T:System.Net.Http.Formatting.MediaTypeFormatter" /> å®ä¾çéåç±»ã</summary>
    </member>
    <member name="M:System.Net.Http.Formatting.MediaTypeFormatterCollection.#ctor">
      <summary>ä½¿ç¨é»è®¤å¼åå§å <see cref="T:System.Net.Http.Formatting.MediaTypeFormatterCollection" /> ç±»çæ°å®ä¾ã</summary>
    </member>
    <member name="M:System.Net.Http.Formatting.MediaTypeFormatterCollection.#ctor(System.Collections.Generic.IEnumerable{System.Net.Http.Formatting.MediaTypeFormatter})">
      <summary>ä½¿ç¨ç»å® <paramref name="formatters" /> åå§å <see cref="T:System.Net.Http.Formatting.MediaTypeFormatterCollection" /> ç±»çæ°å®ä¾ã</summary>
      <param name="formatters">è¦æ¾å¥éåä¸­ç <see cref="T:System.Net.Http.Formatting.MediaTypeFormatter" /> å®ä¾çéåã</param>
    </member>
    <member name="M:System.Net.Http.Formatting.MediaTypeFormatterCollection.FindReader(System.Type,System.Net.Http.Headers.MediaTypeHeaderValue)">
      <summary> æç´¢å¯ä»¥å¨ç»å® <paramref name="mediaType" /> ä¸­è¯»å .NET <paramref name="type" /> çæ ¼å¼åç¨åºçéåã</summary>
      <returns>å¯ä»¥è¯»åè¯¥ç±»åç <see cref="T:System.Net.Http.Formatting.MediaTypeFormatter" />ï¼æèå¦ææ¾ä¸å°æ ¼å¼åç¨åºï¼åä¸º nullã</returns>
      <param name="type">è¦è¯»åç.NET ç±»åã</param>
      <param name="mediaType">è¦å¹éçåªä½ç±»åã</param>
    </member>
    <member name="M:System.Net.Http.Formatting.MediaTypeFormatterCollection.FindWriter(System.Type,System.Net.Http.Headers.MediaTypeHeaderValue)">
      <summary> æç´¢å¯ä»¥å¨ç»å® <paramref name="mediaType" /> ä¸­åå¥ .NET <paramref name="type" /> çæ ¼å¼åç¨åºçéåã</summary>
      <returns>å¯ä»¥åå¥è¯¥ç±»åç <see cref="T:System.Net.Http.Formatting.MediaTypeFormatter" />ï¼æèå¦ææ¾ä¸å°æ ¼å¼åç¨åºï¼åä¸º nullã</returns>
      <param name="type">è¦åå¥ç.NET ç±»åã</param>
      <param name="mediaType">è¦å¹éçåªä½ç±»åã</param>
    </member>
    <member name="P:System.Net.Http.Formatting.MediaTypeFormatterCollection.FormUrlEncodedFormatter">
      <summary> è·åè¦å¯¹ application/x-www-form-urlencoded æ°æ®ä½¿ç¨ç <see cref="T:System.Net.Http.Formatting.MediaTypeFormatter" />ã</summary>
      <returns> è¦å¯¹ application/x-www-form-urlencoded æ°æ®ä½¿ç¨ç <see cref="T:System.Net.Http.Formatting.MediaTypeFormatter" />ã</returns>
    </member>
    <member name="M:System.Net.Http.Formatting.MediaTypeFormatterCollection.IsTypeExcludedFromValidation(System.Type)">
      <summary> ç¡®å® <paramref name="type" /> æ¯å¦ä¸ºé£äºåºæé¤å¨éªè¯ä¹å¤çæ¾æ£å®ä¹çç±»åä¹ä¸ã</summary>
      <returns>å¦æåºæé¤è¯¥ç±»åï¼åä¸º trueï¼å¦åä¸º falseã</returns>
      <param name="type">è¦éªè¯ç .NET <see cref="T:System.Type" />ã</param>
    </member>
    <member name="P:System.Net.Http.Formatting.MediaTypeFormatterCollection.JsonFormatter">
      <summary> è·åè¦ç¨äº JSON ç <see cref="T:System.Net.Http.Formatting.MediaTypeFormatter" />ã</summary>
      <returns>è¦ç¨äº JSON ç <see cref="T:System.Net.Http.Formatting.MediaTypeFormatter" />ã</returns>
    </member>
    <member name="P:System.Net.Http.Formatting.MediaTypeFormatterCollection.XmlFormatter">
      <summary> è·åè¦ç¨äº XML ç <see cref="T:System.Net.Http.Formatting.MediaTypeFormatter" />ã</summary>
      <returns> è¦ç¨äº XML ç <see cref="T:System.Net.Http.Formatting.MediaTypeFormatter" />ã</returns>
    </member>
    <member name="M:System.Net.Http.Formatting.MediaTypeFormatterExtensions.AddQueryStringMapping(System.Net.Http.Formatting.MediaTypeFormatter,System.String,System.String,System.Net.Http.Headers.MediaTypeHeaderValue)">
      <summary> æ´æ° <see cref="T:System.Net.Http.Formatting.MediaTypeMapping" /> åç´ çä¸ç»ç»å® formatterï¼ä»¥ä½¿å¶å° mediaType ä¸åå«ç¹å®æ¥è¯¢åæ°åå¼ç <see cref="T:System.Uri" /> ç¸å³èã</summary>
      <param name="formatter">ç¨äºæ¥æ¶æ°ç <see cref="T:System.Net.Http.Formatting.QueryStringMapping" /> é¡¹ç <see cref="T:System.Net.Http.Formatting.MediaTypeFormatter" />ã</param>
      <param name="queryStringParameterName">æ¥è¯¢åæ°çåç§°ã</param>
      <param name="queryStringParameterValue">åéç»è¯¥æ¥è¯¢åæ°çå¼ã</param>
      <param name="mediaType">è¦ä¸åå«ä¸ä¸ªä¸ queryStringParameterName å queryStringParameterValue å¹éçæ¥è¯¢å­ç¬¦ä¸²ç <see cref="T:System.Uri" /> å³èç <see cref="T:System.Net.Http.Headers.MediaTypeHeaderValue" />ã</param>
    </member>
    <member name="M:System.Net.Http.Formatting.MediaTypeFormatterExtensions.AddQueryStringMapping(System.Net.Http.Formatting.MediaTypeFormatter,System.String,System.String,System.String)">
      <summary> æ´æ° <see cref="T:System.Net.Http.Formatting.MediaTypeMapping" /> åç´ çä¸ç»ç»å® formatterï¼ä»¥ä½¿å¶å° mediaType ä¸åå«ç¹å®æ¥è¯¢åæ°åå¼ç <see cref="T:System.Uri" /> ç¸å³èã</summary>
      <param name="formatter">ç¨äºæ¥æ¶æ°ç <see cref="T:System.Net.Http.Formatting.QueryStringMapping" /> é¡¹ç <see cref="T:System.Net.Http.Formatting.MediaTypeFormatter" />ã</param>
      <param name="queryStringParameterName">æ¥è¯¢åæ°çåç§°ã</param>
      <param name="queryStringParameterValue">åéç»è¯¥æ¥è¯¢åæ°çå¼ã</param>
      <param name="mediaType">è¦ä¸åå«ä¸ä¸ªä¸ queryStringParameterName å queryStringParameterValue å¹éçæ¥è¯¢å­ç¬¦ä¸²ç <see cref="T:System.Uri" /> å³èçåªä½ç±»åã</param>
    </member>
    <member name="M:System.Net.Http.Formatting.MediaTypeFormatterExtensions.AddRequestHeaderMapping(System.Net.Http.Formatting.MediaTypeFormatter,System.String,System.String,System.StringComparison,System.Boolean,System.Net.Http.Headers.MediaTypeHeaderValue)">
      <summary> æ´æ° <see cref="T:System.Net.Http.Formatting.MediaTypeMapping" /> åç´ çä¸ç»ç»å® formatterï¼ä»¥ä½¿å¶å° mediaType ä¸å·æç¹å®å¼çç¹å® HTTP è¯·æ±æ å¤´å­æ®µç¸å³èã</summary>
      <param name="formatter">ç¨äºæ¥æ¶æ°ç <see cref="T:System.Net.Http.Formatting.MediaRangeMapping" /> é¡¹ç <see cref="T:System.Net.Http.Formatting.MediaTypeFormatter" />ã</param>
      <param name="headerName">è¦å¹éçæ å¤´çåç§°ã</param>
      <param name="headerValue">è¦å¹éçæ å¤´å¼ã</param>
      <param name="valueComparison">å¹é headerValue æ¶è¦ä½¿ç¨ç <see cref="T:System.StringComparison" />ã</param>
      <param name="isValueSubstring">å¦æè®¾ç½®ä¸º trueï¼å headerValue å¨ä¸å®éæ å¤´å¼çå­å­ç¬¦ä¸²å¹éæ¶å°è¢«è§ä¸ºå¹éé¡¹ã</param>
      <param name="mediaType">è¦ä¸ <see cref="M:HttpRequestMessage.Header" /> æ¡ç®ï¼å¶åç§°ä¸ headerName å¹éï¼å¹¶ä¸å¶å¼ä¸ headerValue å¹éï¼å³èç <see cref="T:System.Net.Http.Headers.MediaTypeHeaderValue" />ã</param>
    </member>
    <member name="M:System.Net.Http.Formatting.MediaTypeFormatterExtensions.AddRequestHeaderMapping(System.Net.Http.Formatting.MediaTypeFormatter,System.String,System.String,System.StringComparison,System.Boolean,System.String)">
      <summary> æ´æ° <see cref="T:System.Net.Http.Formatting.MediaTypeMapping" /> åç´ çä¸ç»ç»å® formatterï¼ä»¥ä½¿å¶å° mediaType ä¸å·æç¹å®å¼çç¹å® HTTP è¯·æ±æ å¤´å­æ®µç¸å³èã</summary>
      <param name="formatter">ç¨äºæ¥æ¶æ°ç <see cref="T:System.Net.Http.Formatting.MediaRangeMapping" /> é¡¹ç <see cref="T:System.Net.Http.Formatting.MediaTypeFormatter" />ã</param>
      <param name="headerName">è¦å¹éçæ å¤´çåç§°ã</param>
      <param name="headerValue">è¦å¹éçæ å¤´å¼ã</param>
      <param name="valueComparison">å¹é headerValue æ¶è¦ä½¿ç¨ç <see cref="T:System.StringComparison" />ã</param>
      <param name="isValueSubstring">å¦æè®¾ç½®ä¸º trueï¼å headerValue å¨ä¸å®éæ å¤´å¼çå­å­ç¬¦ä¸²å¹éæ¶å°è¢«è§ä¸ºå¹éé¡¹ã</param>
      <param name="mediaType">è¦ä¸ <see cref="M:HttpRequestMessage.Header" /> æ¡ç®ï¼å¶åç§°ä¸ headerName å¹éï¼å¹¶ä¸å¶å¼ä¸ headerValue å¹éï¼å³èçåªä½ç±»åã</param>
    </member>
    <member name="T:System.Net.Http.Formatting.MediaTypeFormatterMatch">
      <summary> æ­¤ç±»æè¿°ç¹å® <see cref="T:System.Net.Http.Formatting.MediaTypeFormatter" /> ä¸è¯·æ±çå¹éç¨åº¦ã</summary>
    </member>
    <member name="M:System.Net.Http.Formatting.MediaTypeFormatterMatch.#ctor(System.Net.Http.Formatting.MediaTypeFormatter,System.Net.Http.Headers.MediaTypeHeaderValue,System.Nullable{System.Double},System.Net.Http.Formatting.MediaTypeFormatterMatchRanking)">
      <summary> åå§å <see cref="T:System.Net.Http.Formatting.MediaTypeFormatterMatch" /> ç±»çæ°å®ä¾ã</summary>
      <param name="formatter">è¦å¹éçæ ¼å¼åç¨åºã</param>
      <param name="mediaType">åªä½ç±»åãå¯ä»¥ä¸º nullï¼å¨è¿ç§æåµä¸ï¼å°ä½¿ç¨åªä½ç±»å application/octet æµã</param>
      <param name="quality">å¹éçè´¨éãå¯ä»¥ä¸º nullï¼å¨è¿ç§æåµä¸ï¼å°å¶è§ä¸ºå¼ä¸º 1.0 çå®å¨å¹é</param>
      <param name="ranking">å¹éçç±»åã</param>
    </member>
    <member name="P:System.Net.Http.Formatting.MediaTypeFormatterMatch.Formatter">
      <summary> è·ååªä½ç±»åæ ¼å¼åç¨åºã</summary>
    </member>
    <member name="P:System.Net.Http.Formatting.MediaTypeFormatterMatch.MediaType">
      <summary> è·åå¹éçåªä½ç±»åã</summary>
    </member>
    <member name="P:System.Net.Http.Formatting.MediaTypeFormatterMatch.Quality">
      <summary> è·åå¹éçè´¨é</summary>
    </member>
    <member name="P:System.Net.Http.Formatting.MediaTypeFormatterMatch.Ranking">
      <summary> è·ååççå¹éç±»åã </summary>
    </member>
    <member name="T:System.Net.Http.Formatting.MediaTypeFormatterMatchRanking">
      <summary> åå« <see cref="T:System.Net.Http.Formatting.MediaTypeFormatter" /> ä¸ä¼ å¥è¯·æ±ä¸­æ¾å°çæ¾å¼æéå¼é¦éé¡¹çå¹éç¨åº¦çç¸å³ä¿¡æ¯ã</summary>
    </member>
    <member name="F:System.Net.Http.Formatting.MediaTypeFormatterMatchRanking.None">
      <summary> æ²¡ææ¾å°å¹éé¡¹</summary>
    </member>
    <member name="F:System.Net.Http.Formatting.MediaTypeFormatterMatchRanking.MatchOnCanWriteType">
      <summary> å¨ç±»åä¸å¹éï¼æå³çæ ¼å¼åç¨åºè½å¤åºååè¯¥ç±»åã</summary>
    </member>
    <member name="F:System.Net.Http.Formatting.MediaTypeFormatterMatchRanking.MatchOnRequestAcceptHeaderLiteral">
      <summary>å¨æ¾å¼ææ¬ accept æ å¤´ï¼å¦âapplication/jsonâï¼ä¸å¹éã</summary>
    </member>
    <member name="F:System.Net.Http.Formatting.MediaTypeFormatterMatchRanking.MatchOnRequestAcceptHeaderSubtypeMediaRange">
      <summary>å¨ Accept æ å¤´ä¸­çæ¾å¼å­ç±»åèå´ï¼å¦âapplication/*âï¼ä¸å¹éã</summary>
    </member>
    <member name="F:System.Net.Http.Formatting.MediaTypeFormatterMatchRanking.MatchOnRequestAcceptHeaderAllMediaRange">
      <summary>å¨ Accept æ å¤´ä¸­çæ¾å¼â*/*âèå´ä¸å¹éã</summary>
    </member>
    <member name="F:System.Net.Http.Formatting.MediaTypeFormatterMatchRanking.MatchOnRequestWithMediaTypeMapping">
      <summary> å¨åºç¨åç§ <see cref="T:System.Net.Http.Formatting.MediaTypeMapping" /> åï¼å¨ <see cref="T:System.Net.Http.HttpRequestMessage" /> ä¸å¹éã</summary>
    </member>
    <member name="F:System.Net.Http.Formatting.MediaTypeFormatterMatchRanking.MatchOnRequestMediaType">
      <summary> å¨ HTTP è¯·æ±æ¶æ¯ä¸­çå®ä½æ­£æçåªä½ç±»åä¸å¹éã</summary>
    </member>
    <member name="T:System.Net.Http.Formatting.MediaTypeMapping">
      <summary> ä¸ä¸ªæ½è±¡åºç±»ï¼ç¨äºå¨å·ææäºç¹å¾ç <see cref="T:System.Net.Http.HttpRequestMessage" /> æ <see cref="T:System.Net.Http.HttpResponseMessage" /> å®ä¾ä¸ç¹å®ç <see cref="T:System.Net.Http.Headers.MediaTypeHeaderValue" /> ä¹é´åå»ºå³èã</summary>
    </member>
    <member name="M:System.Net.Http.Formatting.MediaTypeMapping.#ctor(System.Net.Http.Headers.MediaTypeHeaderValue)">
      <summary> åå§åå·æç»å® mediaType å¼ç <see cref="T:System.Net.Http.Formatting.MediaTypeMapping" /> çæ°å®ä¾ã</summary>
      <param name="mediaType"> ä¸å·æç»å® <see cref="T:System.Net.Http.Formatting.MediaTypeMapping" /> ç¹å¾ç <see cref="T:System.Net.Http.HttpRequestMessage" /> æ <see cref="T:System.Net.Http.HttpResponseMessage" /> å®ä¾ç¸å³èç <see cref="T:System.Net.Http.Headers.MediaTypeHeaderValue" />ã</param>
    </member>
    <member name="M:System.Net.Http.Formatting.MediaTypeMapping.#ctor(System.String)">
      <summary> åå§åå·æç»å® mediaType å¼ç <see cref="T:System.Net.Http.Formatting.MediaTypeMapping" /> çæ°å®ä¾ã</summary>
      <param name="mediaType"> ä¸å·æç»å® <see cref="T:System.Net.Http.Formatting.MediaTypeMapping" /> ç¹å¾ç <see cref="T:System.Net.Http.HttpRequestMessage" /> æ <see cref="T:System.Net.Http.HttpResponseMessage" /> å®ä¾ç¸å³èç <see cref="T:System.String" />ã</param>
    </member>
    <member name="P:System.Net.Http.Formatting.MediaTypeMapping.MediaType">
      <summary> è·åä¸å·æç»å® <see cref="T:System.Net.Http.Formatting.MediaTypeMapping" /> ç¹å¾ç <see cref="T:System.Net.Http.HttpRequestMessage" /> æ <see cref="T:System.Net.Http.HttpResponseMessage" /> å®ä¾å³èç <see cref="T:System.Net.Http.Headers.MediaTypeHeaderValue" />ã</summary>
    </member>
    <member name="M:System.Net.Http.Formatting.MediaTypeMapping.TryMatchMediaType(System.Net.Http.HttpRequestMessage)">
      <summary> è¿åä¸ request å³èç <see cref="T:System.Net.Http.Headers.MediaTypeHeaderValue" /> çå¹éè´¨éã</summary>
      <returns> å¹éçè´¨éãè¯¥å¼å¿é¡»ä»äº 0.0 å 1.0 ä¹é´ãå¼ 0.0 è¡¨ç¤ºä¸å¹éãå¼ 1.0 è¡¨ç¤ºå®å¨å¹éã </returns>
      <param name="request"> è¦éå¯¹ä¸ <see cref="T:System.Net.Http.Formatting.MediaTypeMapping" /> ç <see cref="T:System.Net.Http.Headers.MediaTypeHeaderValue" /> å³èçç¹å¾è¿è¡è¯ä¼°ç <see cref="T:System.Net.Http.HttpRequestMessage" />ã</param>
    </member>
    <member name="T:System.Net.Http.Formatting.QueryStringMapping">
      <summary> ç¨äºä»æ¥è¯¢å­ç¬¦ä¸²æä¾ <see cref="T:System.Net.Http.Headers.MediaTypeHeaderValue" /> çç±»ã</summary>
    </member>
    <member name="M:System.Net.Http.Formatting.QueryStringMapping.#ctor(System.String,System.String,System.Net.Http.Headers.MediaTypeHeaderValue)">
      <summary> åå§å <see cref="T:System.Net.Http.Formatting.QueryStringMapping" /> ç±»çæ°å®ä¾ã</summary>
      <param name="queryStringParameterName">è¦å¹éçæ¥è¯¢å­ç¬¦ä¸²åæ°çåç§°ï¼å¦æå­å¨ï¼ã</param>
      <param name="queryStringParameterValue">ç± queryStringParameterName æå®çæ¥è¯¢å­ç¬¦ä¸²åæ°çå¼ã</param>
      <param name="mediaType">å½ç± queryStringParameterName æå®çæ¥è¯¢åæ°å­å¨ä¸åéäºç± queryStringParameterValue æå®çå¼æ¶è¦ä½¿ç¨ç <see cref="T:System.Net.Http.Headers.MediaTypeHeaderValue" />ã</param>
    </member>
    <member name="M:System.Net.Http.Formatting.QueryStringMapping.#ctor(System.String,System.String,System.String)">
      <summary> åå§å <see cref="T:System.Net.Http.Formatting.QueryStringMapping" /> ç±»çæ°å®ä¾ã</summary>
      <param name="queryStringParameterName">è¦å¹éçæ¥è¯¢å­ç¬¦ä¸²åæ°çåç§°ï¼å¦æå­å¨ï¼ã</param>
      <param name="queryStringParameterValue">ç± queryStringParameterName æå®çæ¥è¯¢å­ç¬¦ä¸²åæ°çå¼ã</param>
      <param name="mediaType">å½ç± queryStringParameterName æå®çæ¥è¯¢åæ°å­å¨ä¸åéäºç± queryStringParameterValue æå®çå¼æ¶è¦ä½¿ç¨çåªä½ç±»åã</param>
    </member>
    <member name="P:System.Net.Http.Formatting.QueryStringMapping.QueryStringParameterName">
      <summary> è·åæ¥è¯¢å­ç¬¦ä¸²åæ°åç§°ã</summary>
    </member>
    <member name="P:System.Net.Http.Formatting.QueryStringMapping.QueryStringParameterValue">
      <summary> è·åæ¥è¯¢å­ç¬¦ä¸²åæ°å¼ã</summary>
    </member>
    <member name="M:System.Net.Http.Formatting.QueryStringMapping.TryMatchMediaType(System.Net.Http.HttpRequestMessage)">
      <summary> è¿åä¸ä¸ªå¼ï¼è¯¥å¼æç¤ºå½å <see cref="T:System.Net.Http.Formatting.QueryStringMapping" /> å®ä¾æ¯å¦å¯ä»¥ä» request è¿å <see cref="T:System.Net.Http.Headers.MediaTypeHeaderValue" />ã</summary>
      <returns>å¦ææ­¤å®ä¾å¯ä»¥ä» request çæ <see cref="T:System.Net.Http.Headers.MediaTypeHeaderValue" />ï¼åè¿å 1.0ï¼å¦åè¿å 0.0ã</returns>
      <param name="request">è¦æ£æ¥ç <see cref="T:System.Net.Http.HttpRequestMessage" />ã</param>
    </member>
    <member name="T:System.Net.Http.Formatting.RequestHeaderMapping">
      <summary> æ­¤ç±»æä¾ä»ä»»æ HTTP è¯·æ±æ å¤´å­æ®µå° <see cref="T:System.Net.Http.Headers.MediaTypeHeaderValue" />ï¼ç¨æ¥éæ©ç¨äºå¤ç <see cref="T:System.Net.Http.HttpRequestMessage" /> æ <see cref="T:System.Net.Http.HttpResponseMessage" /> çå®ä½æ­£æç <see cref="T:System.Net.Http.Formatting.MediaTypeFormatter" /> å®ä¾ï¼çæ å°ã&lt;remarks&gt;æ­¤ç±»åªæ£æ¥ä¸å¹éé¡¹ç <see cref="M:HttpRequestMessage.Headers" /> å³èçæ å¤´å­æ®µãå®ä¸æ£æ¥ä¸ <see cref="M:HttpResponseMessage.Headers" /> æ <see cref="M:HttpContent.Headers" /> å®ä¾å³èçæ å¤´å­æ®µã&lt;/remarks&gt;</summary>
    </member>
    <member name="M:System.Net.Http.Formatting.RequestHeaderMapping.#ctor(System.String,System.String,System.StringComparison,System.Boolean,System.Net.Http.Headers.MediaTypeHeaderValue)">
      <summary> åå§å <see cref="T:System.Net.Http.Formatting.RequestHeaderMapping" /> ç±»çæ°å®ä¾ã</summary>
      <param name="headerName">è¦å¹éçæ å¤´çåç§°ã</param>
      <param name="headerValue">è¦å¹éçæ å¤´å¼ã</param>
      <param name="valueComparison">å¹é headerValue æ¶è¦ä½¿ç¨ç <see cref="T:System.StringComparison" />ã</param>
      <param name="isValueSubstring">å¦æè®¾ç½®ä¸º trueï¼å headerValue å¨ä¸å®éæ å¤´å¼çå­å­ç¬¦ä¸²å¹éæ¶å°è¢«è§ä¸ºå¹éé¡¹ã</param>
      <param name="mediaType">å° headerName å headerValue è§ä¸ºå¹éé¡¹æ¶è¦ä½¿ç¨ç <see cref="T:System.Net.Http.Headers.MediaTypeHeaderValue" />ã</param>
    </member>
    <member name="M:System.Net.Http.Formatting.RequestHeaderMapping.#ctor(System.String,System.String,System.StringComparison,System.Boolean,System.String)">
      <summary> åå§å <see cref="T:System.Net.Http.Formatting.RequestHeaderMapping" /> ç±»çæ°å®ä¾ã</summary>
      <param name="headerName">è¦å¹éçæ å¤´çåç§°ã</param>
      <param name="headerValue">è¦å¹éçæ å¤´å¼ã</param>
      <param name="valueComparison">å¹é headerValue æ¶è¦ä½¿ç¨çå¼æ¯è¾ã</param>
      <param name="isValueSubstring">å¦æè®¾ç½®ä¸º trueï¼å headerValue å¨ä¸å®éæ å¤´å¼çå­å­ç¬¦ä¸²å¹éæ¶å°è¢«è§ä¸ºå¹éé¡¹ã</param>
      <param name="mediaType">å° headerName å headerValue è§ä¸ºå¹éé¡¹æ¶è¦ä½¿ç¨çåªä½ç±»åã</param>
    </member>
    <member name="P:System.Net.Http.Formatting.RequestHeaderMapping.HeaderName">
      <summary> è·åè¦å¹éçæ å¤´çåç§°ã</summary>
    </member>
    <member name="P:System.Net.Http.Formatting.RequestHeaderMapping.HeaderValue">
      <summary> è·åè¦å¹éçæ å¤´å¼ã</summary>
    </member>
    <member name="P:System.Net.Http.Formatting.RequestHeaderMapping.HeaderValueComparison">
      <summary> è·åå¨å¹é <see cref="M:HeaderValue" /> æ¶è¦ä½¿ç¨ç <see cref="T:System.StringComparison" />ã</summary>
    </member>
    <member name="P:System.Net.Http.Formatting.RequestHeaderMapping.IsValueSubstring">
      <summary> è·åä¸ä¸ªå¼ï¼è¯¥å¼æç¤º <see cref="M:HeaderValue" /> æ¯å¦ä¸å®éæ å¤´å¼çå­å­ç¬¦ä¸²å¹éãæ­¤å®ä¾æ¯å¼å­å­ç¬¦ä¸²ã</summary>
      <returns>true<see cref="P:System.Net.Http.Formatting.RequestHeaderMapping.HeaderValue" />false</returns>
    </member>
    <member name="M:System.Net.Http.Formatting.RequestHeaderMapping.TryMatchMediaType(System.Net.Http.HttpRequestMessage)">
      <summary> è¿åä¸ä¸ªå¼ï¼è¯¥å¼æç¤ºå½å <see cref="T:System.Net.Http.Formatting.RequestHeaderMapping" /> å®ä¾æ¯å¦å¯ä»¥ä» request è¿å <see cref="T:System.Net.Http.Headers.MediaTypeHeaderValue" />ã</summary>
      <returns> å¹éçè´¨éãè¯¥å¼å¿é¡»ä»äº 0.0 å 1.0 ä¹é´ãå¼ 0.0 è¡¨ç¤ºä¸å¹éãå¼ 1.0 è¡¨ç¤ºå®å¨å¹éã </returns>
      <param name="request">è¦æ£æ¥ç <see cref="T:System.Net.Http.HttpRequestMessage" />ã</param>
    </member>
    <member name="T:System.Net.Http.Formatting.XmlHttpRequestHeaderMapping">
      <summary> ä¸ä¸ª <see cref="T:System.Net.Http.Formatting.RequestHeaderMapping" />ï¼è¯¥ç±»å¨è¯·æ±ä¸­ä¸å­å¨æ¾å¼ Accept æ å¤´å­æ®µæ¶ï¼ä¼å° AJAX XmlHttpRequest (XHR) æè®¾ç½®ç X-Requested-With http æ å¤´å­æ®µæ å°å°åªä½ç±»å application/jsonã</summary>
    </member>
    <member name="M:System.Net.Http.Formatting.XmlHttpRequestHeaderMapping.#ctor">
      <summary> åå§å <see cref="T:System.Net.Http.Formatting.XmlHttpRequestHeaderMapping" /> ç±»çæ°å®ä¾</summary>
    </member>
    <member name="M:System.Net.Http.Formatting.XmlHttpRequestHeaderMapping.TryMatchMediaType(System.Net.Http.HttpRequestMessage)">
      <summary> è¿åä¸ä¸ªå¼ï¼è¯¥å¼æç¤ºå½å <see cref="T:System.Net.Http.Formatting.RequestHeaderMapping" /> å®ä¾æ¯å¦å¯ä»¥ä» request è¿å <see cref="T:System.Net.Http.Headers.MediaTypeHeaderValue" />ã</summary>
      <returns> å¹éçè´¨éãå¼ 0.0 è¡¨ç¤ºä¸å¹éãå¼ 1.0 è¡¨ç¤ºå®å¨å¹éï¼å¹¶ä¸è¯·æ±æ¯ä½¿ç¨ä¸å¸¦ Accept æ å¤´ç XmlHttpRequest ååºçã </returns>
      <param name="request">è¦æ£æ¥ç <see cref="T:System.Net.Http.HttpRequestMessage" />ã</param>
    </member>
    <member name="T:System.Net.Http.Formatting.XmlMediaTypeFormatter">
      <summary>ç¨äºå¤ç Xml ç <see cref="T:System.Net.Http.Formatting.MediaTypeFormatter" /> ç±»ã</summary>
    </member>
    <member name="M:System.Net.Http.Formatting.XmlMediaTypeFormatter.#ctor">
      <summary>åå§å <see cref="T:System.Net.Http.Formatting.XmlMediaTypeFormatter" /> ç±»çæ°å®ä¾ã</summary>
    </member>
    <member name="M:System.Net.Http.Formatting.XmlMediaTypeFormatter.CanReadType(System.Type)">
      <summary>æ¥è¯¢ <see cref="T:System.Net.Http.Formatting.XmlMediaTypeFormatter" /> æ¯å¦å¯ä»¥ååºååæå®ç±»åçå¯¹è±¡ã</summary>
      <returns>å¦æ <see cref="T:System.Net.Http.Formatting.XmlMediaTypeFormatter" /> å¯ä»¥ååºååè¯¥ç±»åï¼åä¸º trueï¼å¦åä¸º falseã</returns>
      <param name="type">è¦ååºååçç±»åã</param>
    </member>
    <member name="M:System.Net.Http.Formatting.XmlMediaTypeFormatter.CanWriteType(System.Type)">
      <summary>æ¥è¯¢ <see cref="T:System.Net.Http.Formatting.XmlMediaTypeFormatter" /> æ¯å¦å¯ä»¥åºååæå®ç±»åçå¯¹è±¡ã</summary>
      <returns>å¦æ <see cref="T:System.Net.Http.Formatting.XmlMediaTypeFormatter" /> å¯ä»¥åºååè¯¥ç±»åï¼åä¸º trueï¼å¦åä¸º falseã</returns>
      <param name="type">è¦åºååçç±»åã</param>
    </member>
    <member name="P:System.Net.Http.Formatting.XmlMediaTypeFormatter.DefaultMediaType">
      <summary>è·å XML æ ¼å¼åç¨åºçé»è®¤åªä½ç±»åã</summary>
      <returns>é»è®¤åªä½ç±»åï¼å³âapplication/xmlâã</returns>
    </member>
    <member name="P:System.Net.Http.Formatting.XmlMediaTypeFormatter.Indent">
      <summary>è·åæè®¾ç½®ä¸ä¸ªå¼ï¼è¯¥å¼æç¤ºåå¥æ°æ®æ¶æ¯å¦ç¼©è¿åç´ ã</summary>
      <returns>è¥è¦ç¼©è¿åç´ ï¼åä¸º trueï¼å¦åä¸º falseã</returns>
    </member>
    <member name="P:System.Net.Http.Formatting.XmlMediaTypeFormatter.MaxDepth">
      <summary>è·ååè®¾ç½®æå¤§åµå¥èç¹æ·±åº¦ã</summary>
      <returns>æå¤§åµå¥èç¹æ·±åº¦ã</returns>
    </member>
    <member name="M:System.Net.Http.Formatting.XmlMediaTypeFormatter.ReadFromStreamAsync(System.Type,System.IO.Stream,System.Net.Http.HttpContent,System.Net.Http.Formatting.IFormatterLogger)">
      <summary> å¨ååºååæé´è°ç¨ï¼ç¨äºä»æå®ç readStream è¯»åæå® type çå¯¹è±¡ã</summary>
      <returns>ä¸ä¸ª <see cref="T:System.Threading.Tasks.Task" />ï¼å¶ç»æå°æ¯å·²è¯»åçå¯¹è±¡å®ä¾ã</returns>
      <param name="type">è¦è¯»åçå¯¹è±¡çç±»åã</param>
      <param name="readStream">è¦ä»ä¸­è¯»åç <see cref="T:System.IO.Stream" />ã</param>
      <param name="content">è¦è¯»åçåå®¹ç <see cref="T:System.Net.Http.HttpContent" />ã</param>
      <param name="formatterLogger">è¦å°äºä»¶è®°å½å°ç <see cref="T:System.Net.Http.Formatting.IFormatterLogger" />ã</param>
    </member>
    <member name="M:System.Net.Http.Formatting.XmlMediaTypeFormatter.RemoveSerializer(System.Type)">
      <summary>æ³¨éå½åä¸ç»å®ç±»åå³èçåºååç¨åºã</summary>
      <returns>å¦æä»¥åå·²ä¸ºè¯¥ç±»åæ³¨ååºååç¨åºï¼åä¸º trueï¼å¦åä¸º falseã</returns>
      <param name="type">åºå é¤å¶åºååç¨åºçå¯¹è±¡çç±»åã</param>
    </member>
    <member name="M:System.Net.Http.Formatting.XmlMediaTypeFormatter.SetSerializer``1(System.Runtime.Serialization.XmlObjectSerializer)">
      <summary>æ³¨åç¨äºè¯»åæåå¥æå®ç±»åå¯¹è±¡ç <see cref="T:System.Runtime.Serialization.XmlObjectSerializer" />ã</summary>
      <param name="serializer">
        <see cref="T:System.Runtime.Serialization.XmlObjectSerializer" /> å®ä¾ã</param>
      <typeparam name="T">å°ä½¿ç¨ <paramref name="serializer" /> è¿è¡åºååæååºååçå¯¹è±¡çç±»åã</typeparam>
    </member>
    <member name="M:System.Net.Http.Formatting.XmlMediaTypeFormatter.SetSerializer(System.Type,System.Runtime.Serialization.XmlObjectSerializer)">
      <summary>æ³¨åç¨äºè¯»åæåå¥æå®ç±»åå¯¹è±¡ç <see cref="T:System.Runtime.Serialization.XmlObjectSerializer" />ã</summary>
      <param name="type">å°ä½¿ç¨ <paramref name="serializer" /> è¿è¡åºååæååºååçå¯¹è±¡çç±»åã</param>
      <param name="serializer">
        <see cref="T:System.Runtime.Serialization.XmlObjectSerializer" /> å®ä¾ã</param>
    </member>
    <member name="M:System.Net.Http.Formatting.XmlMediaTypeFormatter.SetSerializer(System.Type,System.Xml.Serialization.XmlSerializer)">
      <summary>æ³¨åç¨äºè¯»åæåå¥æå®ç±»åå¯¹è±¡ç <see cref="T:System.Xml.Serialization.XmlSerializer" />ã</summary>
      <param name="type">å°ä½¿ç¨ <paramref name="serializer" /> è¿è¡åºååæååºååçå¯¹è±¡çç±»åã</param>
      <param name="serializer">
        <see cref="T:System.Xml.Serialization.XmlSerializer" /> å®ä¾ã</param>
    </member>
    <member name="M:System.Net.Http.Formatting.XmlMediaTypeFormatter.SetSerializer``1(System.Xml.Serialization.XmlSerializer)">
      <summary>æ³¨åç¨äºè¯»åæåå¥æå®ç±»åå¯¹è±¡ç <see cref="T:System.Xml.Serialization.XmlSerializer" />ã</summary>
      <param name="serializer">
        <see cref="T:System.Xml.Serialization.XmlSerializer" /> å®ä¾ã</param>
      <typeparam name="T">å°ä½¿ç¨ <paramref name="serializer" /> è¿è¡åºååæååºååçå¯¹è±¡çç±»åã</typeparam>
    </member>
    <member name="P:System.Net.Http.Formatting.XmlMediaTypeFormatter.UseXmlSerializer">
      <summary>è·åæè®¾ç½®ä¸ä¸ªå¼ï¼è¯¥å¼æç¤º XML æ ¼å¼åç¨åºæ¯å¦å° <see cref="T:System.Xml.Serialization.XmlSerializer" /> èé <see cref="T:System.Runtime.Serialization.DataContractSerializer" /> ç¨ä½é»è®¤åºååç¨åºã</summary>
      <returns>å¦æä¸º trueï¼åè¯¥æ ¼å¼åç¨åºé»è®¤ä½¿ç¨ <see cref="T:System.Xml.Serialization.XmlSerializer" />ï¼å¦åé»è®¤ä½¿ç¨ <see cref="T:System.Runtime.Serialization.DataContractSerializer" />ã</returns>
    </member>
    <member name="M:System.Net.Http.Formatting.XmlMediaTypeFormatter.WriteToStreamAsync(System.Type,System.Object,System.IO.Stream,System.Net.Http.HttpContent,System.Net.TransportContext)">
      <summary> å¨åºååæé´è°ç¨ï¼ç¨äºå°æå® type çå¯¹è±¡åå¥æå® writeStreamã</summary>
      <returns>ä¸ä¸ªå°å¼åå¥æµç <see cref="T:System.Threading.Tasks.Task" />ã</returns>
      <param name="type">è¦åå¥çå¯¹è±¡çç±»åã</param>
      <param name="value">è¦åå¥çå¯¹è±¡ã</param>
      <param name="writeStream">è¦åå¥å°ç <see cref="T:System.IO.Stream" />ã</param>
      <param name="content">è¦åå¥çåå®¹ç <see cref="T:System.Net.Http.HttpContent" />ã</param>
      <param name="transportContext">
        <see cref="T:System.Net.TransportContext" />ã</param>
    </member>
    <member name="T:System.Net.Http.Handlers.HttpProgressEventArgs">
      <summary>è¡¨ç¤º HTTP è¿åº¦çäºä»¶åæ°ã</summary>
    </member>
    <member name="M:System.Net.Http.Handlers.HttpProgressEventArgs.#ctor(System.Int32,System.Object,System.Int32,System.Nullable{System.Int64})">
      <summary>åå§å <see cref="T:System.Net.Http.Handlers.HttpProgressEventArgs" /> ç±»çæ°å®ä¾ã</summary>
      <param name="progressPercentage">è¿åº¦ç¾åæ¯ã</param>
      <param name="userToken">ç¨æ·ä»¤çã</param>
      <param name="bytesTransferred">ä¼ è¾çå­èæ°ã</param>
      <param name="totalBytes">ä¼ è¾çå­èæ»æ°ã</param>
    </member>
    <member name="P:System.Net.Http.Handlers.HttpProgressEventArgs.BytesTransferred">
      <summary>è·åå¨ HTTP è¿åº¦ä¸­ä¼ è¾çå­èæ°ã</summary>
      <returns>å¨ HTTP è¿åº¦ä¸­ä¼ è¾çå­èæ°ã</returns>
    </member>
    <member name="P:System.Net.Http.Handlers.HttpProgressEventArgs.TotalBytes">
      <summary>è·åç± HTTP è¿åº¦ä¼ è¾çå­èæ»æ°ã</summary>
      <returns>ç± HTTP è¿åº¦ä¼ è¾çå­èæ»æ°ã</returns>
    </member>
    <member name="T:System.Net.Http.Handlers.ProgressMessageHandler">
      <summary>ä¸ºæ­£å¨ä¸è½½çè¯·æ±å®ä½åæ­£å¨ä¸è½½çååºå®ä½çæè¿åº¦éç¥ã</summary>
    </member>
    <member name="M:System.Net.Http.Handlers.ProgressMessageHandler.#ctor">
      <summary>åå§å <see cref="T:System.Net.Http.Handlers.ProgressMessageHandler" /> ç±»çæ°å®ä¾ã</summary>
    </member>
    <member name="M:System.Net.Http.Handlers.ProgressMessageHandler.#ctor(System.Net.Http.HttpMessageHandler)">
      <summary>åå§å <see cref="T:System.Net.Http.Handlers.ProgressMessageHandler" /> ç±»çæ°å®ä¾ã</summary>
      <param name="innerHandler">åé¨æ¶æ¯å¤çç¨åºã</param>
    </member>
    <member name="E:System.Net.Http.Handlers.ProgressMessageHandler.HttpReceiveProgress">
      <summary>æ­£å¨ä¸è½½äºä»¶å®ä½æ¶åçã</summary>
    </member>
    <member name="E:System.Net.Http.Handlers.ProgressMessageHandler.HttpSendProgress">
      <summary>æ­£å¨ä¸è½½äºä»¶å®ä½æ¶åçã</summary>
    </member>
    <member name="M:System.Net.Http.Handlers.ProgressMessageHandler.OnHttpRequestProgress(System.Net.Http.HttpRequestMessage,System.Net.Http.Handlers.HttpProgressEventArgs)">
      <summary>å¼åå¤çè¿åº¦è¯·æ±çäºä»¶ã</summary>
      <param name="request">è¯·æ±ã</param>
      <param name="e">è¯·æ±çäºä»¶å¤çç¨åºã</param>
    </member>
    <member name="M:System.Net.Http.Handlers.ProgressMessageHandler.OnHttpResponseProgress(System.Net.Http.HttpRequestMessage,System.Net.Http.Handlers.HttpProgressEventArgs)">
      <summary>å¼åå¤çè¿åº¦ååºçäºä»¶ã</summary>
      <param name="request">è¯·æ±ã</param>
      <param name="e">è¯·æ±çäºä»¶å¤çç¨åºã</param>
    </member>
    <member name="M:System.Net.Http.Handlers.ProgressMessageHandler.SendAsync(System.Net.Http.HttpRequestMessage,System.Threading.CancellationToken)">
      <summary>å°æå®çè¿åº¦æ¶æ¯åéå°è¿è¡ä¼ éç HTTP æå¡å¨ã</summary>
      <returns>å·²åéçè¿åº¦æ¶æ¯ã</returns>
      <param name="request">è¯·æ±ã</param>
      <param name="cancellationToken">åæ¶æ è®°ã</param>
    </member>
    <member name="T:System.Net.Http.Headers.CookieHeaderValue">
      <summary>ä¸º Cookie æ å¤´æä¾å¼ã</summary>
    </member>
    <member name="M:System.Net.Http.Headers.CookieHeaderValue.#ctor">
      <summary>åå§å <see cref="T:System.Net.Http.Headers.CookieHeaderValue" /> ç±»çæ°å®ä¾ã</summary>
    </member>
    <member name="M:System.Net.Http.Headers.CookieHeaderValue.#ctor(System.String,System.Collections.Specialized.NameValueCollection)">
      <summary>åå§å <see cref="T:System.Net.Http.Headers.CookieHeaderValue" /> ç±»çæ°å®ä¾ã</summary>
      <param name="name">åç§°çå¼ã</param>
      <param name="values">å¼ã</param>
    </member>
    <member name="M:System.Net.Http.Headers.CookieHeaderValue.#ctor(System.String,System.String)">
      <summary>åå§å <see cref="T:System.Net.Http.Headers.CookieHeaderValue" /> ç±»çæ°å®ä¾ã</summary>
      <param name="name">åç§°çå¼ã</param>
      <param name="value">å¼ã</param>
    </member>
    <member name="M:System.Net.Http.Headers.CookieHeaderValue.Clone">
      <summary>åå»º Cookie å¼çå·å½±å¯æ¬ã</summary>
      <returns>Cookie å¼çå·å½±å¯æ¬ã</returns>
    </member>
    <member name="P:System.Net.Http.Headers.CookieHeaderValue.Cookies">
      <summary>è·åå®¢æ·ç«¯åéç Cookie çéåã</summary>
      <returns>ç¨äºè¡¨ç¤ºå®¢æ·ç«¯ç Cookie åéçéåå¯¹è±¡ã</returns>
    </member>
    <member name="P:System.Net.Http.Headers.CookieHeaderValue.Domain">
      <summary>è·åæè®¾ç½®è¦ä¸ Cookie å³èçåã</summary>
      <returns>è¦ä¸ Cookie å³èçåçåç§°ã</returns>
    </member>
    <member name="P:System.Net.Http.Headers.CookieHeaderValue.Expires">
      <summary>è·åæè®¾ç½® Cookie çå°ææ¥æåæ¶é´ã</summary>
      <returns>Cookie çå°ææ¥æ¶é´ï¼å®¢æ·ç«¯ä¸ï¼ã</returns>
    </member>
    <member name="P:System.Net.Http.Headers.CookieHeaderValue.HttpOnly">
      <summary>è·åæè®¾ç½®ä¸ä¸ªå¼ï¼è¯¥å¼æå®æ¯å¦å¯éè¿å®¢æ·ç«¯èæ¬è®¿é® Cookieã</summary>
      <returns>å¦æ Cookie å·æ HttpOnly ç¹æ§å¹¶ä¸ä¸è½éè¿å®¢æ·ç«¯èæ¬è®¿é®ï¼åä¸º trueï¼å¦åä¸º falseã</returns>
    </member>
    <member name="P:System.Net.Http.Headers.CookieHeaderValue.Item(System.String)">
      <summary>è·å Cookie å±æ§çå¿«æ·æ¹å¼ã</summary>
      <returns>Cookie å¼ã</returns>
    </member>
    <member name="P:System.Net.Http.Headers.CookieHeaderValue.MaxAge">
      <summary>è·åæè®¾ç½®èµæºæåè®¸ä¿ççæé¿å¹´éã</summary>
      <returns>èµæºæåè®¸ä¿ççæé¿å¹´éã</returns>
    </member>
    <member name="P:System.Net.Http.Headers.CookieHeaderValue.Path">
      <summary>è·åæè®¾ç½®è¦ä½¿ç¨å½å Cookie ä¼ è¾çèæè·¯å¾ã</summary>
      <returns>è¦ä½¿ç¨ Cookie ä¼ è¾çèæè·¯å¾ã</returns>
    </member>
    <member name="P:System.Net.Http.Headers.CookieHeaderValue.Secure">
      <summary>è·åæè®¾ç½®ä¸ä¸ªå¼ï¼è¯¥å¼æç¤ºæ¯å¦è¦ä½¿ç¨å®å¨å¥æ¥å­å± (SSL)ï¼å³ä»éè¿ HTTPSï¼ä¼ è¾ Cookieã</summary>
      <returns>è¥è¦éè¿ SSL è¿æ¥ (HTTPS) ä¼ è¾ Cookieï¼åä¸º trueï¼å¦åä¸º falseã</returns>
    </member>
    <member name="M:System.Net.Http.Headers.CookieHeaderValue.ToString">
      <summary>è¿åè¡¨ç¤ºå½åå¯¹è±¡çå­ç¬¦ä¸²ã</summary>
      <returns>è¡¨ç¤ºå½åå¯¹è±¡çå­ç¬¦ä¸²ã</returns>
    </member>
    <member name="M:System.Net.Http.Headers.CookieHeaderValue.TryParse(System.String,System.Net.Http.Headers.CookieHeaderValue@)">
      <summary>æç¤ºä¸ä¸ªå¼ï¼è¯¥å¼è¡¨ç¤ºæ¯å¦å°è½¬æ¢å­ç¬¦ä¸²è¡¨ç¤ºå½¢å¼ã</summary>
      <returns>å¦æå°è½¬æ¢å­ç¬¦ä¸²è¡¨ç¤ºå½¢å¼ï¼åä¸º trueï¼å¦åä¸º falseã</returns>
      <param name="input">è¾å¥å¼ã</param>
      <param name="parsedValue">è¦è½¬æ¢çåæå¼ã</param>
    </member>
    <member name="T:System.Net.Http.Headers.CookieState">
      <summary>åå« Cookie åç§°åå¶å³èç Cookie ç¶æã</summary>
    </member>
    <member name="M:System.Net.Http.Headers.CookieState.#ctor(System.String)">
      <summary>åå§å <see cref="T:System.Net.Http.Headers.CookieState" /> ç±»çæ°å®ä¾ã</summary>
      <param name="name">Cookie çåç§°ã</param>
    </member>
    <member name="M:System.Net.Http.Headers.CookieState.#ctor(System.String,System.Collections.Specialized.NameValueCollection)">
      <summary>åå§å <see cref="T:System.Net.Http.Headers.CookieState" /> ç±»çæ°å®ä¾ã</summary>
      <param name="name">Cookie çåç§°ã</param>
      <param name="values">Cookie çåç§°/å¼å¯¹çéåã</param>
    </member>
    <member name="M:System.Net.Http.Headers.CookieState.#ctor(System.String,System.String)">
      <summary>åå§å <see cref="T:System.Net.Http.Headers.CookieState" /> ç±»çæ°å®ä¾ã</summary>
      <param name="name">Cookie çåç§°ã</param>
      <param name="value">Cookie çå¼ã</param>
    </member>
    <member name="M:System.Net.Http.Headers.CookieState.Clone">
      <summary>è¿åä¸ä¸ªæ°å¯¹è±¡ï¼è¯¥å¯¹è±¡æ¯å½åå®ä¾çå¯æ¬ã</summary>
      <returns>ä¸ä¸ªæ°å¯¹è±¡ï¼è¯¥å¯¹è±¡æ¯å½åå®ä¾çå¯æ¬ã</returns>
    </member>
    <member name="P:System.Net.Http.Headers.CookieState.Item(System.String)">
      <summary>è·åæè®¾ç½®å·ææå® Cookie åç§°ç Cookie å¼ï¼å¦æ Cookie æ°æ®å·²ç»æåï¼ã</summary>
      <returns>å·ææå® Cookie åç§°ç Cookie å¼ã</returns>
    </member>
    <member name="P:System.Net.Http.Headers.CookieState.Name">
      <summary>è·åæè®¾ç½® Cookie çåç§°ã</summary>
      <returns>Cookie çåç§°ã</returns>
    </member>
    <member name="M:System.Net.Http.Headers.CookieState.ToString">
      <summary>è¿åå½åå¯¹è±¡çå­ç¬¦ä¸²è¡¨ç¤ºå½¢å¼ã</summary>
      <returns>å½åå¯¹è±¡çå­ç¬¦ä¸²è¡¨ç¤ºå½¢å¼ã</returns>
    </member>
    <member name="P:System.Net.Http.Headers.CookieState.Value">
      <summary>è·åæè®¾ç½® Cookie å¼ï¼å¦æ Cookie æ°æ®æ¯ä¸ä¸ªç®åçå­ç¬¦ä¸²å¼ï¼ã</summary>
      <returns>Cookie çå¼ã</returns>
    </member>
    <member name="P:System.Net.Http.Headers.CookieState.Values">
      <summary>è·åæè®¾ç½®åç§°/å¼å¯¹çéåï¼å¦æ Cookie æ°æ®å·²ç»æåï¼ã</summary>
      <returns>Cookie çåç§°/å¼å¯¹çéåã</returns>
    </member>
  </members>
>>>>>>> 0daec768afcc757c83c424118f28374d34e3dc64
</doc>