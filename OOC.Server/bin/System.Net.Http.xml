<<<<<<< HEAD
ï»¿<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>System.Net.Http</name>
  </assembly>
  <members>
    <member name="T:System.Net.Http.ByteArrayContent">
      <summary>Provides HTTP content based on a byte array.</summary>
    </member>
    <member name="M:System.Net.Http.ByteArrayContent.#ctor(System.Byte[])">
      <summary>Initializes a new instance of the <see cref="T:System.Net.Http.ByteArrayContent" /> class.</summary>
      <param name="content">The content used to initialize the <see cref="T:System.Net.Http.ByteArrayContent" />.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="content" /> parameter is null. </exception>
    </member>
    <member name="M:System.Net.Http.ByteArrayContent.#ctor(System.Byte[],System.Int32,System.Int32)">
      <summary>Initializes a new instance of the <see cref="T:System.Net.Http.ByteArrayContent" /> class.</summary>
      <param name="content">The content used to initialize the <see cref="T:System.Net.Http.ByteArrayContent" />.</param>
      <param name="offset">The offset, in bytes, in the <paramref name="content" />  parameter used to initialize the <see cref="T:System.Net.Http.ByteArrayContent" />.</param>
      <param name="count">The number of bytes in the <paramref name="content" /> starting from the <paramref name="offset" /> parameter used to initialize the <see cref="T:System.Net.Http.ByteArrayContent" />.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="content" /> parameter is null. </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="offset" /> parameter is less than zero.-or-The <paramref name="offset" /> parameter is greater than the length of content specified by the <paramref name="content" /> parameter.-or-The <paramref name="count " /> parameter is less than zero.-or-The <paramref name="count" /> parameter is greater than the length of content specified by the <paramref name="content" /> parameter - minus the <paramref name="offset" /> parameter.</exception>
    </member>
    <member name="M:System.Net.Http.ByteArrayContent.CreateContentReadStreamAsync">
      <summary>Creates an HTTP content stream as an asynchronous operation for reading whose backing store is memory from the <see cref="T:System.Net.Http.ByteArrayContent" />.</summary>
      <returns>Returns <see cref="T:System.Threading.Tasks.Task`1" />.The task object representing the asynchronous operation.</returns>
    </member>
    <member name="M:System.Net.Http.ByteArrayContent.SerializeToStreamAsync(System.IO.Stream,System.Net.TransportContext)">
      <summary>Serialize and write the byte array provided in the constructor to an HTTP content stream as an asynchronous operation.</summary>
      <returns>Returns <see cref="T:System.Threading.Tasks.Task" />. The task object representing the asynchronous operation.</returns>
      <param name="stream">The target stream.</param>
      <param name="context">Information about the transport, like channel binding token. This parameter may be null.</param>
    </member>
    <member name="M:System.Net.Http.ByteArrayContent.TryComputeLength(System.Int64@)">
      <summary>Determines whether a byte array has a valid length in bytes.</summary>
      <returns>Returns <see cref="T:System.Boolean" />.true if <paramref name="length" /> is a valid length; otherwise, false.</returns>
      <param name="length">The length in bytes of the byte array.</param>
    </member>
    <member name="T:System.Net.Http.ClientCertificateOption">
      <summary>Specifies how client certificates are provided.</summary>
    </member>
    <member name="F:System.Net.Http.ClientCertificateOption.Manual">
      <summary>The application manually provides the client certificates to the <see cref="T:System.Net.Http.WebRequestHandler" />. This value is the default. </summary>
    </member>
    <member name="F:System.Net.Http.ClientCertificateOption.Automatic">
      <summary>The <see cref="T:System.Net.Http.HttpClientHandler" /> will attempt to provide  all available client certificates  automatically.</summary>
    </member>
    <member name="T:System.Net.Http.DelegatingHandler">
      <summary>A base type for HTTP handlers that delegate the processing of HTTP response messages to another handler, called the inner handler.</summary>
    </member>
    <member name="M:System.Net.Http.DelegatingHandler.#ctor">
      <summary>Creates a new instance of the <see cref="T:System.Net.Http.DelegatingHandler" /> class.</summary>
    </member>
    <member name="M:System.Net.Http.DelegatingHandler.#ctor(System.Net.Http.HttpMessageHandler)">
      <summary>Creates a new instance of the <see cref="T:System.Net.Http.DelegatingHandler" /> class with a specific inner handler.</summary>
      <param name="innerHandler">The inner handler which is responsible for processing the HTTP response messages.</param>
    </member>
    <member name="M:System.Net.Http.DelegatingHandler.Dispose(System.Boolean)">
      <summary>Releases the unmanaged resources used by the <see cref="T:System.Net.Http.DelegatingHandler" />, and optionally disposes of the managed resources.</summary>
      <param name="disposing">true to release both managed and unmanaged resources; false to releases only unmanaged resources. </param>
    </member>
    <member name="P:System.Net.Http.DelegatingHandler.InnerHandler">
      <summary>Gets or sets the inner handler which processes the HTTP response messages.</summary>
      <returns>Returns <see cref="T:System.Net.Http.HttpMessageHandler" />.The inner handler for HTTP response messages.</returns>
    </member>
    <member name="M:System.Net.Http.DelegatingHandler.SendAsync(System.Net.Http.HttpRequestMessage,System.Threading.CancellationToken)">
      <summary>Sends an HTTP request to the inner handler to send to the server as an asynchronous operation.</summary>
      <returns>Returns <see cref="T:System.Threading.Tasks.Task`1" />. The task object representing the asynchronous operation.</returns>
      <param name="request">The HTTP request message to send to the server.</param>
      <param name="cancellationToken">A cancellation token to cancel operation.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="request" /> was null.</exception>
    </member>
    <member name="T:System.Net.Http.FormUrlEncodedContent">
      <summary>A container for name/value tuples encoded using application/x-www-form-urlencoded MIME type.</summary>
    </member>
    <member name="M:System.Net.Http.FormUrlEncodedContent.#ctor(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.String}})">
      <summary>Initializes a new instance of the <see cref="T:System.Net.Http.FormUrlEncodedContent" /> class with a specific collection of name/value pairs.</summary>
      <param name="nameValueCollection">A collection of name/value pairs.</param>
    </member>
    <member name="T:System.Net.Http.HttpClient">
      <summary>Provides a base class for sending HTTP requests and receiving HTTP responses from a resource identified by a URI. </summary>
    </member>
    <member name="M:System.Net.Http.HttpClient.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Net.Http.HttpClient" /> class.</summary>
    </member>
    <member name="M:System.Net.Http.HttpClient.#ctor(System.Net.Http.HttpMessageHandler)">
      <summary>Initializes a new instance of the <see cref="T:System.Net.Http.HttpClient" /> class with a specific handler.</summary>
      <param name="handler">The HTTP handler stack to use for sending requests. </param>
    </member>
    <member name="M:System.Net.Http.HttpClient.#ctor(System.Net.Http.HttpMessageHandler,System.Boolean)">
      <summary>Initializes a new instance of the <see cref="T:System.Net.Http.HttpClient" /> class with a specific handler.</summary>
      <param name="handler">The <see cref="T:System.Net.Http.HttpMessageHandler" /> responsible for processing the HTTP response messages.</param>
      <param name="disposeHandler">true if the inner handler should be disposed of by Dispose(),false if you intend to reuse the inner handler.</param>
    </member>
    <member name="P:System.Net.Http.HttpClient.BaseAddress">
      <summary>Gets or sets the base address of Uniform Resource Identifier (URI) of the Internet resource used when sending requests.</summary>
      <returns>Returns <see cref="T:System.Uri" />.The base address of Uniform Resource Identifier (URI) of the Internet resource used when sending requests.</returns>
    </member>
    <member name="M:System.Net.Http.HttpClient.CancelPendingRequests">
      <summary>Cancel all pending requests on this instance.</summary>
    </member>
    <member name="P:System.Net.Http.HttpClient.DefaultRequestHeaders">
      <summary>Gets the headers which should be sent with each request.</summary>
      <returns>Returns <see cref="T:System.Net.Http.Headers.HttpRequestHeaders" />.The headers which should be sent with each request.</returns>
    </member>
    <member name="M:System.Net.Http.HttpClient.DeleteAsync(System.String)">
      <summary>Send a DELETE request to the specified Uri as an asynchronous operation.</summary>
      <returns>Returns <see cref="T:System.Threading.Tasks.Task`1" />.The task object representing the asynchronous operation.</returns>
      <param name="requestUri">The Uri the request is sent to.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="requestUri" /> was null.</exception>
    </member>
    <member name="M:System.Net.Http.HttpClient.DeleteAsync(System.String,System.Threading.CancellationToken)">
      <summary>Send a DELETE request to the specified Uri with a cancellation token as an asynchronous operation.</summary>
      <returns>Returns <see cref="T:System.Threading.Tasks.Task`1" />.The task object representing the asynchronous operation.</returns>
      <param name="requestUri">The Uri the request is sent to.</param>
      <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="requestUri" /> was null.</exception>
    </member>
    <member name="M:System.Net.Http.HttpClient.DeleteAsync(System.Uri)">
      <summary>Send a DELETE request to the specified Uri as an asynchronous operation.</summary>
      <returns>Returns <see cref="T:System.Threading.Tasks.Task`1" />.The task object representing the asynchronous operation.</returns>
      <param name="requestUri">The Uri the request is sent to.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="requestUri" /> was null.</exception>
    </member>
    <member name="M:System.Net.Http.HttpClient.DeleteAsync(System.Uri,System.Threading.CancellationToken)">
      <summary>Send a DELETE request to the specified Uri with a cancellation token as an asynchronous operation.</summary>
      <returns>Returns <see cref="T:System.Threading.Tasks.Task`1" />.The task object representing the asynchronous operation.</returns>
      <param name="requestUri">The Uri the request is sent to.</param>
      <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="requestUri" /> was null.</exception>
    </member>
    <member name="M:System.Net.Http.HttpClient.Dispose(System.Boolean)">
      <summary>Releases the unmanaged resources used by the <see cref="T:System.Net.Http.HttpClient" /> and optionally disposes of the managed resources.</summary>
      <param name="disposing">true to release both managed and unmanaged resources; false to releases only unmanaged resources.</param>
    </member>
    <member name="M:System.Net.Http.HttpClient.GetAsync(System.String)">
      <summary>Send a GET request to the specified Uri as an asynchronous operation.</summary>
      <returns>Returns <see cref="T:System.Threading.Tasks.Task`1" />.The task object representing the asynchronous operation.</returns>
      <param name="requestUri">The Uri the request is sent to.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="requestUri" /> was null.</exception>
    </member>
    <member name="M:System.Net.Http.HttpClient.GetAsync(System.String,System.Net.Http.HttpCompletionOption)">
      <summary>Send a GET request to the specified Uri with an HTTP completion option as an asynchronous operation.</summary>
      <returns>Returns <see cref="T:System.Threading.Tasks.Task`1" />.</returns>
      <param name="requestUri">The Uri the request is sent to.</param>
      <param name="completionOption">An HTTP completion option value that indicates when the operation should be considered completed.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="requestUri" /> was null.</exception>
    </member>
    <member name="M:System.Net.Http.HttpClient.GetAsync(System.String,System.Net.Http.HttpCompletionOption,System.Threading.CancellationToken)">
      <summary>Send a GET request to the specified Uri with an HTTP completion option and a cancellation token as an asynchronous operation.</summary>
      <returns>Returns <see cref="T:System.Threading.Tasks.Task`1" />.</returns>
      <param name="requestUri">The Uri the request is sent to.</param>
      <param name="completionOption">An HTTP  completion option value that indicates when the operation should be considered completed.</param>
      <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="requestUri" /> was null.</exception>
    </member>
    <member name="M:System.Net.Http.HttpClient.GetAsync(System.String,System.Threading.CancellationToken)">
      <summary>Send a GET request to the specified Uri with a cancellation token as an asynchronous operation.</summary>
      <returns>Returns <see cref="T:System.Threading.Tasks.Task`1" />.</returns>
      <param name="requestUri">The Uri the request is sent to.</param>
      <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="requestUri" /> was null.</exception>
    </member>
    <member name="M:System.Net.Http.HttpClient.GetAsync(System.Uri)">
      <summary>Send a GET request to the specified Uri as an asynchronous operation.</summary>
      <returns>Returns <see cref="T:System.Threading.Tasks.Task`1" />.The task object representing the asynchronous operation.</returns>
      <param name="requestUri">The Uri the request is sent to.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="requestUri" /> was null.</exception>
    </member>
    <member name="M:System.Net.Http.HttpClient.GetAsync(System.Uri,System.Net.Http.HttpCompletionOption)">
      <summary>Send a GET request to the specified Uri with an HTTP completion option as an asynchronous operation.</summary>
      <returns>Returns <see cref="T:System.Threading.Tasks.Task`1" />.The task object representing the asynchronous operation.</returns>
      <param name="requestUri">The Uri the request is sent to.</param>
      <param name="completionOption">An HTTP  completion option value that indicates when the operation should be considered completed.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="requestUri" /> was null.</exception>
    </member>
    <member name="M:System.Net.Http.HttpClient.GetAsync(System.Uri,System.Net.Http.HttpCompletionOption,System.Threading.CancellationToken)">
      <summary>Send a GET request to the specified Uri with an HTTP completion option and a cancellation token as an asynchronous operation.</summary>
      <returns>Returns <see cref="T:System.Threading.Tasks.Task`1" />.The task object representing the asynchronous operation.</returns>
      <param name="requestUri">The Uri the request is sent to.</param>
      <param name="completionOption">An HTTP  completion option value that indicates when the operation should be considered completed.</param>
      <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="requestUri" /> was null.</exception>
    </member>
    <member name="M:System.Net.Http.HttpClient.GetAsync(System.Uri,System.Threading.CancellationToken)">
      <summary>Send a GET request to the specified Uri with a cancellation token as an asynchronous operation.</summary>
      <returns>Returns <see cref="T:System.Threading.Tasks.Task`1" />.The task object representing the asynchronous operation.</returns>
      <param name="requestUri">The Uri the request is sent to.</param>
      <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="requestUri" /> was null.</exception>
    </member>
    <member name="M:System.Net.Http.HttpClient.GetByteArrayAsync(System.String)">
      <summary>Send a GET request to the specified Uri and return the response body as a byte array in an asynchronous operation.</summary>
      <returns>Returns <see cref="T:System.Threading.Tasks.Task`1" />.The task object representing the asynchronous operation.</returns>
      <param name="requestUri">The Uri the request is sent to.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="requestUri" /> was null.</exception>
    </member>
    <member name="M:System.Net.Http.HttpClient.GetByteArrayAsync(System.Uri)">
      <summary>Send a GET request to the specified Uri and return the response body as a byte array in an asynchronous operation.</summary>
      <returns>Returns <see cref="T:System.Threading.Tasks.Task`1" />.The task object representing the asynchronous operation.</returns>
      <param name="requestUri">The Uri the request is sent to.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="requestUri" /> was null.</exception>
    </member>
    <member name="M:System.Net.Http.HttpClient.GetStreamAsync(System.String)">
      <summary>Send a GET request to the specified Uri and return the response body as a stream in an asynchronous operation.</summary>
      <returns>Returns <see cref="T:System.Threading.Tasks.Task`1" />.The task object representing the asynchronous operation.</returns>
      <param name="requestUri">The Uri the request is sent to.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="requestUri" /> was null.</exception>
    </member>
    <member name="M:System.Net.Http.HttpClient.GetStreamAsync(System.Uri)">
      <summary>Send a GET request to the specified Uri and return the response body as a stream in an asynchronous operation.</summary>
      <returns>Returns <see cref="T:System.Threading.Tasks.Task`1" />.The task object representing the asynchronous operation.</returns>
      <param name="requestUri">The Uri the request is sent to.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="requestUri" /> was null.</exception>
    </member>
    <member name="M:System.Net.Http.HttpClient.GetStringAsync(System.String)">
      <summary>Send a GET request to the specified Uri and return the response body as a string in an asynchronous operation.</summary>
      <returns>Returns <see cref="T:System.Threading.Tasks.Task`1" />.The task object representing the asynchronous operation.</returns>
      <param name="requestUri">The Uri the request is sent to.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="requestUri" /> was null.</exception>
    </member>
    <member name="M:System.Net.Http.HttpClient.GetStringAsync(System.Uri)">
      <summary>Send a GET request to the specified Uri and return the response body as a string in an asynchronous operation.</summary>
      <returns>Returns <see cref="T:System.Threading.Tasks.Task`1" />.The task object representing the asynchronous operation.</returns>
      <param name="requestUri">The Uri the request is sent to.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="requestUri" /> was null.</exception>
    </member>
    <member name="P:System.Net.Http.HttpClient.MaxResponseContentBufferSize">
      <summary>Gets or sets the maximum number of bytes to buffer when reading the response content.</summary>
      <returns>Returns <see cref="T:System.Int32" />.The maximum number of bytes to buffer when reading the response content. The default value for this property is 64K.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">The size specified is less than or equal to zero.</exception>
      <exception cref="T:System.InvalidOperationException">An operation has already been started on the current instance. </exception>
      <exception cref="T:System.ObjectDisposedException">The current instance has been disposed. </exception>
    </member>
    <member name="M:System.Net.Http.HttpClient.PostAsync(System.String,System.Net.Http.HttpContent)">
      <summary>Send a POST request to the specified Uri as an asynchronous operation.</summary>
      <returns>Returns <see cref="T:System.Threading.Tasks.Task`1" />.The task object representing the asynchronous operation.</returns>
      <param name="requestUri">The Uri the request is sent to.</param>
      <param name="content">The HTTP request content sent to the server.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="requestUri" /> was null.</exception>
    </member>
    <member name="M:System.Net.Http.HttpClient.PostAsync(System.String,System.Net.Http.HttpContent,System.Threading.CancellationToken)">
      <summary>Send a POST request with a cancellation token as an asynchronous operation.</summary>
      <returns>Returns <see cref="T:System.Threading.Tasks.Task`1" />.The task object representing the asynchronous operation.</returns>
      <param name="requestUri">The Uri the request is sent to.</param>
      <param name="content">The HTTP request content sent to the server.</param>
      <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="requestUri" /> was null.</exception>
    </member>
    <member name="M:System.Net.Http.HttpClient.PostAsync(System.Uri,System.Net.Http.HttpContent)">
      <summary>Send a POST request to the specified Uri as an asynchronous operation.</summary>
      <returns>Returns <see cref="T:System.Threading.Tasks.Task`1" />.The task object representing the asynchronous operation.</returns>
      <param name="requestUri">The Uri the request is sent to.</param>
      <param name="content">The HTTP request content sent to the server.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="requestUri" /> was null.</exception>
    </member>
    <member name="M:System.Net.Http.HttpClient.PostAsync(System.Uri,System.Net.Http.HttpContent,System.Threading.CancellationToken)">
      <summary>Send a POST request with a cancellation token as an asynchronous operation.</summary>
      <returns>Returns <see cref="T:System.Threading.Tasks.Task`1" />.The task object representing the asynchronous operation.</returns>
      <param name="requestUri">The Uri the request is sent to.</param>
      <param name="content">The HTTP request content sent to the server.</param>
      <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="requestUri" /> was null.</exception>
    </member>
    <member name="M:System.Net.Http.HttpClient.PutAsync(System.String,System.Net.Http.HttpContent)">
      <summary>Send a PUT request to the specified Uri as an asynchronous operation.</summary>
      <returns>Returns <see cref="T:System.Threading.Tasks.Task`1" />.The task object representing the asynchronous operation.</returns>
      <param name="requestUri">The Uri the request is sent to.</param>
      <param name="content">The HTTP request content sent to the server.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="requestUri" /> was null.</exception>
    </member>
    <member name="M:System.Net.Http.HttpClient.PutAsync(System.String,System.Net.Http.HttpContent,System.Threading.CancellationToken)">
      <summary>Send a PUT request with a cancellation token as an asynchronous operation.</summary>
      <returns>Returns <see cref="T:System.Threading.Tasks.Task`1" />.The task object representing the asynchronous operation.</returns>
      <param name="requestUri">The Uri the request is sent to.</param>
      <param name="content">The HTTP request content sent to the server.</param>
      <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="requestUri" /> was null.</exception>
    </member>
    <member name="M:System.Net.Http.HttpClient.PutAsync(System.Uri,System.Net.Http.HttpContent)">
      <summary>Send a PUT request to the specified Uri as an asynchronous operation.</summary>
      <returns>Returns <see cref="T:System.Threading.Tasks.Task`1" />.The task object representing the asynchronous operation.</returns>
      <param name="requestUri">The Uri the request is sent to.</param>
      <param name="content">The HTTP request content sent to the server.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="requestUri" /> was null.</exception>
    </member>
    <member name="M:System.Net.Http.HttpClient.PutAsync(System.Uri,System.Net.Http.HttpContent,System.Threading.CancellationToken)">
      <summary>Send a PUT request with a cancellation token as an asynchronous operation.</summary>
      <returns>Returns <see cref="T:System.Threading.Tasks.Task`1" />.The task object representing the asynchronous operation.</returns>
      <param name="requestUri">The Uri the request is sent to.</param>
      <param name="content">The HTTP request content sent to the server.</param>
      <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="requestUri" /> was null.</exception>
    </member>
    <member name="M:System.Net.Http.HttpClient.SendAsync(System.Net.Http.HttpRequestMessage)">
      <summary>Send an HTTP request as an asynchronous operation.</summary>
      <returns>Returns <see cref="T:System.Threading.Tasks.Task`1" />.The task object representing the asynchronous operation.</returns>
      <param name="request">The HTTP request message to send.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="request" /> was null.</exception>
      <exception cref="T:System.InvalidOperationException">The request message was already sent by the <see cref="T:System.Net.Http.HttpClient" /> instance.</exception>
    </member>
    <member name="M:System.Net.Http.HttpClient.SendAsync(System.Net.Http.HttpRequestMessage,System.Net.Http.HttpCompletionOption)">
      <summary>Send an HTTP request as an asynchronous operation. </summary>
      <returns>Returns <see cref="T:System.Threading.Tasks.Task`1" />.The task object representing the asynchronous operation.</returns>
      <param name="request">The HTTP request message to send.</param>
      <param name="completionOption">When the operation should complete (as soon as a response is available or after reading the whole response content).</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="request" /> was null.</exception>
      <exception cref="T:System.InvalidOperationException">The request message was already sent by the <see cref="T:System.Net.Http.HttpClient" /> instance.</exception>
    </member>
    <member name="M:System.Net.Http.HttpClient.SendAsync(System.Net.Http.HttpRequestMessage,System.Net.Http.HttpCompletionOption,System.Threading.CancellationToken)">
      <summary>Send an HTTP request as an asynchronous operation.</summary>
      <returns>Returns <see cref="T:System.Threading.Tasks.Task`1" />.The task object representing the asynchronous operation.</returns>
      <param name="request">The HTTP request message to send.</param>
      <param name="completionOption">When the operation should complete (as soon as a response is available or after reading the whole response content).</param>
      <param name="cancellationToken">The cancellation token to cancel operation.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="request" /> was null.</exception>
      <exception cref="T:System.InvalidOperationException">The request message was already sent by the <see cref="T:System.Net.Http.HttpClient" /> instance.</exception>
    </member>
    <member name="M:System.Net.Http.HttpClient.SendAsync(System.Net.Http.HttpRequestMessage,System.Threading.CancellationToken)">
      <summary>Send an HTTP request as an asynchronous operation.</summary>
      <returns>Returns <see cref="T:System.Threading.Tasks.Task`1" />.The task object representing the asynchronous operation.</returns>
      <param name="request">The HTTP request message to send.</param>
      <param name="cancellationToken">The cancellation token to cancel operation.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="request" /> was null.</exception>
      <exception cref="T:System.InvalidOperationException">The request message was already sent by the <see cref="T:System.Net.Http.HttpClient" /> instance.</exception>
    </member>
    <member name="P:System.Net.Http.HttpClient.Timeout">
      <summary>Gets or sets the number of milliseconds to wait before the request times out.</summary>
      <returns>Returns <see cref="T:System.TimeSpan" />.The number of milliseconds to wait before the request times out.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">The timeout specified is less than or equal to zero and is not <see cref="F:System.Threading.Timeout.Infinite" />.</exception>
      <exception cref="T:System.InvalidOperationException">An operation has already been started on the current instance. </exception>
      <exception cref="T:System.ObjectDisposedException">The current instance has been disposed.</exception>
    </member>
    <member name="T:System.Net.Http.HttpClientHandler">
      <summary>The default message handler used by <see cref="T:System.Net.Http.HttpClient" />.  </summary>
    </member>
    <member name="M:System.Net.Http.HttpClientHandler.#ctor">
      <summary>Creates an instance of a <see cref="T:System.Net.Http.HttpClientHandler" /> class.</summary>
    </member>
    <member name="P:System.Net.Http.HttpClientHandler.AllowAutoRedirect">
      <summary>Gets or sets a value that indicates whether the handler should follow redirection responses.</summary>
      <returns>Returns <see cref="T:System.Boolean" />.true if the if the handler should follow redirection responses; otherwise false. The default value is true.</returns>
    </member>
    <member name="P:System.Net.Http.HttpClientHandler.AutomaticDecompression">
      <summary>Gets or sets the type of decompression method used by the handler for automatic decompression of the HTTP content response.</summary>
      <returns>Returns <see cref="T:System.Net.DecompressionMethods" />.The automatic decompression method used by the handler. The default value is <see cref="F:System.Net.DecompressionMethods.None" />.</returns>
    </member>
    <member name="P:System.Net.Http.HttpClientHandler.ClientCertificateOptions">
      <summary>Gets or sets the collection of security certificates that are associated with this handler.</summary>
      <returns>Returns <see cref="T:System.Net.Http.ClientCertificateOption" />.The collection of security certificates associated with this handler.</returns>
    </member>
    <member name="P:System.Net.Http.HttpClientHandler.CookieContainer">
      <summary>Gets or sets the cookie container used to store server cookies by the handler.</summary>
      <returns>Returns <see cref="T:System.Net.CookieContainer" />.The cookie container used to store server cookies by the handler.</returns>
    </member>
    <member name="P:System.Net.Http.HttpClientHandler.Credentials">
      <summary>Gets or sets authentication information used by this handler.</summary>
      <returns>Returns <see cref="T:System.Net.ICredentials" />.The authentication credentials associated with the handler. The default is null.</returns>
    </member>
    <member name="M:System.Net.Http.HttpClientHandler.Dispose(System.Boolean)">
      <summary>Releases the unmanaged resources used by the <see cref="T:System.Net.Http.HttpClientHandler" /> and optionally disposes of the managed resources.</summary>
      <param name="disposing">true to release both managed and unmanaged resources; false to releases only unmanaged resources.</param>
    </member>
    <member name="P:System.Net.Http.HttpClientHandler.MaxAutomaticRedirections">
      <summary>Gets or sets the maximum number of redirects that the handler follows.</summary>
      <returns>Returns <see cref="T:System.Int32" />.The maximum number of redirection responses that the handler follows. The default value is 50.</returns>
    </member>
    <member name="P:System.Net.Http.HttpClientHandler.MaxRequestContentBufferSize">
      <summary>Gets or sets the maximum request content buffer size used by the handler.</summary>
      <returns>Returns <see cref="T:System.Int32" />.The maximum request content buffer size in bytes. The default value is 65,536 bytes.</returns>
    </member>
    <member name="P:System.Net.Http.HttpClientHandler.PreAuthenticate">
      <summary>Gets or sets a value that indicates whether the handler sends an Authorization header with the request.</summary>
      <returns>Returns <see cref="T:System.Boolean" />.true for the handler to send an HTTP Authorization header with requests after authentication has taken place; otherwise, false. The default is false.</returns>
    </member>
    <member name="P:System.Net.Http.HttpClientHandler.Proxy">
      <summary>Gets or sets proxy information used by the handler.</summary>
      <returns>Returns <see cref="T:System.Net.IWebProxy" />.The proxy information used by the handler. The default value is null.</returns>
    </member>
    <member name="M:System.Net.Http.HttpClientHandler.SendAsync(System.Net.Http.HttpRequestMessage,System.Threading.CancellationToken)">
      <summary>Creates an instance of  <see cref="T:System.Net.Http.HttpResponseMessage" /> based on the information provided in the <see cref="T:System.Net.Http.HttpRequestMessage" /> as an operation that will not block.</summary>
      <returns>Returns <see cref="T:System.Threading.Tasks.Task`1" />.The task object representing the asynchronous operation.</returns>
      <param name="request">The HTTP request message.</param>
      <param name="cancellationToken">A cancellation token to cancel the operation.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="request" /> was null.</exception>
    </member>
    <member name="P:System.Net.Http.HttpClientHandler.SupportsAutomaticDecompression">
      <summary>Gets a value that indicates whether the handler supports automatic response content decompression.</summary>
      <returns>Returns <see cref="T:System.Boolean" />.true if the if the handler supports automatic response content decompression; otherwise false. The default value is true.</returns>
    </member>
    <member name="P:System.Net.Http.HttpClientHandler.SupportsProxy">
      <summary>Gets a value that indicates whether the handler supports proxy settings.</summary>
      <returns>Returns <see cref="T:System.Boolean" />.true if the if the handler supports proxy settings; otherwise false. The default value is true.</returns>
    </member>
    <member name="P:System.Net.Http.HttpClientHandler.SupportsRedirectConfiguration">
      <summary>Gets a value that indicates whether the handler supports configuration settings for the <see cref="P:System.Net.Http.HttpClientHandler.AllowAutoRedirect" /> and <see cref="P:System.Net.Http.HttpClientHandler.MaxAutomaticRedirections" /> properties.</summary>
      <returns>Returns <see cref="T:System.Boolean" />.true if the if the handler supports configuration settings for the <see cref="P:System.Net.Http.HttpClientHandler.AllowAutoRedirect" /> and <see cref="P:System.Net.Http.HttpClientHandler.MaxAutomaticRedirections" /> properties; otherwise false. The default value is true.</returns>
    </member>
    <member name="P:System.Net.Http.HttpClientHandler.UseCookies">
      <summary>Gets or sets a value that indicates whether the handler uses the  <see cref="P:System.Net.Http.HttpClientHandler.CookieContainer" /> property  to store server cookies and uses these cookies when sending requests.</summary>
      <returns>Returns <see cref="T:System.Boolean" />.true if the if the handler supports uses the  <see cref="P:System.Net.Http.HttpClientHandler.CookieContainer" /> property  to store server cookies and uses these cookies when sending requests; otherwise false. The default value is true.</returns>
    </member>
    <member name="P:System.Net.Http.HttpClientHandler.UseDefaultCredentials">
      <summary>Gets or sets a value that controls whether default credentials are sent with requests by the handler.</summary>
      <returns>Returns <see cref="T:System.Boolean" />.true if the default credentials are used; otherwise false. The default value is false.</returns>
    </member>
    <member name="P:System.Net.Http.HttpClientHandler.UseProxy">
      <summary>Gets or sets a value that indicates whether the handler uses a proxy for requests. </summary>
      <returns>Returns <see cref="T:System.Boolean" />.true if the handler should use a proxy for requests; otherwise false. The default value is true.</returns>
    </member>
    <member name="T:System.Net.Http.HttpCompletionOption">
      <summary>Indicates if <see cref="T:System.Net.Http.HttpClient" /> operations should be considered completed either as soon as a response is available, or after reading the entire response message including the content. </summary>
    </member>
    <member name="F:System.Net.Http.HttpCompletionOption.ResponseContentRead">
      <summary>The operation should complete after reading the entire response including the content.</summary>
    </member>
    <member name="F:System.Net.Http.HttpCompletionOption.ResponseHeadersRead">
      <summary>The operation should complete as soon as a response is available and headers are read. The content is not read yet. </summary>
    </member>
    <member name="T:System.Net.Http.HttpContent">
      <summary>A base class representing an HTTP entity body and content headers.</summary>
    </member>
    <member name="M:System.Net.Http.HttpContent.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Net.Http.HttpContent" /> class.</summary>
    </member>
    <member name="M:System.Net.Http.HttpContent.CopyToAsync(System.IO.Stream)">
      <summary>Write the HTTP content to a stream as an asynchronous operation.</summary>
      <returns>Returns <see cref="T:System.Threading.Tasks.Task" />.The task object representing the asynchronous operation.</returns>
      <param name="stream">The target stream.</param>
    </member>
    <member name="M:System.Net.Http.HttpContent.CopyToAsync(System.IO.Stream,System.Net.TransportContext)">
      <summary>Write the HTTP content to a stream as an asynchronous operation.</summary>
      <returns>Returns <see cref="T:System.Threading.Tasks.Task" />.The task object representing the asynchronous operation.</returns>
      <param name="stream">The target stream.</param>
      <param name="context">Information about the transport (channel binding token, for example). This parameter may be null.</param>
    </member>
    <member name="M:System.Net.Http.HttpContent.CreateContentReadStreamAsync">
      <summary>Write the HTTP content to a memory stream as an asynchronous operation.</summary>
      <returns>Returns <see cref="T:System.Threading.Tasks.Task`1" />.The task object representing the asynchronous operation.</returns>
    </member>
    <member name="M:System.Net.Http.HttpContent.Dispose">
      <summary>Releases the unmanaged resources and disposes of the managed resources used by the <see cref="T:System.Net.Http.HttpContent" />.</summary>
    </member>
    <member name="M:System.Net.Http.HttpContent.Dispose(System.Boolean)">
      <summary>Releases the unmanaged resources used by the <see cref="T:System.Net.Http.HttpContent" /> and optionally disposes of the managed resources.</summary>
      <param name="disposing">true to release both managed and unmanaged resources; false to releases only unmanaged resources.</param>
    </member>
    <member name="P:System.Net.Http.HttpContent.Headers">
      <summary>Gets the HTTP content headers as defined in RFC 2616.</summary>
      <returns>Returns <see cref="T:System.Net.Http.Headers.HttpContentHeaders" />.The content headers as defined in RFC 2616.</returns>
    </member>
    <member name="M:System.Net.Http.HttpContent.LoadIntoBufferAsync">
      <summary>Serialize the HTTP content to a memory buffer as an asynchronous operation.</summary>
      <returns>Returns <see cref="T:System.Threading.Tasks.Task" />.The task object representing the asynchronous operation.</returns>
    </member>
    <member name="M:System.Net.Http.HttpContent.LoadIntoBufferAsync(System.Int64)">
      <summary>Serialize the HTTP content to a memory buffer as an asynchronous operation.</summary>
      <returns>Returns <see cref="T:System.Threading.Tasks.Task" />.The task object representing the asynchronous operation.</returns>
      <param name="maxBufferSize">The maximum size, in bytes, of the buffer to use.</param>
    </member>
    <member name="M:System.Net.Http.HttpContent.ReadAsByteArrayAsync">
      <summary>Write the HTTP content to a byte array as an asynchronous operation.</summary>
      <returns>Returns <see cref="T:System.Threading.Tasks.Task`1" />.The task object representing the asynchronous operation.</returns>
    </member>
    <member name="M:System.Net.Http.HttpContent.ReadAsStreamAsync">
      <summary>Write the HTTP content to a stream as an asynchronous operation.</summary>
      <returns>Returns <see cref="T:System.Threading.Tasks.Task`1" />.The task object representing the asynchronous operation.</returns>
    </member>
    <member name="M:System.Net.Http.HttpContent.ReadAsStringAsync">
      <summary>Write the HTTP content to a string as an asynchronous operation.</summary>
      <returns>Returns <see cref="T:System.Threading.Tasks.Task`1" />.The task object representing the asynchronous operation.</returns>
    </member>
    <member name="M:System.Net.Http.HttpContent.SerializeToStreamAsync(System.IO.Stream,System.Net.TransportContext)">
      <summary>Serialize the HTTP content to a stream as an asynchronous operation.</summary>
      <returns>Returns <see cref="T:System.Threading.Tasks.Task" />.The task object representing the asynchronous operation.</returns>
      <param name="stream">The target stream.</param>
      <param name="context">Information about the transport (channel binding token, for example). This parameter may be null.</param>
    </member>
    <member name="M:System.Net.Http.HttpContent.TryComputeLength(System.Int64@)">
      <summary>Determines whether the HTTP content has a valid length in bytes.</summary>
      <returns>Returns <see cref="T:System.Boolean" />.true if <paramref name="length" /> is a valid length; otherwise, false.</returns>
      <param name="length">The length in bytes of the HHTP content.</param>
    </member>
    <member name="T:System.Net.Http.HttpMessageHandler">
      <summary>A base type for HTTP message handlers.</summary>
    </member>
    <member name="M:System.Net.Http.HttpMessageHandler.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Net.Http.HttpMessageHandler" /> class.</summary>
    </member>
    <member name="M:System.Net.Http.HttpMessageHandler.Dispose">
      <summary>Releases the unmanaged resources and disposes of the managed resources used by the <see cref="T:System.Net.Http.HttpMessageHandler" />.</summary>
    </member>
    <member name="M:System.Net.Http.HttpMessageHandler.Dispose(System.Boolean)">
      <summary>Releases the unmanaged resources used by the <see cref="T:System.Net.Http.HttpMessageHandler" /> and optionally disposes of the managed resources.</summary>
      <param name="disposing">true to release both managed and unmanaged resources; false to releases only unmanaged resources.</param>
    </member>
    <member name="M:System.Net.Http.HttpMessageHandler.SendAsync(System.Net.Http.HttpRequestMessage,System.Threading.CancellationToken)">
      <summary>Send an HTTP request as an asynchronous operation.</summary>
      <returns>Returns <see cref="T:System.Threading.Tasks.Task`1" />.The task object representing the asynchronous operation.</returns>
      <param name="request">The HTTP request message to send.</param>
      <param name="cancellationToken">The cancellation token to cancel operation.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="request" /> was null.</exception>
    </member>
    <member name="T:System.Net.Http.HttpMessageInvoker">
      <summary>The base type for <see cref="T:System.Net.Http.HttpClient" /> and other message originators.</summary>
    </member>
    <member name="M:System.Net.Http.HttpMessageInvoker.#ctor(System.Net.Http.HttpMessageHandler)">
      <summary>Initializes an instance of a <see cref="T:System.Net.Http.HttpMessageInvoker" /> class with a specific <see cref="T:System.Net.Http.HttpMessageHandler" />.</summary>
      <param name="handler">The <see cref="T:System.Net.Http.HttpMessageHandler" /> responsible for processing the HTTP response messages.</param>
    </member>
    <member name="M:System.Net.Http.HttpMessageInvoker.#ctor(System.Net.Http.HttpMessageHandler,System.Boolean)">
      <summary>Initializes an instance of a <see cref="T:System.Net.Http.HttpMessageInvoker" /> class with a specific <see cref="T:System.Net.Http.HttpMessageHandler" />.</summary>
      <param name="handler">The <see cref="T:System.Net.Http.HttpMessageHandler" /> responsible for processing the HTTP response messages.</param>
      <param name="disposeHandler">true if the inner handler should be disposed of by Dispose(),false if you intend to reuse the inner handler.</param>
    </member>
    <member name="M:System.Net.Http.HttpMessageInvoker.Dispose">
      <summary>Releases the unmanaged resources and disposes of the managed resources used by the <see cref="T:System.Net.Http.HttpMessageInvoker" />.</summary>
    </member>
    <member name="M:System.Net.Http.HttpMessageInvoker.Dispose(System.Boolean)">
      <summary>Releases the unmanaged resources used by the <see cref="T:System.Net.Http.HttpMessageInvoker" /> and optionally disposes of the managed resources.</summary>
      <param name="disposing">true to release both managed and unmanaged resources; false to releases only unmanaged resources.</param>
    </member>
    <member name="M:System.Net.Http.HttpMessageInvoker.SendAsync(System.Net.Http.HttpRequestMessage,System.Threading.CancellationToken)">
      <summary>Send an HTTP request as an asynchronous operation.</summary>
      <returns>Returns <see cref="T:System.Threading.Tasks.Task`1" />.The task object representing the asynchronous operation.</returns>
      <param name="request">The HTTP request message to send.</param>
      <param name="cancellationToken">The cancellation token to cancel operation.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="request" /> was null.</exception>
    </member>
    <member name="T:System.Net.Http.HttpMethod">
      <summary>A helper class for retrieving and comparing standard HTTP methods.</summary>
    </member>
    <member name="M:System.Net.Http.HttpMethod.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Net.Http.HttpMethod" /> class with a specific HTTP method.</summary>
      <param name="method">The HTTP method.</param>
    </member>
    <member name="P:System.Net.Http.HttpMethod.Delete">
      <summary>Represents an HTTP DELETE protocol method.</summary>
      <returns>Returns <see cref="T:System.Net.Http.HttpMethod" />.</returns>
    </member>
    <member name="M:System.Net.Http.HttpMethod.Equals(System.Net.Http.HttpMethod)">
      <summary>Determines whether the specified <see cref="T:System.Net.Http.HttpMethod" /> is equal to the current <see cref="T:System.Object" />.</summary>
      <returns>Returns <see cref="T:System.Boolean" />.true if the specified object is equal to the current object; otherwise, false.</returns>
      <param name="other">The HTTP method to compare with the current object.</param>
    </member>
    <member name="M:System.Net.Http.HttpMethod.Equals(System.Object)">
      <summary>Determines whether the specified <see cref="T:System.Object" /> is equal to the current <see cref="T:System.Object" />.</summary>
      <returns>Returns <see cref="T:System.Boolean" />.true if the specified object is equal to the current object; otherwise, false.</returns>
      <param name="obj">The object to compare with the current object.</param>
    </member>
    <member name="P:System.Net.Http.HttpMethod.Get">
      <summary>Represents an HTTP GET protocol method.</summary>
      <returns>Returns <see cref="T:System.Net.Http.HttpMethod" />.</returns>
    </member>
    <member name="M:System.Net.Http.HttpMethod.GetHashCode">
      <summary>Serves as a hash function for this type.</summary>
      <returns>Returns <see cref="T:System.Int32" />.A hash code for the current <see cref="T:System.Object" />.</returns>
    </member>
    <member name="P:System.Net.Http.HttpMethod.Head">
      <summary>Represents an HTTP HEAD protocol method. The HEAD method is identical to GET except that the server only returns message-headers in the response, without a message-body.</summary>
      <returns>Returns <see cref="T:System.Net.Http.HttpMethod" />.</returns>
    </member>
    <member name="P:System.Net.Http.HttpMethod.Method">
      <summary>An HTTP method. </summary>
      <returns>Returns <see cref="T:System.String" />.An HTTP method represented as a <see cref="T:System.String" />.</returns>
    </member>
    <member name="M:System.Net.Http.HttpMethod.op_Equality(System.Net.Http.HttpMethod,System.Net.Http.HttpMethod)">
      <summary>The equality operator for comparing two <see cref="T:System.Net.Http.HttpMethod" /> objects.</summary>
      <returns>Returns <see cref="T:System.Boolean" />.true if the specified <paramref name="left" /> and <paramref name="right" /> parameters are equal; otherwise, false.</returns>
      <param name="left">The left <see cref="T:System.Net.Http.HttpMethod" /> to an equality operator.</param>
      <param name="right">The right  <see cref="T:System.Net.Http.HttpMethod" /> to an equality operator.</param>
    </member>
    <member name="M:System.Net.Http.HttpMethod.op_Inequality(System.Net.Http.HttpMethod,System.Net.Http.HttpMethod)">
      <summary>The inequality operator for comparing two <see cref="T:System.Net.Http.HttpMethod" /> objects.</summary>
      <returns>Returns <see cref="T:System.Boolean" />.true if the specified <paramref name="left" /> and <paramref name="right" /> parameters are inequal; otherwise, false.</returns>
      <param name="left">The left <see cref="T:System.Net.Http.HttpMethod" /> to an inequality operator.</param>
      <param name="right">The right  <see cref="T:System.Net.Http.HttpMethod" /> to an inequality operator.</param>
    </member>
    <member name="P:System.Net.Http.HttpMethod.Options">
      <summary>Represents an HTTP OPTIONS protocol method.</summary>
      <returns>Returns <see cref="T:System.Net.Http.HttpMethod" />.</returns>
    </member>
    <member name="P:System.Net.Http.HttpMethod.Post">
      <summary>Represents an HTTP POST protocol method that is used to post a new entity as an addition to a URI.</summary>
      <returns>Returns <see cref="T:System.Net.Http.HttpMethod" />.</returns>
    </member>
    <member name="P:System.Net.Http.HttpMethod.Put">
      <summary>Represents an HTTP PUT protocol method that is used to replace an entity identified by a URI.</summary>
      <returns>Returns <see cref="T:System.Net.Http.HttpMethod" />.</returns>
    </member>
    <member name="M:System.Net.Http.HttpMethod.ToString">
      <summary>Returns a string that represents the current object.</summary>
      <returns>Returns <see cref="T:System.String" />.A string representing the current object.</returns>
    </member>
    <member name="P:System.Net.Http.HttpMethod.Trace">
      <summary>Represents an HTTP TRACE protocol method.</summary>
      <returns>Returns <see cref="T:System.Net.Http.HttpMethod" />.</returns>
    </member>
    <member name="T:System.Net.Http.HttpRequestException">
      <summary>A base class for exceptions thrown by the <see cref="T:System.Net.Http.HttpClient" /> and <see cref="T:System.Net.Http.HttpMessageHandler" /> classes.</summary>
    </member>
    <member name="M:System.Net.Http.HttpRequestException.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Net.Http.HttpRequestException" /> class.</summary>
    </member>
    <member name="M:System.Net.Http.HttpRequestException.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Net.Http.HttpRequestException" /> class with a specific message that describes the current exception.</summary>
      <param name="message">A message that describes the current exception.</param>
    </member>
    <member name="M:System.Net.Http.HttpRequestException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:System.Net.Http.HttpRequestException" /> class with a specific message that describes the current exception and an inner exception.</summary>
      <param name="message">A message that describes the current exception.</param>
      <param name="inner">The inner exception.</param>
    </member>
    <member name="T:System.Net.Http.HttpRequestMessage">
      <summary>Represents a HTTP request message.</summary>
    </member>
    <member name="M:System.Net.Http.HttpRequestMessage.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Net.Http.HttpRequestMessage" /> class.</summary>
    </member>
    <member name="M:System.Net.Http.HttpRequestMessage.#ctor(System.Net.Http.HttpMethod,System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Net.Http.HttpRequestMessage" /> class with an HTTP method and a request <see cref="T:System.Uri" />.</summary>
      <param name="method">The HTTP method.</param>
      <param name="requestUri">A string that represents the request  <see cref="T:System.Uri" />.</param>
    </member>
    <member name="M:System.Net.Http.HttpRequestMessage.#ctor(System.Net.Http.HttpMethod,System.Uri)">
      <summary>Initializes a new instance of the <see cref="T:System.Net.Http.HttpRequestMessage" /> class with an HTTP method and a request <see cref="T:System.Uri" />.</summary>
      <param name="method">The HTTP method.</param>
      <param name="requestUri">The <see cref="T:System.Uri" /> to request.</param>
    </member>
    <member name="P:System.Net.Http.HttpRequestMessage.Content">
      <summary>Gets or sets the contents of the HTTP message. </summary>
      <returns>Returns <see cref="T:System.Net.Http.HttpContent" />.The content of a message</returns>
    </member>
    <member name="M:System.Net.Http.HttpRequestMessage.Dispose">
      <summary>Releases the unmanaged resources and disposes of the managed resources used by the <see cref="T:System.Net.Http.HttpRequestMessage" />.</summary>
    </member>
    <member name="M:System.Net.Http.HttpRequestMessage.Dispose(System.Boolean)">
      <summary>Releases the unmanaged resources used by the <see cref="T:System.Net.Http.HttpRequestMessage" /> and optionally disposes of the managed resources.</summary>
      <param name="disposing">true to release both managed and unmanaged resources; false to releases only unmanaged resources.</param>
    </member>
    <member name="P:System.Net.Http.HttpRequestMessage.Headers">
      <summary>Gets the collection of HTTP request headers.</summary>
      <returns>Returns <see cref="T:System.Net.Http.Headers.HttpRequestHeaders" />.The collection of HTTP request headers.</returns>
    </member>
    <member name="P:System.Net.Http.HttpRequestMessage.Method">
      <summary>Gets or sets the HTTP method used by the HTTP request message.</summary>
      <returns>Returns <see cref="T:System.Net.Http.HttpMethod" />.The HTTP method used by the request message. The default is the GET method.</returns>
    </member>
    <member name="P:System.Net.Http.HttpRequestMessage.Properties">
      <summary>Gets a set of properties for the HTTP request.</summary>
      <returns>Returns <see cref="T:System.Collections.Generic.IDictionary`2" />.</returns>
    </member>
    <member name="P:System.Net.Http.HttpRequestMessage.RequestUri">
      <summary>Gets or sets the <see cref="T:System.Uri" /> used for the HTTP request.</summary>
      <returns>Returns <see cref="T:System.Uri" />.The <see cref="T:System.Uri" /> used for the HTTP request.</returns>
    </member>
    <member name="M:System.Net.Http.HttpRequestMessage.ToString">
      <summary>Returns a string that represents the current object.</summary>
      <returns>Returns <see cref="T:System.String" />.A string representation of the current object.</returns>
    </member>
    <member name="P:System.Net.Http.HttpRequestMessage.Version">
      <summary>Gets or sets the HTTP message version.</summary>
      <returns>Returns <see cref="T:System.Version" />.The HTTP message version. The default is 1.1.</returns>
    </member>
    <member name="T:System.Net.Http.HttpResponseMessage">
      <summary>Represents a HTTP response message.</summary>
    </member>
    <member name="M:System.Net.Http.HttpResponseMessage.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Net.Http.HttpResponseMessage" /> class.</summary>
    </member>
    <member name="M:System.Net.Http.HttpResponseMessage.#ctor(System.Net.HttpStatusCode)">
      <summary>Initializes a new instance of the <see cref="T:System.Net.Http.HttpResponseMessage" /> class with a specific <see cref="P:System.Net.Http.HttpResponseMessage.StatusCode" />.</summary>
      <param name="statusCode">The status code of the HTTP response.</param>
    </member>
    <member name="P:System.Net.Http.HttpResponseMessage.Content">
      <summary>Gets or sets the content of a HTTP response message. </summary>
      <returns>Returns <see cref="T:System.Net.Http.HttpContent" />.The content of the HTTP response message.</returns>
    </member>
    <member name="M:System.Net.Http.HttpResponseMessage.Dispose">
      <summary>Releases the unmanaged resources and disposes of unmanaged resources used by the <see cref="T:System.Net.Http.HttpResponseMessage" />.</summary>
    </member>
    <member name="M:System.Net.Http.HttpResponseMessage.Dispose(System.Boolean)">
      <summary>Releases the unmanaged resources used by the <see cref="T:System.Net.Http.HttpResponseMessage" /> and optionally disposes of the managed resources.</summary>
      <param name="disposing">true to release both managed and unmanaged resources; false to releases only unmanaged resources.</param>
    </member>
    <member name="M:System.Net.Http.HttpResponseMessage.EnsureSuccessStatusCode">
      <summary>Throws an exception if the <see cref="P:System.Net.Http.HttpResponseMessage.IsSuccessStatusCode" /> property for the HTTP response is false.</summary>
      <returns>Returns <see cref="T:System.Net.Http.HttpResponseMessage" />.The HTTP response message if the call is successful.</returns>
    </member>
    <member name="P:System.Net.Http.HttpResponseMessage.Headers">
      <summary>Gets the collection of HTTP response headers. </summary>
      <returns>Returns <see cref="T:System.Net.Http.Headers.HttpResponseHeaders" />.The collection of HTTP response headers.</returns>
    </member>
    <member name="P:System.Net.Http.HttpResponseMessage.IsSuccessStatusCode">
      <summary>Gets a value that indicates if the HTTP response was successful.</summary>
      <returns>Returns <see cref="T:System.Boolean" />.A value that indicates if the HTTP response was successful. true if <see cref="P:System.Net.Http.HttpResponseMessage.StatusCode" /> was in the range 200-299; otherwise false.</returns>
    </member>
    <member name="P:System.Net.Http.HttpResponseMessage.ReasonPhrase">
      <summary>Gets or sets the reason phrase which typically is sent by servers together with the status code. </summary>
      <returns>Returns <see cref="T:System.String" />.The reason phrase sent by the server.</returns>
    </member>
    <member name="P:System.Net.Http.HttpResponseMessage.RequestMessage">
      <summary>Gets or sets the request message which led to this response message.</summary>
      <returns>Returns <see cref="T:System.Net.Http.HttpRequestMessage" />.The request message which led to this response message.</returns>
    </member>
    <member name="P:System.Net.Http.HttpResponseMessage.StatusCode">
      <summary>Gets or sets the status code of the HTTP response.</summary>
      <returns>Returns <see cref="T:System.Net.HttpStatusCode" />.The status code of the HTTP response.</returns>
    </member>
    <member name="M:System.Net.Http.HttpResponseMessage.ToString">
      <summary>Returns a string that represents the current object.</summary>
      <returns>Returns <see cref="T:System.String" />.A string representation of the current object.</returns>
    </member>
    <member name="P:System.Net.Http.HttpResponseMessage.Version">
      <summary>Gets or sets the HTTP message version. </summary>
      <returns>Returns <see cref="T:System.Version" />.The HTTP message version. The default is 1.1. </returns>
    </member>
    <member name="T:System.Net.Http.MessageProcessingHandler">
      <summary>A base type for handlers which only do some small processing of request and/or response messages.</summary>
    </member>
    <member name="M:System.Net.Http.MessageProcessingHandler.#ctor">
      <summary>Creates an instance of a <see cref="T:System.Net.Http.MessageProcessingHandler" /> class.</summary>
    </member>
    <member name="M:System.Net.Http.MessageProcessingHandler.#ctor(System.Net.Http.HttpMessageHandler)">
      <summary>Creates an instance of a <see cref="T:System.Net.Http.MessageProcessingHandler" /> class with a specific inner handler.</summary>
      <param name="innerHandler">The inner handler which is responsible for processing the HTTP response messages.</param>
    </member>
    <member name="M:System.Net.Http.MessageProcessingHandler.ProcessRequest(System.Net.Http.HttpRequestMessage,System.Threading.CancellationToken)">
      <summary>Processes an HTTP request message.</summary>
      <returns>Returns <see cref="T:System.Net.Http.HttpRequestMessage" />.The HTTP request message that was processed.</returns>
      <param name="request">The HTTP request message to process.</param>
      <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    </member>
    <member name="M:System.Net.Http.MessageProcessingHandler.ProcessResponse(System.Net.Http.HttpResponseMessage,System.Threading.CancellationToken)">
      <summary>Processes an HTTP response message.</summary>
      <returns>Returns <see cref="T:System.Net.Http.HttpResponseMessage" />.The HTTP response message that was processed.</returns>
      <param name="response">The HTTP response message to process.</param>
      <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    </member>
    <member name="M:System.Net.Http.MessageProcessingHandler.SendAsync(System.Net.Http.HttpRequestMessage,System.Threading.CancellationToken)">
      <summary>Sends an HTTP request to the inner handler to send to the server as an asynchronous operation.</summary>
      <returns>Returns <see cref="T:System.Threading.Tasks.Task`1" />.The task object representing the asynchronous operation.</returns>
      <param name="request">The HTTP request message to send to the server.</param>
      <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="request" /> was null.</exception>
    </member>
    <member name="T:System.Net.Http.MultipartContent">
      <summary>Provides a collection of <see cref="T:System.Net.Http.HttpContent" /> objects that get serialized using the multipart/* content type specification.</summary>
    </member>
    <member name="M:System.Net.Http.MultipartContent.#ctor">
      <summary>Creates a new instance of the <see cref="T:System.Net.Http.MultipartContent" /> class.</summary>
    </member>
    <member name="M:System.Net.Http.MultipartContent.#ctor(System.String)">
      <summary>Creates a new instance of the <see cref="T:System.Net.Http.MultipartContent" /> class.</summary>
      <param name="subtype">The subtype of the multipart content.</param>
      <exception cref="T:System.ArgumentException">The <paramref name="subtype" /> was null or contains only white space characters.</exception>
    </member>
    <member name="M:System.Net.Http.MultipartContent.#ctor(System.String,System.String)">
      <summary>Creates a new instance of the <see cref="T:System.Net.Http.MultipartContent" /> class.</summary>
      <param name="subtype">The subtype of the multipart content.</param>
      <param name="boundary">The boundary string for the multipart content.</param>
      <exception cref="T:System.ArgumentException">The <paramref name="subtype" /> was null or an empty string.The <paramref name="boundary" /> was null or contains only white space characters.-or-The <paramref name="boundary" /> ends with a space character.</exception>
      <exception cref="T:System.OutOfRangeException">The length of the <paramref name="boundary" /> was greater than 70.</exception>
    </member>
    <member name="M:System.Net.Http.MultipartContent.Add(System.Net.Http.HttpContent)">
      <summary>Add multipart HTTP content to a collection of <see cref="T:System.Net.Http.HttpContent" /> objects that get serialized using the multipart/* content type specification.</summary>
      <param name="content">The HTTP content to add to the collection.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="content" /> was null.</exception>
    </member>
    <member name="M:System.Net.Http.MultipartContent.Dispose(System.Boolean)">
      <summary>Releases the unmanaged resources used by the <see cref="T:System.Net.Http.MultipartContent" /> and optionally disposes of the managed resources.</summary>
      <param name="disposing">true to release both managed and unmanaged resources; false to releases only unmanaged resources.</param>
    </member>
    <member name="M:System.Net.Http.MultipartContent.GetEnumerator">
      <summary>Returns an enumerator that iterates through the collection of <see cref="T:System.Net.Http.HttpContent" /> objects that get serialized using the multipart/* content type specification..</summary>
      <returns>Returns <see cref="T:System.Collections.Generic.IEnumerator`1" />.An object that can be used to iterate through the collection.</returns>
    </member>
    <member name="M:System.Net.Http.MultipartContent.SerializeToStreamAsync(System.IO.Stream,System.Net.TransportContext)">
      <summary>Serialize the multipart HTTP content to a stream as an asynchronous operation.</summary>
      <returns>Returns <see cref="T:System.Threading.Tasks.Task" />.The task object representing the asynchronous operation.</returns>
      <param name="stream">The target stream.</param>
      <param name="context">Information about the transport (channel binding token, for example). This parameter may be null.</param>
    </member>
    <member name="M:System.Net.Http.MultipartContent.System#Collections#IEnumerable#GetEnumerator">
      <summary>The explicit implementation of the <see cref="M:System.Net.Http.MultipartContent.GetEnumerator" /> method.</summary>
      <returns>Returns <see cref="T:System.Collections.IEnumerator" />.An object that can be used to iterate through the collection.</returns>
    </member>
    <member name="M:System.Net.Http.MultipartContent.TryComputeLength(System.Int64@)">
      <summary>Determines whether the HTTP multipart content has a valid length in bytes.</summary>
      <returns>Returns <see cref="T:System.Boolean" />.true if <paramref name="length" /> is a valid length; otherwise, false.</returns>
      <param name="length">The length in bytes of the HHTP content.</param>
    </member>
    <member name="T:System.Net.Http.MultipartFormDataContent">
      <summary>Provides a container for content encoded using multipart/form-data MIME type.</summary>
    </member>
    <member name="M:System.Net.Http.MultipartFormDataContent.#ctor">
      <summary>Creates a new instance of the <see cref="T:System.Net.Http.MultipartFormDataContent" /> class.</summary>
    </member>
    <member name="M:System.Net.Http.MultipartFormDataContent.#ctor(System.String)">
      <summary>Creates a new instance of the <see cref="T:System.Net.Http.MultipartFormDataContent" /> class.</summary>
      <param name="boundary">The boundary string for the multipart form data content.</param>
      <exception cref="T:System.ArgumentException">The <paramref name="boundary" /> was null or contains only white space characters.-or-The <paramref name="boundary" /> ends with a space character.</exception>
      <exception cref="T:System.OutOfRangeException">The length of the <paramref name="boundary" /> was greater than 70.</exception>
    </member>
    <member name="M:System.Net.Http.MultipartFormDataContent.Add(System.Net.Http.HttpContent)">
      <summary>Add HTTP content to a collection of <see cref="T:System.Net.Http.HttpContent" /> objects that get serialized to multipart/form-data MIME type.</summary>
      <param name="content">The HTTP content to add to the collection.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="content" /> was null.</exception>
    </member>
    <member name="M:System.Net.Http.MultipartFormDataContent.Add(System.Net.Http.HttpContent,System.String)">
      <summary>Add HTTP content to a collection of <see cref="T:System.Net.Http.HttpContent" /> objects that get serialized to multipart/form-data MIME type.</summary>
      <param name="content">The HTTP content to add to the collection.</param>
      <param name="name">The name for the HTTP content to add.</param>
      <exception cref="T:System.ArgumentException">The <paramref name="name" /> was null or contains only white space characters.</exception>
      <exception cref="T:System.ArgumentNullException">The <paramref name="content" /> was null.</exception>
    </member>
    <member name="M:System.Net.Http.MultipartFormDataContent.Add(System.Net.Http.HttpContent,System.String,System.String)">
      <summary>Add HTTP content to a collection of <see cref="T:System.Net.Http.HttpContent" /> objects that get serialized to multipart/form-data MIME type.</summary>
      <param name="content">The HTTP content to add to the collection.</param>
      <param name="name">The name for the HTTP content to add.</param>
      <param name="fileName">The file name for the HTTP content to add to the collection.</param>
      <exception cref="T:System.ArgumentException">The <paramref name="name" /> was null or contains only white space characters.-or-The <paramref name="fileName" /> was null or contains only white space characters.</exception>
      <exception cref="T:System.ArgumentNullException">The <paramref name="content" /> was null.</exception>
    </member>
    <member name="T:System.Net.Http.StreamContent">
      <summary>Provides HTTP content based on a stream.</summary>
    </member>
    <member name="M:System.Net.Http.StreamContent.#ctor(System.IO.Stream)">
      <summary>Creates a new instance of the <see cref="T:System.Net.Http.StreamContent" /> class.</summary>
      <param name="content">The content used to initialize the <see cref="T:System.Net.Http.StreamContent" />.</param>
    </member>
    <member name="M:System.Net.Http.StreamContent.#ctor(System.IO.Stream,System.Int32)">
      <summary>Creates a new instance of the <see cref="T:System.Net.Http.StreamContent" /> class.</summary>
      <param name="content">The content used to initialize the <see cref="T:System.Net.Http.StreamContent" />.</param>
      <param name="bufferSize">The size, in bytes, of the buffer for the <see cref="T:System.Net.Http.StreamContent" />.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="content" /> was null.</exception>
      <exception cref="T:System.OutOfRangeException">The <paramref name="bufferSize" /> was less than or equal to zero. </exception>
    </member>
    <member name="M:System.Net.Http.StreamContent.CreateContentReadStreamAsync">
      <summary>Write the HTTP stream content to a memory stream as an asynchronous operation.</summary>
      <returns>Returns <see cref="T:System.Threading.Tasks.Task`1" />.The task object representing the asynchronous operation.</returns>
    </member>
    <member name="M:System.Net.Http.StreamContent.Dispose(System.Boolean)">
      <summary>Releases the unmanaged resources used by the <see cref="T:System.Net.Http.StreamContent" /> and optionally disposes of the managed resources.</summary>
      <param name="disposing">true to release both managed and unmanaged resources; false to releases only unmanaged resources.</param>
    </member>
    <member name="M:System.Net.Http.StreamContent.SerializeToStreamAsync(System.IO.Stream,System.Net.TransportContext)">
      <summary>Serialize the HTTP content to a stream as an asynchronous operation.</summary>
      <returns>Returns <see cref="T:System.Threading.Tasks.Task" />.The task object representing the asynchronous operation.</returns>
      <param name="stream">The target stream.</param>
      <param name="context">Information about the transport (channel binding token, for example). This parameter may be null.</param>
    </member>
    <member name="M:System.Net.Http.StreamContent.TryComputeLength(System.Int64@)">
      <summary>Determines whether the stream content has a valid length in bytes.</summary>
      <returns>Returns <see cref="T:System.Boolean" />.true if <paramref name="length" /> is a valid length; otherwise, false.</returns>
      <param name="length">The length in bytes of the stream content.</param>
    </member>
    <member name="T:System.Net.Http.StringContent">
      <summary>Provides HTTP content based on a string.</summary>
    </member>
    <member name="M:System.Net.Http.StringContent.#ctor(System.String)">
      <summary>Creates a new instance of the <see cref="T:System.Net.Http.StringContent" /> class.</summary>
      <param name="content">The content used to initialize the <see cref="T:System.Net.Http.StringContent" />.</param>
    </member>
    <member name="M:System.Net.Http.StringContent.#ctor(System.String,System.Text.Encoding)">
      <summary>Creates a new instance of the <see cref="T:System.Net.Http.StringContent" /> class.</summary>
      <param name="content">The content used to initialize the <see cref="T:System.Net.Http.StringContent" />.</param>
      <param name="encoding">The encoding to use for the content.</param>
    </member>
    <member name="M:System.Net.Http.StringContent.#ctor(System.String,System.Text.Encoding,System.String)">
      <summary>Creates a new instance of the <see cref="T:System.Net.Http.StringContent" /> class.</summary>
      <param name="content">The content used to initialize the <see cref="T:System.Net.Http.StringContent" />.</param>
      <param name="encoding">The encoding to use for the content.</param>
      <param name="mediaType">The media type to use for the content.</param>
    </member>
    <member name="T:System.Net.Http.Headers.AuthenticationHeaderValue">
      <summary>Represents authentication information in Authorization, ProxyAuthorization, WWW-Authenticate, and Proxy-Authenticate header values.</summary>
    </member>
    <member name="M:System.Net.Http.Headers.AuthenticationHeaderValue.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Net.Http.Headers.AuthenticationHeaderValue" /> class.</summary>
      <param name="scheme">The scheme to use for authorization.</param>
    </member>
    <member name="M:System.Net.Http.Headers.AuthenticationHeaderValue.#ctor(System.String,System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Net.Http.Headers.AuthenticationHeaderValue" /> class.</summary>
      <param name="scheme">The scheme to use for authorization.</param>
      <param name="parameter">The credentials containing the authentication information of the user agent for the resource being requested.</param>
    </member>
    <member name="M:System.Net.Http.Headers.AuthenticationHeaderValue.Equals(System.Object)">
      <summary>Determines whether the specified <see cref="T:System.Object" /> is equal to the current <see cref="T:System.Net.Http.Headers.AuthenticationHeaderValue" /> object.</summary>
      <returns>Returns <see cref="T:System.Boolean" />.true if the specified <see cref="T:System.Object" /> is equal to the current object; otherwise, false.</returns>
      <param name="obj">The object to compare with the current object. </param>
    </member>
    <member name="M:System.Net.Http.Headers.AuthenticationHeaderValue.GetHashCode">
      <summary>Serves as a hash function for an  <see cref="T:System.Net.Http.Headers.AuthenticationHeaderValue" /> object.</summary>
      <returns>Returns <see cref="T:System.Int32" />.A hash code for the current object.</returns>
    </member>
    <member name="P:System.Net.Http.Headers.AuthenticationHeaderValue.Parameter">
      <summary>Gets the credentials containing the authentication information of the user agent for the resource being requested.</summary>
      <returns>Returns <see cref="T:System.String" />.The credentials containing the authentication information.</returns>
    </member>
    <member name="M:System.Net.Http.Headers.AuthenticationHeaderValue.Parse(System.String)">
      <summary>Converts a string to an <see cref="T:System.Net.Http.Headers.AuthenticationHeaderValue" /> instance.</summary>
      <returns>Returns <see cref="T:System.Net.Http.Headers.AuthenticationHeaderValue" />.An <see cref="T:System.Net.Http.Headers.AuthenticationHeaderValue" /> instance.</returns>
      <param name="input">A string that represents authentication header value information.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> is a null reference.</exception>
      <exception cref="T:System.FormatException">
        <paramref name="input" /> is not valid authentication header value information.</exception>
    </member>
    <member name="P:System.Net.Http.Headers.AuthenticationHeaderValue.Scheme">
      <summary>Gets the scheme to use for authorization.</summary>
      <returns>Returns <see cref="T:System.String" />.The scheme to use for authorization.</returns>
    </member>
    <member name="M:System.Net.Http.Headers.AuthenticationHeaderValue.System#ICloneable#Clone">
      <summary>Creates a new object that is a copy of the current <see cref="T:System.Net.Http.Headers.AuthenticationHeaderValue" /> instance.</summary>
      <returns>Returns <see cref="T:System.Object" />.A copy of the current instance.</returns>
    </member>
    <member name="M:System.Net.Http.Headers.AuthenticationHeaderValue.ToString">
      <summary>Returns a string that represents the current <see cref="T:System.Net.Http.Headers.AuthenticationHeaderValue" /> object.</summary>
      <returns>Returns <see cref="T:System.String" />.A string that represents the current object.</returns>
    </member>
    <member name="M:System.Net.Http.Headers.AuthenticationHeaderValue.TryParse(System.String,System.Net.Http.Headers.AuthenticationHeaderValue@)">
      <summary>Determines whether a string is valid <see cref="T:System.Net.Http.Headers.AuthenticationHeaderValue" /> information.</summary>
      <returns>Returns <see cref="T:System.Boolean" />.true if <paramref name="input" /> is valid <see cref="T:System.Net.Http.Headers.AuthenticationHeaderValue" /> information; otherwise, false.</returns>
      <param name="input">The string to validate.</param>
      <param name="parsedValue">The <see cref="T:System.Net.Http.Headers.AuthenticationHeaderValue" /> version of the string.</param>
    </member>
    <member name="T:System.Net.Http.Headers.CacheControlHeaderValue">
      <summary>Represents the value of the Cache-Control header.</summary>
    </member>
    <member name="M:System.Net.Http.Headers.CacheControlHeaderValue.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Net.Http.Headers.CacheControlHeaderValue" /> class.</summary>
    </member>
    <member name="M:System.Net.Http.Headers.CacheControlHeaderValue.Equals(System.Object)">
      <summary>Determines whether the specified <see cref="T:System.Object" /> is equal to the current <see cref="T:System.Net.Http.Headers.CacheControlHeaderValue" /> object.</summary>
      <returns>Returns <see cref="T:System.Boolean" />.true if the specified <see cref="T:System.Object" /> is equal to the current object; otherwise, false.</returns>
      <param name="obj">The object to compare with the current object.</param>
    </member>
    <member name="P:System.Net.Http.Headers.CacheControlHeaderValue.Extensions">
      <summary>Cache-extension tokens, each with an optional assigned value.</summary>
      <returns>Returns <see cref="T:System.Collections.Generic.ICollection`1" />.A collection of cache-extension tokens each with an optional assigned value.</returns>
    </member>
    <member name="M:System.Net.Http.Headers.CacheControlHeaderValue.GetHashCode">
      <summary>Serves as a hash function for a  <see cref="T:System.Net.Http.Headers.CacheControlHeaderValue" /> object.</summary>
      <returns>Returns <see cref="T:System.Int32" />.A hash code for the current object.</returns>
    </member>
    <member name="P:System.Net.Http.Headers.CacheControlHeaderValue.MaxAge">
      <summary>The maximum age, specified in seconds, that the HTTP client is willing to accept a response. </summary>
      <returns>Returns <see cref="T:System.TimeSpan" />.The time in seconds. </returns>
    </member>
    <member name="P:System.Net.Http.Headers.CacheControlHeaderValue.MaxStale">
      <summary>Whether an HTTP client is willing to accept a response that has exceeded its expiration time.</summary>
      <returns>Returns <see cref="T:System.Boolean" />.true if the HTTP client is willing to accept a response that has exceed the expiration time; otherwise, false.</returns>
    </member>
    <member name="P:System.Net.Http.Headers.CacheControlHeaderValue.MaxStaleLimit">
      <summary>The maximum time, in seconds, an HTTP client is willing to accept a response that has exceeded its expiration time.</summary>
      <returns>Returns <see cref="T:System.TimeSpan" />.The time in seconds.</returns>
    </member>
    <member name="P:System.Net.Http.Headers.CacheControlHeaderValue.MinFresh">
      <summary>The freshness lifetime, in seconds, that an HTTP client is willing to accept a response.</summary>
      <returns>Returns <see cref="T:System.TimeSpan" />.The time in seconds.</returns>
    </member>
    <member name="P:System.Net.Http.Headers.CacheControlHeaderValue.MustRevalidate">
      <summary>Whether the origin server require revalidation of a cache entry on any subsequent use when the cache entry becomes stale.</summary>
      <returns>Returns <see cref="T:System.Boolean" />.true if the origin server requires revalidation of a cache entry on any subsequent use when the entry becomes stale; otherwise, false.</returns>
    </member>
    <member name="P:System.Net.Http.Headers.CacheControlHeaderValue.NoCache">
      <summary>Whether an HTTP client is willing to accept a cached response.</summary>
      <returns>Returns <see cref="T:System.Boolean" />.true if the HTTP client is willing to accept a cached response; otherwise, false.</returns>
    </member>
    <member name="P:System.Net.Http.Headers.CacheControlHeaderValue.NoCacheHeaders">
      <summary>A collection of fieldnames in the "no-cache" directive in a cache-control header field on an HTTP response.</summary>
      <returns>Returns <see cref="T:System.Collections.Generic.ICollection`1" />.A collection of fieldnames.</returns>
    </member>
    <member name="P:System.Net.Http.Headers.CacheControlHeaderValue.NoStore">
      <summary>Whether a cache must not store any part of either the HTTP request mressage or any response.</summary>
      <returns>Returns <see cref="T:System.Boolean" />.true if a cache must not store any part of either the HTTP request mressage or any response; otherwise, false.</returns>
    </member>
    <member name="P:System.Net.Http.Headers.CacheControlHeaderValue.NoTransform">
      <summary>Whether a cache or proxy must not change any aspect of the entity-body.</summary>
      <returns>Returns <see cref="T:System.Boolean" />.true if a cache or proxy must not change any aspect of the entity-body; otherwise, false.</returns>
    </member>
    <member name="P:System.Net.Http.Headers.CacheControlHeaderValue.OnlyIfCached">
      <summary>Whether a cache should either respond using a cached entry that is consistent with the other constraints of the HTTP request, or respond with a 504 (Gateway Timeout) status.</summary>
      <returns>Returns <see cref="T:System.Boolean" />.true if a cache should either respond using a cached entry that is consistent with the other constraints of the HTTP request, or respond with a 504 (Gateway Timeout) status; otherwise, false.</returns>
    </member>
    <member name="M:System.Net.Http.Headers.CacheControlHeaderValue.Parse(System.String)">
      <summary>Converts a string to an <see cref="T:System.Net.Http.Headers.CacheControlHeaderValue" /> instance.</summary>
      <returns>Returns <see cref="T:System.Net.Http.Headers.CacheControlHeaderValue" />.A <see cref="T:System.Net.Http.Headers.CacheControlHeaderValue" /> instance.</returns>
      <param name="input">A string that represents cache-control header value information.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> is a null reference.</exception>
      <exception cref="T:System.FormatException">
        <paramref name="input" /> is not valid cache-control header value information.</exception>
    </member>
    <member name="P:System.Net.Http.Headers.CacheControlHeaderValue.Private">
      <summary>Whether all or part of the HTTP response message is intended for a single user and must not be cached by a shared cache.</summary>
      <returns>Returns <see cref="T:System.Boolean" />.true if the HTTP response message is intended for a single user and must not be cached by a shared cache; otherwise, false.</returns>
    </member>
    <member name="P:System.Net.Http.Headers.CacheControlHeaderValue.PrivateHeaders">
      <summary>A collection fieldnames in the "private" directive in a cache-control header field on an HTTP response.</summary>
      <returns>Returns <see cref="T:System.Collections.Generic.ICollection`1" />.A collection of fieldnames.</returns>
    </member>
    <member name="P:System.Net.Http.Headers.CacheControlHeaderValue.ProxyRevalidate">
      <summary>Whether the origin server require revalidation of a cache entry on any subsequent use when the cache entry becomes stale for shared user agent caches.</summary>
      <returns>Returns <see cref="T:System.Boolean" />.true if the origin server requires revalidation of a cache entry on any subsequent use when the entry becomes stale for shared user agent caches; otherwise, false.</returns>
    </member>
    <member name="P:System.Net.Http.Headers.CacheControlHeaderValue.Public">
      <summary>Whether an HTTP response may be cached by any cache, even if it would normally be non-cacheable or cacheable only within a non- shared cache.</summary>
      <returns>Returns <see cref="T:System.Boolean" />.true if the HTTP response may be cached by any cache, even if it would normally be non-cacheable or cacheable only within a non- shared cache; otherwise, false.</returns>
    </member>
    <member name="P:System.Net.Http.Headers.CacheControlHeaderValue.SharedMaxAge">
      <summary>The shared maximum age, specified in seconds, in an HTTP response that overrides the "max-age" directive in a cache-control header or an Expires header for a shared cache.</summary>
      <returns>Returns <see cref="T:System.TimeSpan" />.The time in seconds.</returns>
    </member>
    <member name="M:System.Net.Http.Headers.CacheControlHeaderValue.System#ICloneable#Clone">
      <summary>Creates a new object that is a copy of the current <see cref="T:System.Net.Http.Headers.CacheControlHeaderValue" /> instance.</summary>
      <returns>Returns <see cref="T:System.Object" />.A copy of the current instance.</returns>
    </member>
    <member name="M:System.Net.Http.Headers.CacheControlHeaderValue.ToString">
      <summary>Returns a string that represents the current <see cref="T:System.Net.Http.Headers.CacheControlHeaderValue" /> object.</summary>
      <returns>Returns <see cref="T:System.String" />.A string that represents the current object.</returns>
    </member>
    <member name="M:System.Net.Http.Headers.CacheControlHeaderValue.TryParse(System.String,System.Net.Http.Headers.CacheControlHeaderValue@)">
      <summary>Determines whether a string is valid <see cref="T:System.Net.Http.Headers.CacheControlHeaderValue" /> information.</summary>
      <returns>Returns <see cref="T:System.Boolean" />.true if <paramref name="input" /> is valid <see cref="T:System.Net.Http.Headers.CacheControlHeaderValue" /> information; otherwise, false.</returns>
      <param name="input">The string to validate.</param>
      <param name="parsedValue">The <see cref="T:System.Net.Http.Headers.CacheControlHeaderValue" /> version of the string.</param>
    </member>
    <member name="T:System.Net.Http.Headers.ContentDispositionHeaderValue">
      <summary>Represents the value of the Content-Disposition header.</summary>
    </member>
    <member name="M:System.Net.Http.Headers.ContentDispositionHeaderValue.#ctor(System.Net.Http.Headers.ContentDispositionHeaderValue)">
      <summary>Initializes a new instance of the <see cref="T:System.Net.Http.Headers.ContentDispositionHeaderValue" /> class.</summary>
      <param name="source">A <see cref="T:System.Net.Http.Headers.ContentDispositionHeaderValue" />. </param>
    </member>
    <member name="M:System.Net.Http.Headers.ContentDispositionHeaderValue.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Net.Http.Headers.ContentDispositionHeaderValue" /> class.</summary>
      <param name="dispositionType">A string that contains a <see cref="T:System.Net.Http.Headers.ContentDispositionHeaderValue" />.</param>
    </member>
    <member name="P:System.Net.Http.Headers.ContentDispositionHeaderValue.CreationDate">
      <summary>The date at which   the file was created.</summary>
      <returns>Returns <see cref="T:System.DateTimeOffset" />.The file creation date.</returns>
    </member>
    <member name="P:System.Net.Http.Headers.ContentDispositionHeaderValue.DispositionType">
      <summary>The disposition type for a content body part.</summary>
      <returns>Returns <see cref="T:System.String" />.The disposition type. </returns>
    </member>
    <member name="M:System.Net.Http.Headers.ContentDispositionHeaderValue.Equals(System.Object)">
      <summary>Determines whether the specified <see cref="T:System.Object" /> is equal to the current <see cref="T:System.Net.Http.Headers.ContentDispositionHeaderValue" />  object.</summary>
      <returns>Returns <see cref="T:System.Boolean" />.true if the specified <see cref="T:System.Object" /> is equal to the current object; otherwise, false.</returns>
      <param name="obj">The object to compare with the current object.</param>
    </member>
    <member name="P:System.Net.Http.Headers.ContentDispositionHeaderValue.FileName">
      <summary>A suggestion for how to construct a filename for   storing the message payload to be used if the entity is   detached and stored in a separate file.</summary>
      <returns>Returns <see cref="T:System.String" />.A suggested filename.</returns>
    </member>
    <member name="P:System.Net.Http.Headers.ContentDispositionHeaderValue.FileNameStar">
      <summary>A suggestion for how to construct filenames for   storing message payloads to be used if the entities are    detached and stored in a separate files.</summary>
      <returns>Returns <see cref="T:System.String" />.A suggested filename of the form filename*.</returns>
    </member>
    <member name="M:System.Net.Http.Headers.ContentDispositionHeaderValue.GetHashCode">
      <summary>Serves as a hash function for an  <see cref="T:System.Net.Http.Headers.ContentDispositionHeaderValue" /> object.</summary>
      <returns>Returns <see cref="T:System.Int32" />.A hash code for the current object.</returns>
    </member>
    <member name="P:System.Net.Http.Headers.ContentDispositionHeaderValue.ModificationDate">
      <summary>The date at   which the file was last modified. </summary>
      <returns>Returns <see cref="T:System.DateTimeOffset" />.The file modification date.</returns>
    </member>
    <member name="P:System.Net.Http.Headers.ContentDispositionHeaderValue.Name">
      <summary>The name for a content body part.</summary>
      <returns>Returns <see cref="T:System.String" />.The name for the content body part.</returns>
    </member>
    <member name="P:System.Net.Http.Headers.ContentDispositionHeaderValue.Parameters">
      <summary>A set of parameters included the Content-Disposition header.</summary>
      <returns>Returns <see cref="T:System.Collections.Generic.ICollection`1" />.A collection of parameters. </returns>
    </member>
    <member name="M:System.Net.Http.Headers.ContentDispositionHeaderValue.Parse(System.String)">
      <summary>Converts a string to an <see cref="T:System.Net.Http.Headers.ContentDispositionHeaderValue" />  instance.</summary>
      <returns>Returns <see cref="T:System.Net.Http.Headers.ContentDispositionHeaderValue" />.An <see cref="T:System.Net.Http.Headers.ContentDispositionHeaderValue" />  instance.</returns>
      <param name="input">A string that represents content disposition header value information.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> is a null reference.</exception>
      <exception cref="T:System.FormatException">
        <paramref name="input" /> is not valid content disposition header value information.</exception>
    </member>
    <member name="P:System.Net.Http.Headers.ContentDispositionHeaderValue.ReadDate">
      <summary>The date the file was last read.</summary>
      <returns>Returns <see cref="T:System.DateTimeOffset" />.The last read date.</returns>
    </member>
    <member name="P:System.Net.Http.Headers.ContentDispositionHeaderValue.Size">
      <summary>The approximate size, in bytes, of the file. </summary>
      <returns>Returns <see cref="T:System.Int64" />.The approximate size, in bytes.</returns>
    </member>
    <member name="M:System.Net.Http.Headers.ContentDispositionHeaderValue.System#ICloneable#Clone">
      <summary>Creates a new object that is a copy of the current <see cref="T:System.Net.Http.Headers.ContentDispositionHeaderValue" />  instance.</summary>
      <returns>Returns <see cref="T:System.Object" />.A copy of the current instance.</returns>
    </member>
    <member name="M:System.Net.Http.Headers.ContentDispositionHeaderValue.ToString">
      <summary>Returns a string that represents the current <see cref="T:System.Net.Http.Headers.ContentDispositionHeaderValue" /> object.</summary>
      <returns>Returns <see cref="T:System.String" />.A string that represents the current object.</returns>
    </member>
    <member name="M:System.Net.Http.Headers.ContentDispositionHeaderValue.TryParse(System.String,System.Net.Http.Headers.ContentDispositionHeaderValue@)">
      <summary>Determines whether a string is valid <see cref="T:System.Net.Http.Headers.ContentDispositionHeaderValue" /> information.</summary>
      <returns>Returns <see cref="T:System.Boolean" />.true if <paramref name="input" /> is valid <see cref="T:System.Net.Http.Headers.ContentDispositionHeaderValue" /> information; otherwise, false.</returns>
      <param name="input">The string to validate.</param>
      <param name="parsedValue">The <see cref="T:System.Net.Http.Headers.ContentDispositionHeaderValue" /> version of the string.</param>
    </member>
    <member name="T:System.Net.Http.Headers.ContentRangeHeaderValue">
      <summary>Represents the value of the Content-Range header.</summary>
    </member>
    <member name="M:System.Net.Http.Headers.ContentRangeHeaderValue.#ctor(System.Int64)">
      <summary>Initializes a new instance of the <see cref="T:System.Net.Http.Headers.ContentRangeHeaderValue" /> class.</summary>
      <param name="length">The starting or ending point of the range, in bytes.</param>
    </member>
    <member name="M:System.Net.Http.Headers.ContentRangeHeaderValue.#ctor(System.Int64,System.Int64)">
      <summary>Initializes a new instance of the <see cref="T:System.Net.Http.Headers.ContentRangeHeaderValue" /> class.</summary>
      <param name="from">The position, in bytes, at which to start sending data.</param>
      <param name="to">The position, in bytes, at which to stop sending data.</param>
    </member>
    <member name="M:System.Net.Http.Headers.ContentRangeHeaderValue.#ctor(System.Int64,System.Int64,System.Int64)">
      <summary>Initializes a new instance of the <see cref="T:System.Net.Http.Headers.ContentRangeHeaderValue" /> class.</summary>
      <param name="from">The position, in bytes, at which to start sending data.</param>
      <param name="to">The position, in bytes, at which to stop sending data.</param>
      <param name="length">The starting or ending point of the range, in bytes.</param>
    </member>
    <member name="M:System.Net.Http.Headers.ContentRangeHeaderValue.Equals(System.Object)">
      <summary>Determines whether the specified Object is equal to the current <see cref="T:System.Net.Http.Headers.ContentRangeHeaderValue" /> object.</summary>
      <returns>Returns <see cref="T:System.Boolean" />.true if the specified <see cref="T:System.Object" /> is equal to the current object; otherwise, false.</returns>
      <param name="obj">The object to compare with the current object.</param>
    </member>
    <member name="P:System.Net.Http.Headers.ContentRangeHeaderValue.From">
      <summary>Gets the position at which to start sending data.</summary>
      <returns>Returns <see cref="T:System.Int64" />.The position, in bytes, at which to start sending data.</returns>
    </member>
    <member name="M:System.Net.Http.Headers.ContentRangeHeaderValue.GetHashCode">
      <summary>Serves as a hash function for an <see cref="T:System.Net.Http.Headers.ContentRangeHeaderValue" /> object.</summary>
      <returns>Returns <see cref="T:System.Int32" />.A hash code for the current object.</returns>
    </member>
    <member name="P:System.Net.Http.Headers.ContentRangeHeaderValue.HasLength">
      <summary>Gets whether the Content-Range header has a length specified.</summary>
      <returns>Returns <see cref="T:System.Boolean" />.true if the Content-Range has a length specified; otherwise, false.</returns>
    </member>
    <member name="P:System.Net.Http.Headers.ContentRangeHeaderValue.HasRange">
      <summary>Gets whether the Content-Range has a range specified. </summary>
      <returns>Returns <see cref="T:System.Boolean" />.true if the Content-Range has a range specified; otherwise, false.</returns>
    </member>
    <member name="P:System.Net.Http.Headers.ContentRangeHeaderValue.Length">
      <summary>Gets the length of the full entity-body.</summary>
      <returns>Returns <see cref="T:System.Int64" />.The length of the full entity-body.</returns>
    </member>
    <member name="M:System.Net.Http.Headers.ContentRangeHeaderValue.Parse(System.String)">
      <summary>Converts a string to an <see cref="T:System.Net.Http.Headers.ContentRangeHeaderValue" /> instance.</summary>
      <returns>Returns <see cref="T:System.Net.Http.Headers.ContentRangeHeaderValue" />.An <see cref="T:System.Net.Http.Headers.ContentRangeHeaderValue" /> instance.</returns>
      <param name="input">A string that represents content range header value information.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> is a null reference.</exception>
      <exception cref="T:System.FormatException">
        <paramref name="input" /> is not valid content range header value information.</exception>
    </member>
    <member name="M:System.Net.Http.Headers.ContentRangeHeaderValue.System#ICloneable#Clone">
      <summary>Creates a new object that is a copy of the current <see cref="T:System.Net.Http.Headers.ContentRangeHeaderValue" /> instance.</summary>
      <returns>Returns <see cref="T:System.Object" />.A copy of the current instance.</returns>
    </member>
    <member name="P:System.Net.Http.Headers.ContentRangeHeaderValue.To">
      <summary>Gets the position at which to stop sending data.</summary>
      <returns>Returns <see cref="T:System.Int64" />.The position at which to stop sending data.</returns>
    </member>
    <member name="M:System.Net.Http.Headers.ContentRangeHeaderValue.ToString">
      <summary>Returns a string that represents the current <see cref="T:System.Net.Http.Headers.ContentRangeHeaderValue" /> object.</summary>
      <returns>Returns <see cref="T:System.String" />.A string that represents the current object.</returns>
    </member>
    <member name="M:System.Net.Http.Headers.ContentRangeHeaderValue.TryParse(System.String,System.Net.Http.Headers.ContentRangeHeaderValue@)">
      <summary>Determines whether a string is valid <see cref="T:System.Net.Http.Headers.ContentRangeHeaderValue" /> information.</summary>
      <returns>Returns <see cref="T:System.Boolean" />.true if <paramref name="input" /> is valid <see cref="T:System.Net.Http.Headers.ContentRangeHeaderValue" /> information; otherwise, false.</returns>
      <param name="input">The string to validate.</param>
      <param name="parsedValue">The <see cref="T:System.Net.Http.Headers.ContentRangeHeaderValue" /> version of the string.</param>
    </member>
    <member name="P:System.Net.Http.Headers.ContentRangeHeaderValue.Unit">
      <summary>The range units used.</summary>
      <returns>Returns <see cref="T:System.String" />.A <see cref="T:System.String" /> that contains range units. </returns>
    </member>
    <member name="T:System.Net.Http.Headers.EntityTagHeaderValue">
      <summary>Represents an entity-tag header value.</summary>
    </member>
    <member name="M:System.Net.Http.Headers.EntityTagHeaderValue.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Net.Http.Headers.EntityTagHeaderValue" /> class.</summary>
      <param name="tag">A string that contains an <see cref="T:System.Net.Http.Headers.EntityTagHeaderValue" />.</param>
    </member>
    <member name="M:System.Net.Http.Headers.EntityTagHeaderValue.#ctor(System.String,System.Boolean)">
      <summary>Initializes a new instance of the <see cref="T:System.Net.Http.Headers.EntityTagHeaderValue" /> class.</summary>
      <param name="tag">A string that contains an  <see cref="T:System.Net.Http.Headers.EntityTagHeaderValue" />.</param>
      <param name="isWeak">A value that indicates if this entity-tag header is a weak validator. If the entity-tag header is weak validator, then <paramref name="isWeak" /> should be set to true. If the entity-tag header is a strong validator, then <paramref name="isWeak" /> should be set to false.</param>
    </member>
    <member name="P:System.Net.Http.Headers.EntityTagHeaderValue.Any">
      <summary>Gets the entity-tag header value.</summary>
      <returns>Returns <see cref="T:System.Net.Http.Headers.EntityTagHeaderValue" />.</returns>
    </member>
    <member name="M:System.Net.Http.Headers.EntityTagHeaderValue.Equals(System.Object)">
      <summary>Determines whether the specified <see cref="T:System.Object" /> is equal to the current <see cref="T:System.Net.Http.Headers.EntityTagHeaderValue" /> object.</summary>
      <returns>Returns <see cref="T:System.Boolean" />.true if the specified <see cref="T:System.Object" /> is equal to the current object; otherwise, false.</returns>
      <param name="obj">The object to compare with the current object.</param>
    </member>
    <member name="M:System.Net.Http.Headers.EntityTagHeaderValue.GetHashCode">
      <summary>Serves as a hash function for an <see cref="T:System.Net.Http.Headers.EntityTagHeaderValue" /> object.</summary>
      <returns>Returns <see cref="T:System.Int32" />.A hash code for the current object.</returns>
    </member>
    <member name="P:System.Net.Http.Headers.EntityTagHeaderValue.IsWeak">
      <summary>Gets whether the entity-tag is prefaced by a weakness indicator.</summary>
      <returns>Returns <see cref="T:System.Boolean" />.true if the entity-tag is prefaced by a weakness indicator; otherwise, false.</returns>
    </member>
    <member name="M:System.Net.Http.Headers.EntityTagHeaderValue.Parse(System.String)">
      <summary>Converts a string to an <see cref="T:System.Net.Http.Headers.EntityTagHeaderValue" /> instance.</summary>
      <returns>Returns <see cref="T:System.Net.Http.Headers.EntityTagHeaderValue" />.An <see cref="T:System.Net.Http.Headers.EntityTagHeaderValue" /> instance.</returns>
      <param name="input">A string that represents entity tag header value information.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> is a null reference.</exception>
      <exception cref="T:System.FormatException">
        <paramref name="input" /> is not valid entity tag header value information.</exception>
    </member>
    <member name="M:System.Net.Http.Headers.EntityTagHeaderValue.System#ICloneable#Clone">
      <summary>Creates a new object that is a copy of the current <see cref="T:System.Net.Http.Headers.EntityTagHeaderValue" /> instance.</summary>
      <returns>Returns <see cref="T:System.Object" />.A copy of the current instance.</returns>
    </member>
    <member name="P:System.Net.Http.Headers.EntityTagHeaderValue.Tag">
      <summary>Gets the opaque quoted string. </summary>
      <returns>Returns <see cref="T:System.String" />.An opaque quoted string.</returns>
    </member>
    <member name="M:System.Net.Http.Headers.EntityTagHeaderValue.ToString">
      <summary>Returns a string that represents the current <see cref="T:System.Net.Http.Headers.EntityTagHeaderValue" /> object.</summary>
      <returns>Returns <see cref="T:System.String" />.A string that represents the current object.</returns>
    </member>
    <member name="M:System.Net.Http.Headers.EntityTagHeaderValue.TryParse(System.String,System.Net.Http.Headers.EntityTagHeaderValue@)">
      <summary>Determines whether a string is valid <see cref="T:System.Net.Http.Headers.EntityTagHeaderValue" /> information.</summary>
      <returns>Returns <see cref="T:System.Boolean" />.true if <paramref name="input" /> is valid <see cref="T:System.Net.Http.Headers.EntityTagHeaderValue" /> information; otherwise, false.</returns>
      <param name="input">The string to validate.</param>
      <param name="parsedValue">The <see cref="T:System.Net.Http.Headers.EntityTagHeaderValue" /> version of the string.</param>
    </member>
    <member name="T:System.Net.Http.Headers.HttpContentHeaders">
      <summary>Represents the collection of Content Headers as defined in RFC 2616.</summary>
    </member>
    <member name="P:System.Net.Http.Headers.HttpContentHeaders.Allow">
      <summary>Gets the value of the Allow content header on an HTTP response. </summary>
      <returns>Returns <see cref="T:System.Collections.Generic.ICollection`1" />.The value of the Allow header on an HTTP response.</returns>
    </member>
    <member name="P:System.Net.Http.Headers.HttpContentHeaders.ContentDisposition">
      <summary>Gets the value of the Content-Disposition content header on an HTTP response.</summary>
      <returns>Returns <see cref="T:System.Net.Http.Headers.ContentDispositionHeaderValue" />.The value of the Content-Disposition content header on an HTTP response.</returns>
    </member>
    <member name="P:System.Net.Http.Headers.HttpContentHeaders.ContentEncoding">
      <summary>Gets the value of the Content-Encoding content header on an HTTP response.</summary>
      <returns>Returns <see cref="T:System.Collections.Generic.ICollection`1" />.The value of the Content-Encoding content header on an HTTP response.</returns>
    </member>
    <member name="P:System.Net.Http.Headers.HttpContentHeaders.ContentLanguage">
      <summary>Gets the value of the Content-Language content header on an HTTP response.</summary>
      <returns>Returns <see cref="T:System.Collections.Generic.ICollection`1" />.The value of the Content-Language content header on an HTTP response.</returns>
    </member>
    <member name="P:System.Net.Http.Headers.HttpContentHeaders.ContentLength">
      <summary>Gets or sets the value of the Content-Length content header on an HTTP response.</summary>
      <returns>Returns <see cref="T:System.Int64" />.The value of the Content-Length content header on an HTTP response.</returns>
    </member>
    <member name="P:System.Net.Http.Headers.HttpContentHeaders.ContentLocation">
      <summary>Gets or sets the value of the Content-Location content header on an HTTP response.</summary>
      <returns>Returns <see cref="T:System.Uri" />.The value of the Content-Location content header on an HTTP response.</returns>
    </member>
    <member name="P:System.Net.Http.Headers.HttpContentHeaders.ContentMD5">
      <summary>Gets or sets the value of the Content-MD5 content header on an HTTP response.</summary>
      <returns>Returns <see cref="T:System.Byte" />.The value of the Content-MD5 content header on an HTTP response.</returns>
    </member>
    <member name="P:System.Net.Http.Headers.HttpContentHeaders.ContentRange">
      <summary>Gets or sets the value of the Content-Range content header on an HTTP response.</summary>
      <returns>Returns <see cref="T:System.Net.Http.Headers.ContentRangeHeaderValue" />.The value of the Content-Range content header on an HTTP response.</returns>
    </member>
    <member name="P:System.Net.Http.Headers.HttpContentHeaders.ContentType">
      <summary>Gets or sets the value of the Content-Type content header on an HTTP response.</summary>
      <returns>Returns <see cref="T:System.Net.Http.Headers.MediaTypeHeaderValue" />.The value of the Content-Type content header on an HTTP response.</returns>
    </member>
    <member name="P:System.Net.Http.Headers.HttpContentHeaders.Expires">
      <summary>Gets or sets the value of the Expires content header on an HTTP response.</summary>
      <returns>Returns <see cref="T:System.DateTimeOffset" />.The value of the Expires content header on an HTTP response.</returns>
    </member>
    <member name="P:System.Net.Http.Headers.HttpContentHeaders.LastModified">
      <summary>Gets or sets the value of the Last-Modified content header on an HTTP response.</summary>
      <returns>Returns <see cref="T:System.DateTimeOffset" />.The value of the Last-Modified content header on an HTTP response.</returns>
    </member>
    <member name="T:System.Net.Http.Headers.HttpHeaders">
      <summary>A collection of headers and their values as defined in RFC 2616.</summary>
    </member>
    <member name="M:System.Net.Http.Headers.HttpHeaders.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Net.Http.Headers.HttpHeaders" /> class.</summary>
    </member>
    <member name="M:System.Net.Http.Headers.HttpHeaders.Add(System.String,System.Collections.Generic.IEnumerable{System.String})">
      <summary>Adds the specified header and its values into the <see cref="T:System.Net.Http.Headers.HttpHeaders" /> collection.</summary>
      <param name="name">The header to add to the collection.</param>
      <param name="values">A list of header values to add to the collection.</param>
    </member>
    <member name="M:System.Net.Http.Headers.HttpHeaders.Add(System.String,System.String)">
      <summary>Adds the specified header and its value into the <see cref="T:System.Net.Http.Headers.HttpHeaders" /> collection.</summary>
      <param name="name">The header to add to the collection.</param>
      <param name="value">The content of the header.</param>
    </member>
    <member name="M:System.Net.Http.Headers.HttpHeaders.Clear">
      <summary>Removes all headers from the <see cref="T:System.Net.Http.Headers.HttpHeaders" /> collection.</summary>
    </member>
    <member name="M:System.Net.Http.Headers.HttpHeaders.Contains(System.String)">
      <summary>Returns if  a specific header exists in the <see cref="T:System.Net.Http.Headers.HttpHeaders" /> collection.</summary>
      <returns>Returns <see cref="T:System.Boolean" />.true is the specified header exists in the collection; otherwise false.</returns>
      <param name="name">The specific header.</param>
    </member>
    <member name="M:System.Net.Http.Headers.HttpHeaders.GetEnumerator">
      <summary>Returns an enumerator that can iterate through the <see cref="T:System.Net.Http.Headers.HttpHeaders" /> instance.</summary>
      <returns>Returns <see cref="T:System.Collections.Generic.IEnumerator`1" />.An enumerator for the <see cref="T:System.Net.Http.Headers.HttpHeaders" />.</returns>
    </member>
    <member name="M:System.Net.Http.Headers.HttpHeaders.GetValues(System.String)">
      <summary>Returns all header values for a specified header stored in the <see cref="T:System.Net.Http.Headers.HttpHeaders" /> collection.</summary>
      <returns>Returns <see cref="T:System.Collections.Generic.IEnumerable`1" />.An array of header strings.</returns>
      <param name="name">The specified header to return values for.</param>
    </member>
    <member name="M:System.Net.Http.Headers.HttpHeaders.Remove(System.String)">
      <summary>Removes the specified header from the <see cref="T:System.Net.Http.Headers.HttpHeaders" /> collection.</summary>
      <returns>Returns <see cref="T:System.Boolean" />.</returns>
      <param name="name">The name of the header to remove from the collection. </param>
    </member>
    <member name="M:System.Net.Http.Headers.HttpHeaders.System#Collections#IEnumerable#GetEnumerator">
      <summary>Gets an enumerator that can iterate through a <see cref="T:System.Net.Http.Headers.HttpHeaders" />.</summary>
      <returns>Returns <see cref="T:System.Collections.IEnumerator" />.An instance of an implementation of an <see cref="T:System.Collections.IEnumerator" /> that can iterate through a <see cref="T:System.Net.Http.Headers.HttpHeaders" />.</returns>
    </member>
    <member name="M:System.Net.Http.Headers.HttpHeaders.ToString">
      <summary>Returns a string that represents the current <see cref="T:System.Net.Http.Headers.HttpHeaders" /> object.</summary>
      <returns>Returns <see cref="T:System.String" />.A string that represents the current object.</returns>
    </member>
    <member name="M:System.Net.Http.Headers.HttpHeaders.TryAddWithoutValidation(System.String,System.Collections.Generic.IEnumerable{System.String})">
      <summary>Returns a value that indicates whether the specified header and its values were added to the <see cref="T:System.Net.Http.Headers.HttpHeaders" /> collection without validating the provided information.</summary>
      <returns>Returns <see cref="T:System.Boolean" />.true if the specified header <paramref name="name" /> and <paramref name="values" /> could be added to the collection; otherwise false.</returns>
      <param name="name">The header to add to the collection.</param>
      <param name="values">The values of the header.</param>
    </member>
    <member name="M:System.Net.Http.Headers.HttpHeaders.TryAddWithoutValidation(System.String,System.String)">
      <summary>Returns a value that indicates whether the specified header and its value were added to the <see cref="T:System.Net.Http.Headers.HttpHeaders" /> collection without validating the provided information.</summary>
      <returns>Returns <see cref="T:System.Boolean" />.true if the specified header <paramref name="name" /> and <paramref name="value" /> could be added to the collection; otherwise false.</returns>
      <param name="name">The header to add to the collection.</param>
      <param name="value">The content of the header.</param>
    </member>
    <member name="M:System.Net.Http.Headers.HttpHeaders.TryGetValues(System.String,System.Collections.Generic.IEnumerable{System.String}@)">
      <summary>Return if a specified header and specified values are stored in the <see cref="T:System.Net.Http.Headers.HttpHeaders" /> collection.</summary>
      <returns>Returns <see cref="T:System.Boolean" />.true is the specified header <paramref name="name" /> and values are stored in the collection; otherwise false.</returns>
      <param name="name">The specified header.</param>
      <param name="values">The specified header values.</param>
    </member>
    <member name="T:System.Net.Http.Headers.HttpHeaderValueCollection`1">
      <summary>Represents a collection of header values.</summary>
      <typeparam name="T"></typeparam>
    </member>
    <member name="M:System.Net.Http.Headers.HttpHeaderValueCollection`1.Add(`0)"></member>
    <member name="M:System.Net.Http.Headers.HttpHeaderValueCollection`1.Clear"></member>
    <member name="M:System.Net.Http.Headers.HttpHeaderValueCollection`1.Contains(`0)">
      <returns>Returns <see cref="T:System.Boolean" />.</returns>
    </member>
    <member name="M:System.Net.Http.Headers.HttpHeaderValueCollection`1.CopyTo(`0[],System.Int32)"></member>
    <member name="P:System.Net.Http.Headers.HttpHeaderValueCollection`1.Count">
      <returns>Returns <see cref="T:System.Int32" />.</returns>
    </member>
    <member name="M:System.Net.Http.Headers.HttpHeaderValueCollection`1.GetEnumerator">
      <returns>Returns <see cref="T:System.Collections.Generic.IEnumerator`1" />.</returns>
    </member>
    <member name="P:System.Net.Http.Headers.HttpHeaderValueCollection`1.IsReadOnly">
      <returns>Returns <see cref="T:System.Boolean" />.</returns>
    </member>
    <member name="M:System.Net.Http.Headers.HttpHeaderValueCollection`1.ParseAdd(System.String)"></member>
    <member name="M:System.Net.Http.Headers.HttpHeaderValueCollection`1.Remove(`0)">
      <returns>Returns <see cref="T:System.Boolean" />.</returns>
    </member>
    <member name="M:System.Net.Http.Headers.HttpHeaderValueCollection`1.System#Collections#IEnumerable#GetEnumerator">
      <returns>Returns <see cref="T:System.Collections.IEnumerator" />.</returns>
    </member>
    <member name="M:System.Net.Http.Headers.HttpHeaderValueCollection`1.ToString">
      <summary>Returns a string that represents the current XXX object.</summary>
      <returns>Returns <see cref="T:System.String" />.A string that represents the current object.</returns>
    </member>
    <member name="M:System.Net.Http.Headers.HttpHeaderValueCollection`1.TryParseAdd(System.String)">
      <summary>Determines whether a string is valid XXX information.</summary>
      <returns>Returns <see cref="T:System.Boolean" />.</returns>
      <param name="input">The string to validate.</param>
    </member>
    <member name="T:System.Net.Http.Headers.HttpRequestHeaders">
      <summary>Represents the collection of Request Headers as defined in RFC 2616.</summary>
    </member>
    <member name="P:System.Net.Http.Headers.HttpRequestHeaders.Accept">
      <summary>Gets the value of the Accept header for an HTTP request.</summary>
      <returns>Returns <see cref="T:System.Net.Http.Headers.HttpHeaderValueCollection`1" />.The value of the Accept header for an HTTP request.</returns>
    </member>
    <member name="P:System.Net.Http.Headers.HttpRequestHeaders.AcceptCharset">
      <summary>Gets the value of the Accept-Charset header for an HTTP request.</summary>
      <returns>Returns <see cref="T:System.Net.Http.Headers.HttpHeaderValueCollection`1" />.The value of the Accept-Charset header for an HTTP request.</returns>
    </member>
    <member name="P:System.Net.Http.Headers.HttpRequestHeaders.AcceptEncoding">
      <summary>Gets the value of the Accept-Encoding header for an HTTP request.</summary>
      <returns>Returns <see cref="T:System.Net.Http.Headers.HttpHeaderValueCollection`1" />.The value of the Accept-Encoding header for an HTTP request.</returns>
    </member>
    <member name="P:System.Net.Http.Headers.HttpRequestHeaders.AcceptLanguage">
      <summary>Gets the value of the Accept-Language header for an HTTP request.</summary>
      <returns>Returns <see cref="T:System.Net.Http.Headers.HttpHeaderValueCollection`1" />.The value of the Accept-Language header for an HTTP request.</returns>
    </member>
    <member name="P:System.Net.Http.Headers.HttpRequestHeaders.Authorization">
      <summary>Gets or sets the value of the Authorization header for an HTTP request.</summary>
      <returns>Returns <see cref="T:System.Net.Http.Headers.AuthenticationHeaderValue" />.The value of the Authorization header for an HTTP request.</returns>
    </member>
    <member name="P:System.Net.Http.Headers.HttpRequestHeaders.CacheControl">
      <summary>Gets or sets the value of the Cache-Control header for an HTTP request.</summary>
      <returns>Returns <see cref="T:System.Net.Http.Headers.CacheControlHeaderValue" />.The value of the Cache-Control header for an HTTP request.</returns>
    </member>
    <member name="P:System.Net.Http.Headers.HttpRequestHeaders.Connection">
      <summary>Gets the value of the Connection header for an HTTP request.</summary>
      <returns>Returns <see cref="T:System.Net.Http.Headers.HttpHeaderValueCollection`1" />.The value of the Connection header for an HTTP request.</returns>
    </member>
    <member name="P:System.Net.Http.Headers.HttpRequestHeaders.ConnectionClose">
      <summary>Gets or sets a value that indicates if the Connection header for an HTTP request contains Close.</summary>
      <returns>Returns <see cref="T:System.Boolean" />.true if the Connection header contains Close, otherwise false.</returns>
    </member>
    <member name="P:System.Net.Http.Headers.HttpRequestHeaders.Date">
      <summary>Gets or sets the value of the Date header for an HTTP request.</summary>
      <returns>Returns <see cref="T:System.DateTimeOffset" />.The value of the Date header for an HTTP request.</returns>
    </member>
    <member name="P:System.Net.Http.Headers.HttpRequestHeaders.Expect">
      <summary>Gets the value of the Expect header for an HTTP request.</summary>
      <returns>Returns <see cref="T:System.Net.Http.Headers.HttpHeaderValueCollection`1" />.The value of the Expect header for an HTTP request.</returns>
    </member>
    <member name="P:System.Net.Http.Headers.HttpRequestHeaders.ExpectContinue">
      <summary>Gets or sets a value that indicates if the Expect header for an HTTP request contains Continue.</summary>
      <returns>Returns <see cref="T:System.Boolean" />.true if the Expect header contains Continue, otherwise false.</returns>
    </member>
    <member name="P:System.Net.Http.Headers.HttpRequestHeaders.From">
      <summary>Gets or sets the value of the From header for an HTTP request.</summary>
      <returns>Returns <see cref="T:System.String" />.The value of the From header for an HTTP request.</returns>
    </member>
    <member name="P:System.Net.Http.Headers.HttpRequestHeaders.Host">
      <summary>Gets or sets the value of the Host header for an HTTP request.</summary>
      <returns>Returns <see cref="T:System.String" />.The value of the Host header for an HTTP request.</returns>
    </member>
    <member name="P:System.Net.Http.Headers.HttpRequestHeaders.IfMatch">
      <summary>Gets the value of the If-Match header for an HTTP request.</summary>
      <returns>Returns <see cref="T:System.Net.Http.Headers.HttpHeaderValueCollection`1" />.The value of the If-Match header for an HTTP request.</returns>
    </member>
    <member name="P:System.Net.Http.Headers.HttpRequestHeaders.IfModifiedSince">
      <summary>Gets or sets the value of the If-Modified-Since header for an HTTP request.</summary>
      <returns>Returns <see cref="T:System.DateTimeOffset" />.The value of the If-Modified-Since header for an HTTP request.</returns>
    </member>
    <member name="P:System.Net.Http.Headers.HttpRequestHeaders.IfNoneMatch">
      <summary>Gets the value of the If-None-Match header for an HTTP request.</summary>
      <returns>Returns <see cref="T:System.Net.Http.Headers.HttpHeaderValueCollection`1" />.Gets the value of the If-None-Match header for an HTTP request.</returns>
    </member>
    <member name="P:System.Net.Http.Headers.HttpRequestHeaders.IfRange">
      <summary>Gets or sets the value of the If-Range header for an HTTP request.</summary>
      <returns>Returns <see cref="T:System.Net.Http.Headers.RangeConditionHeaderValue" />.The value of the If-Range header for an HTTP request.</returns>
    </member>
    <member name="P:System.Net.Http.Headers.HttpRequestHeaders.IfUnmodifiedSince">
      <summary>Gets or sets the value of the If-Unmodified-Since header for an HTTP request.</summary>
      <returns>Returns <see cref="T:System.DateTimeOffset" />.The value of the If-Unmodified-Since header for an HTTP request.</returns>
    </member>
    <member name="P:System.Net.Http.Headers.HttpRequestHeaders.MaxForwards">
      <summary>Gets or sets the value of the Max-Forwards header for an HTTP request.</summary>
      <returns>Returns <see cref="T:System.Int32" />.The value of the Max-Forwards header for an HTTP request.</returns>
    </member>
    <member name="P:System.Net.Http.Headers.HttpRequestHeaders.Pragma">
      <summary>Gets the value of the Pragma header for an HTTP request.</summary>
      <returns>Returns <see cref="T:System.Net.Http.Headers.HttpHeaderValueCollection`1" />.The value of the Pragma header for an HTTP request.</returns>
    </member>
    <member name="P:System.Net.Http.Headers.HttpRequestHeaders.ProxyAuthorization">
      <summary>Gets or sets the value of the Proxy-Authorization header for an HTTP request.</summary>
      <returns>Returns <see cref="T:System.Net.Http.Headers.AuthenticationHeaderValue" />.The value of the Proxy-Authorization header for an HTTP request.</returns>
    </member>
    <member name="P:System.Net.Http.Headers.HttpRequestHeaders.Range">
      <summary>Gets or sets the value of the Range header for an HTTP request.</summary>
      <returns>Returns <see cref="T:System.Net.Http.Headers.RangeHeaderValue" />.The value of the Range header for an HTTP request.</returns>
    </member>
    <member name="P:System.Net.Http.Headers.HttpRequestHeaders.Referrer">
      <summary>Gets or sets the value of the Referer header for an HTTP request.</summary>
      <returns>Returns <see cref="T:System.Uri" />.The value of the Referer header for an HTTP request.</returns>
    </member>
    <member name="P:System.Net.Http.Headers.HttpRequestHeaders.TE">
      <summary>Gets the value of the TE header for an HTTP request.</summary>
      <returns>Returns <see cref="T:System.Net.Http.Headers.HttpHeaderValueCollection`1" />.The value of the TE header for an HTTP request.</returns>
    </member>
    <member name="P:System.Net.Http.Headers.HttpRequestHeaders.Trailer">
      <summary>Gets the value of the Trailer header for an HTTP request.</summary>
      <returns>Returns <see cref="T:System.Net.Http.Headers.HttpHeaderValueCollection`1" />.The value of the Trailer header for an HTTP request.</returns>
    </member>
    <member name="P:System.Net.Http.Headers.HttpRequestHeaders.TransferEncoding">
      <summary>Gets the value of the Transfer-Encoding header for an HTTP request.</summary>
      <returns>Returns <see cref="T:System.Net.Http.Headers.HttpHeaderValueCollection`1" />.The value of the Transfer-Encoding header for an HTTP request.</returns>
    </member>
    <member name="P:System.Net.Http.Headers.HttpRequestHeaders.TransferEncodingChunked">
      <summary>Gets or sets a value that indicates if the Transfer-Encoding header for an HTTP request contains chunked.</summary>
      <returns>Returns <see cref="T:System.Boolean" />.true if the Transfer-Encoding header contains chunked, otherwise false.</returns>
    </member>
    <member name="P:System.Net.Http.Headers.HttpRequestHeaders.Upgrade">
      <summary>Gets the value of the Upgrade header for an HTTP request.</summary>
      <returns>Returns <see cref="T:System.Net.Http.Headers.HttpHeaderValueCollection`1" />.The value of the Upgrade header for an HTTP request.</returns>
    </member>
    <member name="P:System.Net.Http.Headers.HttpRequestHeaders.UserAgent">
      <summary>Gets the value of the User-Agent header for an HTTP request.</summary>
      <returns>Returns <see cref="T:System.Net.Http.Headers.HttpHeaderValueCollection`1" />.The value of the User-Agent header for an HTTP request.</returns>
    </member>
    <member name="P:System.Net.Http.Headers.HttpRequestHeaders.Via">
      <summary>Gets the value of the Via header for an HTTP request.</summary>
      <returns>Returns <see cref="T:System.Net.Http.Headers.HttpHeaderValueCollection`1" />.The value of the Via header for an HTTP request.</returns>
    </member>
    <member name="P:System.Net.Http.Headers.HttpRequestHeaders.Warning">
      <summary>Gets the value of the Warning header for an HTTP request.</summary>
      <returns>Returns <see cref="T:System.Net.Http.Headers.HttpHeaderValueCollection`1" />.The value of the Warning header for an HTTP request.</returns>
    </member>
    <member name="T:System.Net.Http.Headers.HttpResponseHeaders">
      <summary>Represents the collection of Response Headers as defined in RFC 2616.</summary>
    </member>
    <member name="P:System.Net.Http.Headers.HttpResponseHeaders.AcceptRanges">
      <summary>Gets the value of the Accept-Ranges header for an HTTP response.</summary>
      <returns>Returns <see cref="T:System.Net.Http.Headers.HttpHeaderValueCollection`1" />.The value of the Accept-Ranges header for an HTTP response.</returns>
    </member>
    <member name="P:System.Net.Http.Headers.HttpResponseHeaders.Age">
      <summary>Gets or sets the value of the Age header for an HTTP response.</summary>
      <returns>Returns <see cref="T:System.TimeSpan" />.The value of the Age header for an HTTP response.</returns>
    </member>
    <member name="P:System.Net.Http.Headers.HttpResponseHeaders.CacheControl">
      <summary>Gets or sets the value of the Cache-Control header for an HTTP response.</summary>
      <returns>Returns <see cref="T:System.Net.Http.Headers.CacheControlHeaderValue" />.The value of the Cache-Control header for an HTTP response.</returns>
    </member>
    <member name="P:System.Net.Http.Headers.HttpResponseHeaders.Connection">
      <summary>Gets the value of the Connection header for an HTTP response.</summary>
      <returns>Returns <see cref="T:System.Net.Http.Headers.HttpHeaderValueCollection`1" />.The value of the Connection header for an HTTP response.</returns>
    </member>
    <member name="P:System.Net.Http.Headers.HttpResponseHeaders.ConnectionClose">
      <summary>Gets or sets a value that indicates if the Connection header for an HTTP response contains Close.</summary>
      <returns>Returns <see cref="T:System.Boolean" />.true if the Connection header contains Close, otherwise false.</returns>
    </member>
    <member name="P:System.Net.Http.Headers.HttpResponseHeaders.Date">
      <summary>Gets or sets the value of the Date header for an HTTP response.</summary>
      <returns>Returns <see cref="T:System.DateTimeOffset" />.The value of the Date header for an HTTP response.</returns>
    </member>
    <member name="P:System.Net.Http.Headers.HttpResponseHeaders.ETag">
      <summary>Gets or sets the value of the ETag header for an HTTP response.</summary>
      <returns>Returns <see cref="T:System.Net.Http.Headers.EntityTagHeaderValue" />.The value of the ETag header for an HTTP response.</returns>
    </member>
    <member name="P:System.Net.Http.Headers.HttpResponseHeaders.Location">
      <summary>Gets or sets the value of the Location header for an HTTP response.</summary>
      <returns>Returns <see cref="T:System.Uri" />.The value of the Location header for an HTTP response.</returns>
    </member>
    <member name="P:System.Net.Http.Headers.HttpResponseHeaders.Pragma">
      <summary>Gets the value of the Pragma header for an HTTP response.</summary>
      <returns>Returns <see cref="T:System.Net.Http.Headers.HttpHeaderValueCollection`1" />.The value of the Pragma header for an HTTP response.</returns>
    </member>
    <member name="P:System.Net.Http.Headers.HttpResponseHeaders.ProxyAuthenticate">
      <summary>Gets the value of the Proxy-Authenticate header for an HTTP response.</summary>
      <returns>Returns <see cref="T:System.Net.Http.Headers.HttpHeaderValueCollection`1" />.The value of the Proxy-Authenticate header for an HTTP response.</returns>
    </member>
    <member name="P:System.Net.Http.Headers.HttpResponseHeaders.RetryAfter">
      <summary>Gets or sets the value of the Retry-After header for an HTTP response.</summary>
      <returns>Returns <see cref="T:System.Net.Http.Headers.RetryConditionHeaderValue" />.The value of the Retry-After header for an HTTP response.</returns>
    </member>
    <member name="P:System.Net.Http.Headers.HttpResponseHeaders.Server">
      <summary>Gets the value of the Server header for an HTTP response.</summary>
      <returns>Returns <see cref="T:System.Net.Http.Headers.HttpHeaderValueCollection`1" />.The value of the Server header for an HTTP response.</returns>
    </member>
    <member name="P:System.Net.Http.Headers.HttpResponseHeaders.Trailer">
      <summary>Gets the value of the Trailer header for an HTTP response.</summary>
      <returns>Returns <see cref="T:System.Net.Http.Headers.HttpHeaderValueCollection`1" />.The value of the Trailer header for an HTTP response.</returns>
    </member>
    <member name="P:System.Net.Http.Headers.HttpResponseHeaders.TransferEncoding">
      <summary>Gets the value of the Transfer-Encoding header for an HTTP response.</summary>
      <returns>Returns <see cref="T:System.Net.Http.Headers.HttpHeaderValueCollection`1" />.The value of the Transfer-Encoding header for an HTTP response.</returns>
    </member>
    <member name="P:System.Net.Http.Headers.HttpResponseHeaders.TransferEncodingChunked">
      <summary>Gets or sets a value that indicates if the Transfer-Encoding header for an HTTP response contains chunked.</summary>
      <returns>Returns <see cref="T:System.Boolean" />.true if the Transfer-Encoding header contains chunked, otherwise false.</returns>
    </member>
    <member name="P:System.Net.Http.Headers.HttpResponseHeaders.Upgrade">
      <summary>Gets the value of the Upgrade header for an HTTP response.</summary>
      <returns>Returns <see cref="T:System.Net.Http.Headers.HttpHeaderValueCollection`1" />.The value of the Upgrade header for an HTTP response.</returns>
    </member>
    <member name="P:System.Net.Http.Headers.HttpResponseHeaders.Vary">
      <summary>Gets the value of the Vary header for an HTTP response.</summary>
      <returns>Returns <see cref="T:System.Net.Http.Headers.HttpHeaderValueCollection`1" />.The value of the Vary header for an HTTP response.</returns>
    </member>
    <member name="P:System.Net.Http.Headers.HttpResponseHeaders.Via">
      <summary>Gets the value of the Via header for an HTTP response.</summary>
      <returns>Returns <see cref="T:System.Net.Http.Headers.HttpHeaderValueCollection`1" />.The value of the Via header for an HTTP response.</returns>
    </member>
    <member name="P:System.Net.Http.Headers.HttpResponseHeaders.Warning">
      <summary>Gets the value of the Warning header for an HTTP response.</summary>
      <returns>Returns <see cref="T:System.Net.Http.Headers.HttpHeaderValueCollection`1" />.The value of the Warning header for an HTTP response.</returns>
    </member>
    <member name="P:System.Net.Http.Headers.HttpResponseHeaders.WwwAuthenticate">
      <summary>Gets the value of the WWW-Authenticate header for an HTTP response.</summary>
      <returns>Returns <see cref="T:System.Net.Http.Headers.HttpHeaderValueCollection`1" />.The value of the WWW-Authenticate header for an HTTP response.</returns>
    </member>
    <member name="T:System.Net.Http.Headers.MediaTypeHeaderValue">
      <summary>Represents a media-type as defined in the RFC 2616.</summary>
    </member>
    <member name="M:System.Net.Http.Headers.MediaTypeHeaderValue.#ctor(System.Net.Http.Headers.MediaTypeHeaderValue)">
      <summary>Initializes a new instance of the <see cref="T:System.Net.Http.Headers.MediaTypeHeaderValue" /> class.</summary>
    </member>
    <member name="M:System.Net.Http.Headers.MediaTypeHeaderValue.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Net.Http.Headers.MediaTypeHeaderValue" /> class.</summary>
    </member>
    <member name="P:System.Net.Http.Headers.MediaTypeHeaderValue.CharSet">
      <summary>Gets or sets the character set.</summary>
      <returns>Returns <see cref="T:System.String" />.The character set.</returns>
    </member>
    <member name="M:System.Net.Http.Headers.MediaTypeHeaderValue.Equals(System.Object)">
      <summary>Determines whether the specified <see cref="T:System.Object" /> is equal to the current <see cref="T:System.Net.Http.Headers.MediaTypeHeaderValue" /> object.</summary>
      <returns>Returns <see cref="T:System.Boolean" />.true if the specified <see cref="T:System.Object" /> is equal to the current object; otherwise, false.</returns>
      <param name="obj">The object to compare with the current object.</param>
    </member>
    <member name="M:System.Net.Http.Headers.MediaTypeHeaderValue.GetHashCode">
      <summary>Serves as a hash function for an <see cref="T:System.Net.Http.Headers.MediaTypeHeaderValue" /> object.</summary>
      <returns>Returns <see cref="T:System.Int32" />.A hash code for the current object.</returns>
    </member>
    <member name="P:System.Net.Http.Headers.MediaTypeHeaderValue.MediaType">
      <summary>Gets or sets the media-type header value.</summary>
      <returns>Returns <see cref="T:System.String" />.The media-type header value.</returns>
    </member>
    <member name="P:System.Net.Http.Headers.MediaTypeHeaderValue.Parameters">
      <summary>Gets or sets the media-type header value parameters.</summary>
      <returns>Returns <see cref="T:System.Collections.Generic.ICollection`1" />.The media-type header value parameters.</returns>
    </member>
    <member name="M:System.Net.Http.Headers.MediaTypeHeaderValue.Parse(System.String)">
      <summary>Converts a string to an <see cref="T:System.Net.Http.Headers.MediaTypeHeaderValue" /> instance.</summary>
      <returns>Returns <see cref="T:System.Net.Http.Headers.MediaTypeHeaderValue" />.An <see cref="T:System.Net.Http.Headers.MediaTypeHeaderValue" /> instance.</returns>
      <param name="input">A string that represents media type header value information.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> is a null reference.</exception>
      <exception cref="T:System.FormatException">
        <paramref name="input" /> is not valid media type header value information.</exception>
    </member>
    <member name="M:System.Net.Http.Headers.MediaTypeHeaderValue.System#ICloneable#Clone">
      <summary>Creates a new object that is a copy of the current <see cref="T:System.Net.Http.Headers.MediaTypeHeaderValue" /> instance.</summary>
      <returns>Returns <see cref="T:System.Object" />.A copy of the current instance.</returns>
    </member>
    <member name="M:System.Net.Http.Headers.MediaTypeHeaderValue.ToString">
      <summary>Returns a string that represents the current <see cref="T:System.Net.Http.Headers.MediaTypeHeaderValue" /> object.</summary>
      <returns>Returns <see cref="T:System.String" />.A string that represents the current object.</returns>
    </member>
    <member name="M:System.Net.Http.Headers.MediaTypeHeaderValue.TryParse(System.String,System.Net.Http.Headers.MediaTypeHeaderValue@)">
      <summary>Determines whether a string is valid <see cref="T:System.Net.Http.Headers.MediaTypeHeaderValue" /> information.</summary>
      <returns>Returns <see cref="T:System.Boolean" />.true if <paramref name="input" /> is valid <see cref="T:System.Net.Http.Headers.MediaTypeHeaderValue" /> information; otherwise, false.</returns>
      <param name="input">The string to validate.</param>
      <param name="parsedValue">The <see cref="T:System.Net.Http.Headers.MediaTypeHeaderValue" /> version of the string.</param>
    </member>
    <member name="T:System.Net.Http.Headers.MediaTypeWithQualityHeaderValue">
      <summary>Represents a content-type header value with an additional quality.</summary>
    </member>
    <member name="M:System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Net.Http.Headers.MediaTypeWithQualityHeaderValue" /> class.</summary>
    </member>
    <member name="M:System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.#ctor(System.String,System.Double)">
      <summary>Initializes a new instance of the <see cref="T:System.Net.Http.Headers.MediaTypeWithQualityHeaderValue" /> class.</summary>
    </member>
    <member name="M:System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse(System.String)">
      <summary>Converts a string to an <see cref="T:System.Net.Http.Headers.MediaTypeWithQualityHeaderValue" /> instance.</summary>
      <returns>Returns <see cref="T:System.Net.Http.Headers.MediaTypeWithQualityHeaderValue" />.An <see cref="T:System.Net.Http.Headers.MediaTypeWithQualityHeaderValue" /> instance.</returns>
      <param name="input">A string that represents media type with quality header value information.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> is a null reference.</exception>
      <exception cref="T:System.FormatException">
        <paramref name="input" /> is not valid media type with quality header value information.</exception>
    </member>
    <member name="P:System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Quality">
      <returns>Returns <see cref="T:System.Double" />.</returns>
    </member>
    <member name="M:System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.System#ICloneable#Clone">
      <summary>Creates a new object that is a copy of the current <see cref="T:System.Net.Http.Headers.MediaTypeWithQualityHeaderValue" /> instance.</summary>
      <returns>Returns <see cref="T:System.Object" />.A copy of the current instance.</returns>
    </member>
    <member name="M:System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.TryParse(System.String,System.Net.Http.Headers.MediaTypeWithQualityHeaderValue@)">
      <summary>Determines whether a string is valid <see cref="T:System.Net.Http.Headers.MediaTypeWithQualityHeaderValue" /> information.</summary>
      <returns>Returns <see cref="T:System.Boolean" />.true if <paramref name="input" /> is valid <see cref="T:System.Net.Http.Headers.MediaTypeWithQualityHeaderValue" /> information; otherwise, false.</returns>
      <param name="input">The string to validate.</param>
      <param name="parsedValue">The <see cref="T:System.Net.Http.Headers.MediaTypeWithQualityHeaderValue" /> version of the string.</param>
    </member>
    <member name="T:System.Net.Http.Headers.NameValueHeaderValue">
      <summary>Represents a name/value pair.</summary>
    </member>
    <member name="M:System.Net.Http.Headers.NameValueHeaderValue.#ctor(System.Net.Http.Headers.NameValueHeaderValue)">
      <summary>Initializes a new instance of the <see cref="T:System.Net.Http.Headers.NameValueHeaderValue" /> class.</summary>
    </member>
    <member name="M:System.Net.Http.Headers.NameValueHeaderValue.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Net.Http.Headers.NameValueHeaderValue" /> class.</summary>
      <param name="name">The header name.</param>
    </member>
    <member name="M:System.Net.Http.Headers.NameValueHeaderValue.#ctor(System.String,System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Net.Http.Headers.NameValueHeaderValue" /> class.</summary>
      <param name="name">The header name.</param>
      <param name="value">The header value.</param>
    </member>
    <member name="M:System.Net.Http.Headers.NameValueHeaderValue.Equals(System.Object)">
      <summary>Determines whether the specified <see cref="T:System.Object" /> is equal to the current <see cref="T:System.Net.Http.Headers.NameValueHeaderValue" /> object.</summary>
      <returns>Returns <see cref="T:System.Boolean" />.true if the specified <see cref="T:System.Object" /> is equal to the current object; otherwise, false.</returns>
      <param name="obj">The object to compare with the current object.</param>
    </member>
    <member name="M:System.Net.Http.Headers.NameValueHeaderValue.GetHashCode">
      <summary>Serves as a hash function for an <see cref="T:System.Net.Http.Headers.NameValueHeaderValue" /> object.</summary>
      <returns>Returns <see cref="T:System.Int32" />.A hash code for the current object.</returns>
    </member>
    <member name="P:System.Net.Http.Headers.NameValueHeaderValue.Name">
      <summary>Gets the header name.</summary>
      <returns>Returns <see cref="T:System.String" />.The header name.</returns>
    </member>
    <member name="M:System.Net.Http.Headers.NameValueHeaderValue.Parse(System.String)">
      <summary>Converts a string to an <see cref="T:System.Net.Http.Headers.NameValueHeaderValue" /> instance.</summary>
      <returns>Returns <see cref="T:System.Net.Http.Headers.NameValueHeaderValue" />.An <see cref="T:System.Net.Http.Headers.NameValueHeaderValue" /> instance.</returns>
      <param name="input">A string that represents name value header value information.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> is a null reference.</exception>
      <exception cref="T:System.FormatException">
        <paramref name="input" /> is not valid name value header value information.</exception>
    </member>
    <member name="M:System.Net.Http.Headers.NameValueHeaderValue.System#ICloneable#Clone">
      <summary>Creates a new object that is a copy of the current <see cref="T:System.Net.Http.Headers.NameValueHeaderValue" /> instance.</summary>
      <returns>Returns <see cref="T:System.Object" />.A copy of the current instance.</returns>
    </member>
    <member name="M:System.Net.Http.Headers.NameValueHeaderValue.ToString">
      <summary>Returns a string that represents the current <see cref="T:System.Net.Http.Headers.NameValueHeaderValue" /> object.</summary>
      <returns>Returns <see cref="T:System.String" />.A string that represents the current object.</returns>
    </member>
    <member name="M:System.Net.Http.Headers.NameValueHeaderValue.TryParse(System.String,System.Net.Http.Headers.NameValueHeaderValue@)">
      <summary>Determines whether a string is valid <see cref="T:System.Net.Http.Headers.NameValueHeaderValue" /> information.</summary>
      <returns>Returns <see cref="T:System.Boolean" />.true if <paramref name="input" /> is valid <see cref="T:System.Net.Http.Headers.NameValueHeaderValue" /> information; otherwise, false.</returns>
      <param name="input">The string to validate.</param>
      <param name="parsedValue">The <see cref="T:System.Net.Http.Headers.NameValueHeaderValue" /> version of the string.</param>
    </member>
    <member name="P:System.Net.Http.Headers.NameValueHeaderValue.Value">
      <summary>Gets the header value.</summary>
      <returns>Returns <see cref="T:System.String" />.The header value.</returns>
    </member>
    <member name="T:System.Net.Http.Headers.NameValueWithParametersHeaderValue">
      <summary>Represents a name/value pair with parameters.</summary>
    </member>
    <member name="M:System.Net.Http.Headers.NameValueWithParametersHeaderValue.#ctor(System.Net.Http.Headers.NameValueWithParametersHeaderValue)">
      <summary>Initializes a new instance of the <see cref="T:System.Net.Http.Headers.NameValueWithParametersHeaderValue" /> class.</summary>
    </member>
    <member name="M:System.Net.Http.Headers.NameValueWithParametersHeaderValue.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Net.Http.Headers.NameValueWithParametersHeaderValue" /> class.</summary>
    </member>
    <member name="M:System.Net.Http.Headers.NameValueWithParametersHeaderValue.#ctor(System.String,System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Net.Http.Headers.NameValueWithParametersHeaderValue" /> class.</summary>
    </member>
    <member name="M:System.Net.Http.Headers.NameValueWithParametersHeaderValue.Equals(System.Object)">
      <summary>Determines whether the specified <see cref="T:System.Object" /> is equal to the current <see cref="T:System.Net.Http.Headers.NameValueWithParametersHeaderValue" /> object.</summary>
      <returns>Returns <see cref="T:System.Boolean" />.true if the specified <see cref="T:System.Object" /> is equal to the current object; otherwise, false.</returns>
      <param name="obj">The object to compare with the current object.</param>
    </member>
    <member name="M:System.Net.Http.Headers.NameValueWithParametersHeaderValue.GetHashCode">
      <summary>Serves as a hash function for an <see cref="T:System.Net.Http.Headers.NameValueWithParametersHeaderValue" /> object.</summary>
      <returns>Returns <see cref="T:System.Int32" />.A hash code for the current object.</returns>
    </member>
    <member name="P:System.Net.Http.Headers.NameValueWithParametersHeaderValue.Parameters">
      <returns>Returns <see cref="T:System.Collections.Generic.ICollection`1" />.</returns>
    </member>
    <member name="M:System.Net.Http.Headers.NameValueWithParametersHeaderValue.Parse(System.String)">
      <summary>Converts a string to an <see cref="T:System.Net.Http.Headers.NameValueWithParametersHeaderValue" /> instance.</summary>
      <returns>Returns <see cref="T:System.Net.Http.Headers.NameValueWithParametersHeaderValue" />.An <see cref="T:System.Net.Http.Headers.NameValueWithParametersHeaderValue" /> instance.</returns>
      <param name="input">A string that represents name value with parameter header value information.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> is a null reference.</exception>
      <exception cref="T:System.FormatException">
        <paramref name="input" /> is not valid name value with parameter header value information.</exception>
    </member>
    <member name="M:System.Net.Http.Headers.NameValueWithParametersHeaderValue.System#ICloneable#Clone">
      <summary>Creates a new object that is a copy of the current <see cref="T:System.Net.Http.Headers.NameValueWithParametersHeaderValue" /> instance.</summary>
      <returns>Returns <see cref="T:System.Object" />.A copy of the current instance.</returns>
    </member>
    <member name="M:System.Net.Http.Headers.NameValueWithParametersHeaderValue.ToString">
      <summary>Returns a string that represents the current <see cref="T:System.Net.Http.Headers.NameValueWithParametersHeaderValue" /> object.</summary>
      <returns>Returns <see cref="T:System.String" />.A string that represents the current object.</returns>
    </member>
    <member name="M:System.Net.Http.Headers.NameValueWithParametersHeaderValue.TryParse(System.String,System.Net.Http.Headers.NameValueWithParametersHeaderValue@)">
      <summary>Determines whether a string is valid <see cref="T:System.Net.Http.Headers.NameValueWithParametersHeaderValue" /> information.</summary>
      <returns>Returns <see cref="T:System.Boolean" />.true if <paramref name="input" /> is valid <see cref="T:System.Net.Http.Headers.NameValueWithParametersHeaderValue" /> information; otherwise, false.</returns>
      <param name="input">The string to validate.</param>
      <param name="parsedValue">The <see cref="T:System.Net.Http.Headers.NameValueWithParametersHeaderValue" /> version of the string.</param>
    </member>
    <member name="T:System.Net.Http.Headers.ProductHeaderValue">
      <summary>Represents a product token in header value.</summary>
    </member>
    <member name="M:System.Net.Http.Headers.ProductHeaderValue.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Net.Http.Headers.ProductHeaderValue" /> class.</summary>
    </member>
    <member name="M:System.Net.Http.Headers.ProductHeaderValue.#ctor(System.String,System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Net.Http.Headers.ProductHeaderValue" /> class.</summary>
    </member>
    <member name="M:System.Net.Http.Headers.ProductHeaderValue.Equals(System.Object)">
      <summary>Determines whether the specified <see cref="T:System.Object" /> is equal to the current <see cref="T:System.Net.Http.Headers.ProductHeaderValue" /> object.</summary>
      <returns>Returns <see cref="T:System.Boolean" />.true if the specified <see cref="T:System.Object" /> is equal to the current object; otherwise, false.</returns>
      <param name="obj">The object to compare with the current object.</param>
    </member>
    <member name="M:System.Net.Http.Headers.ProductHeaderValue.GetHashCode">
      <summary>Serves as a hash function for an <see cref="T:System.Net.Http.Headers.ProductHeaderValue" /> object.</summary>
      <returns>Returns <see cref="T:System.Int32" />.A hash code for the current object.</returns>
    </member>
    <member name="P:System.Net.Http.Headers.ProductHeaderValue.Name">
      <summary>Gets the name of the product token.</summary>
      <returns>Returns <see cref="T:System.String" />.The name of the product token.</returns>
    </member>
    <member name="M:System.Net.Http.Headers.ProductHeaderValue.Parse(System.String)">
      <summary>Converts a string to an <see cref="T:System.Net.Http.Headers.ProductHeaderValue" /> instance.</summary>
      <returns>Returns <see cref="T:System.Net.Http.Headers.ProductHeaderValue" />.An <see cref="T:System.Net.Http.Headers.ProductHeaderValue" /> instance.</returns>
      <param name="input">A string that represents product header value information.</param>
    </member>
    <member name="M:System.Net.Http.Headers.ProductHeaderValue.System#ICloneable#Clone">
      <summary>Creates a new object that is a copy of the current <see cref="T:System.Net.Http.Headers.ProductHeaderValue" /> instance.</summary>
      <returns>Returns <see cref="T:System.Object" />.A copy of the current instance.</returns>
    </member>
    <member name="M:System.Net.Http.Headers.ProductHeaderValue.ToString">
      <summary>Returns a string that represents the current <see cref="T:System.Net.Http.Headers.ProductHeaderValue" /> object.</summary>
      <returns>Returns <see cref="T:System.String" />.A string that represents the current object.</returns>
    </member>
    <member name="M:System.Net.Http.Headers.ProductHeaderValue.TryParse(System.String,System.Net.Http.Headers.ProductHeaderValue@)">
      <summary>Determines whether a string is valid <see cref="T:System.Net.Http.Headers.ProductHeaderValue" /> information.</summary>
      <returns>Returns <see cref="T:System.Boolean" />.true if <paramref name="input" /> is valid <see cref="T:System.Net.Http.Headers.ProductHeaderValue" /> information; otherwise, false.</returns>
      <param name="input">The string to validate.</param>
      <param name="parsedValue">The <see cref="T:System.Net.Http.Headers.ProductHeaderValue" /> version of the string.</param>
    </member>
    <member name="P:System.Net.Http.Headers.ProductHeaderValue.Version">
      <summary>Gets the version of the product token.</summary>
      <returns>Returns <see cref="T:System.String" />.The version of the product token. </returns>
    </member>
    <member name="T:System.Net.Http.Headers.ProductInfoHeaderValue">
      <summary>Represents a value which can either be a product or a comment.</summary>
    </member>
    <member name="M:System.Net.Http.Headers.ProductInfoHeaderValue.#ctor(System.Net.Http.Headers.ProductHeaderValue)">
      <summary>Initializes a new instance of the <see cref="T:System.Net.Http.Headers.ProductInfoHeaderValue" /> class.</summary>
    </member>
    <member name="M:System.Net.Http.Headers.ProductInfoHeaderValue.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Net.Http.Headers.ProductInfoHeaderValue" /> class.</summary>
    </member>
    <member name="M:System.Net.Http.Headers.ProductInfoHeaderValue.#ctor(System.String,System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Net.Http.Headers.ProductInfoHeaderValue" /> class.</summary>
    </member>
    <member name="P:System.Net.Http.Headers.ProductInfoHeaderValue.Comment">
      <returns>Returns <see cref="T:System.String" />.</returns>
    </member>
    <member name="M:System.Net.Http.Headers.ProductInfoHeaderValue.Equals(System.Object)">
      <summary>Determines whether the specified <see cref="T:System.Object" /> is equal to the current <see cref="T:System.Net.Http.Headers.ProductInfoHeaderValue" /> object.</summary>
      <returns>Returns <see cref="T:System.Boolean" />.true if the specified <see cref="T:System.Object" /> is equal to the current object; otherwise, false.</returns>
      <param name="obj">The object to compare with the current object.</param>
    </member>
    <member name="M:System.Net.Http.Headers.ProductInfoHeaderValue.GetHashCode">
      <summary>Serves as a hash function for an <see cref="T:System.Net.Http.Headers.ProductInfoHeaderValue" /> object.</summary>
      <returns>Returns <see cref="T:System.Int32" />.A hash code for the current object.</returns>
    </member>
    <member name="M:System.Net.Http.Headers.ProductInfoHeaderValue.Parse(System.String)">
      <summary>Converts a string to an <see cref="T:System.Net.Http.Headers.ProductInfoHeaderValue" /> instance.</summary>
      <returns>Returns <see cref="T:System.Net.Http.Headers.ProductInfoHeaderValue" />.An <see cref="T:System.Net.Http.Headers.ProductInfoHeaderValue" /> instance.</returns>
      <param name="input">A string that represents product info header value information.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> is a null reference.</exception>
      <exception cref="T:System.FormatException">
        <paramref name="input" /> is not valid product info header value information.</exception>
    </member>
    <member name="P:System.Net.Http.Headers.ProductInfoHeaderValue.Product">
      <returns>Returns <see cref="T:System.Net.Http.Headers.ProductHeaderValue" />.</returns>
    </member>
    <member name="M:System.Net.Http.Headers.ProductInfoHeaderValue.System#ICloneable#Clone">
      <summary>Creates a new object that is a copy of the current <see cref="T:System.Net.Http.Headers.ProductInfoHeaderValue" /> instance.</summary>
      <returns>Returns <see cref="T:System.Object" />.A copy of the current instance.</returns>
    </member>
    <member name="M:System.Net.Http.Headers.ProductInfoHeaderValue.ToString">
      <summary>Returns a string that represents the current <see cref="T:System.Net.Http.Headers.ProductInfoHeaderValue" /> object.</summary>
      <returns>Returns <see cref="T:System.String" />.A string that represents the current object.</returns>
    </member>
    <member name="M:System.Net.Http.Headers.ProductInfoHeaderValue.TryParse(System.String,System.Net.Http.Headers.ProductInfoHeaderValue@)">
      <summary>Determines whether a string is valid <see cref="T:System.Net.Http.Headers.ProductInfoHeaderValue" /> information.</summary>
      <returns>Returns <see cref="T:System.Boolean" />.true if <paramref name="input" /> is valid <see cref="T:System.Net.Http.Headers.ProductInfoHeaderValue" /> information; otherwise, false.</returns>
      <param name="input">The string to validate.</param>
      <param name="parsedValue">The <see cref="T:System.Net.Http.Headers.ProductInfoHeaderValue" /> version of the string.</param>
    </member>
    <member name="T:System.Net.Http.Headers.RangeConditionHeaderValue">
      <summary>Represents a header value which can either be a date/time or an entity-tag value.</summary>
    </member>
    <member name="M:System.Net.Http.Headers.RangeConditionHeaderValue.#ctor(System.DateTimeOffset)">
      <summary>Initializes a new instance of the <see cref="T:System.Net.Http.Headers.RangeConditionHeaderValue" /> class.</summary>
    </member>
    <member name="M:System.Net.Http.Headers.RangeConditionHeaderValue.#ctor(System.Net.Http.Headers.EntityTagHeaderValue)">
      <summary>Initializes a new instance of the <see cref="T:System.Net.Http.Headers.RangeConditionHeaderValue" /> class.</summary>
    </member>
    <member name="M:System.Net.Http.Headers.RangeConditionHeaderValue.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Net.Http.Headers.RangeConditionHeaderValue" /> class.</summary>
    </member>
    <member name="P:System.Net.Http.Headers.RangeConditionHeaderValue.Date">
      <returns>Returns <see cref="T:System.DateTimeOffset" />.</returns>
    </member>
    <member name="P:System.Net.Http.Headers.RangeConditionHeaderValue.EntityTag">
      <returns>Returns <see cref="T:System.Net.Http.Headers.EntityTagHeaderValue" />.</returns>
    </member>
    <member name="M:System.Net.Http.Headers.RangeConditionHeaderValue.Equals(System.Object)">
      <summary>Determines whether the specified <see cref="T:System.Object" /> is equal to the current <see cref="T:System.Net.Http.Headers.RangeConditionHeaderValue" /> object.</summary>
      <returns>Returns <see cref="T:System.Boolean" />.true if the specified <see cref="T:System.Object" /> is equal to the current object; otherwise, false.</returns>
    </member>
    <member name="M:System.Net.Http.Headers.RangeConditionHeaderValue.GetHashCode">
      <summary>Serves as a hash function for an <see cref="T:System.Net.Http.Headers.RangeConditionHeaderValue" /> object.</summary>
      <returns>Returns <see cref="T:System.Int32" />.A hash code for the current object.</returns>
    </member>
    <member name="M:System.Net.Http.Headers.RangeConditionHeaderValue.Parse(System.String)">
      <summary>Converts a string to an <see cref="T:System.Net.Http.Headers.RangeConditionHeaderValue" /> instance.</summary>
      <returns>Returns <see cref="T:System.Net.Http.Headers.RangeConditionHeaderValue" />.An <see cref="T:System.Net.Http.Headers.RangeConditionHeaderValue" /> instance.</returns>
      <param name="input">A string that represents range condition header value information.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> is a null reference.</exception>
      <exception cref="T:System.FormatException">
        <paramref name="input" /> is not valid range Condition header value information.</exception>
    </member>
    <member name="M:System.Net.Http.Headers.RangeConditionHeaderValue.System#ICloneable#Clone">
      <summary>Creates a new object that is a copy of the current <see cref="T:System.Net.Http.Headers.RangeConditionHeaderValue" /> instance.</summary>
      <returns>Returns <see cref="T:System.Object" />.A copy of the current instance.</returns>
    </member>
    <member name="M:System.Net.Http.Headers.RangeConditionHeaderValue.ToString">
      <summary>Returns a string that represents the current <see cref="T:System.Net.Http.Headers.RangeConditionHeaderValue" /> object.</summary>
      <returns>Returns <see cref="T:System.String" />.A string that represents the current object.</returns>
    </member>
    <member name="M:System.Net.Http.Headers.RangeConditionHeaderValue.TryParse(System.String,System.Net.Http.Headers.RangeConditionHeaderValue@)">
      <summary>Determines whether a string is valid <see cref="T:System.Net.Http.Headers.RangeConditionHeaderValue" /> information.</summary>
      <returns>Returns <see cref="T:System.Boolean" />.true if <paramref name="input" /> is valid <see cref="T:System.Net.Http.Headers.RangeConditionHeaderValue" /> information; otherwise, false.</returns>
      <param name="input">The string to validate.</param>
      <param name="parsedValue">The <see cref="T:System.Net.Http.Headers.RangeConditionHeaderValue" /> version of the string.</param>
    </member>
    <member name="T:System.Net.Http.Headers.RangeHeaderValue">
      <summary>Represents the value of the Range header.</summary>
    </member>
    <member name="M:System.Net.Http.Headers.RangeHeaderValue.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Net.Http.Headers.RangeHeaderValue" /> class.</summary>
    </member>
    <member name="M:System.Net.Http.Headers.RangeHeaderValue.#ctor(System.Nullable{System.Int64},System.Nullable{System.Int64})">
      <summary>Initializes a new instance of the <see cref="T:System.Net.Http.Headers.RangeHeaderValue" /> class.</summary>
    </member>
    <member name="M:System.Net.Http.Headers.RangeHeaderValue.Equals(System.Object)">
      <summary>Determines whether the specified <see cref="T:System.Object" /> is equal to the current <see cref="T:System.Net.Http.Headers.RangeHeaderValue" /> object.</summary>
      <returns>Returns <see cref="T:System.Boolean" />.true if the specified <see cref="T:System.Object" /> is equal to the current object; otherwise, false.</returns>
      <param name="obj">The object to compare with the current object.</param>
    </member>
    <member name="M:System.Net.Http.Headers.RangeHeaderValue.GetHashCode">
      <summary>Serves as a hash function for an <see cref="T:System.Net.Http.Headers.RangeHeaderValue" /> object.</summary>
      <returns>Returns <see cref="T:System.Int32" />.A hash code for the current object.</returns>
    </member>
    <member name="M:System.Net.Http.Headers.RangeHeaderValue.Parse(System.String)">
      <summary>Converts a string to an <see cref="T:System.Net.Http.Headers.RangeHeaderValue" /> instance.</summary>
      <returns>Returns <see cref="T:System.Net.Http.Headers.RangeHeaderValue" />.An <see cref="T:System.Net.Http.Headers.RangeHeaderValue" /> instance.</returns>
      <param name="input">A string that represents range header value information.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> is a null reference.</exception>
      <exception cref="T:System.FormatException">
        <paramref name="input" /> is not valid range header value information.</exception>
    </member>
    <member name="P:System.Net.Http.Headers.RangeHeaderValue.Ranges">
      <returns>Returns <see cref="T:System.Collections.Generic.ICollection`1" />.</returns>
    </member>
    <member name="M:System.Net.Http.Headers.RangeHeaderValue.System#ICloneable#Clone">
      <summary>Creates a new object that is a copy of the current <see cref="T:System.Net.Http.Headers.RangeHeaderValue" /> instance.</summary>
      <returns>Returns <see cref="T:System.Object" />.A copy of the current instance.</returns>
    </member>
    <member name="M:System.Net.Http.Headers.RangeHeaderValue.ToString">
      <summary>Returns a string that represents the current <see cref="T:System.Net.Http.Headers.RangeHeaderValue" /> object.</summary>
      <returns>Returns <see cref="T:System.String" />.A string that represents the current object.</returns>
    </member>
    <member name="M:System.Net.Http.Headers.RangeHeaderValue.TryParse(System.String,System.Net.Http.Headers.RangeHeaderValue@)">
      <summary>Determines whether a string is valid <see cref="T:System.Net.Http.Headers.RangeHeaderValue" /> information.</summary>
      <returns>Returns <see cref="T:System.Boolean" />.true if <paramref name="input" /> is valid <see cref="T:System.Net.Http.Headers.AuthenticationHeaderValue" /> information; otherwise, false.</returns>
      <param name="input">he string to validate.</param>
      <param name="parsedValue">The <see cref="T:System.Net.Http.Headers.RangeHeaderValue" /> version of the string.</param>
    </member>
    <member name="P:System.Net.Http.Headers.RangeHeaderValue.Unit">
      <returns>Returns <see cref="T:System.String" />.</returns>
    </member>
    <member name="T:System.Net.Http.Headers.RangeItemHeaderValue">
      <summary>Represents a byte-range header value.</summary>
    </member>
    <member name="M:System.Net.Http.Headers.RangeItemHeaderValue.#ctor(System.Nullable{System.Int64},System.Nullable{System.Int64})">
      <summary>Initializes a new instance of the <see cref="T:System.Net.Http.Headers.RangeItemHeaderValue" /> class.</summary>
    </member>
    <member name="M:System.Net.Http.Headers.RangeItemHeaderValue.Equals(System.Object)">
      <summary>Determines whether the specified <see cref="T:System.Object" /> is equal to the current <see cref="T:System.Net.Http.Headers.RangeItemHeaderValue" /> object.</summary>
      <returns>Returns <see cref="T:System.Boolean" />.true if the specified <see cref="T:System.Object" /> is equal to the current object; otherwise, false.</returns>
      <param name="obj">The object to compare with the current object.</param>
    </member>
    <member name="P:System.Net.Http.Headers.RangeItemHeaderValue.From">
      <returns>Returns <see cref="T:System.Int64" />.</returns>
    </member>
    <member name="M:System.Net.Http.Headers.RangeItemHeaderValue.GetHashCode">
      <summary>Serves as a hash function for an <see cref="T:System.Net.Http.Headers.RangeItemHeaderValue" /> object.</summary>
      <returns>Returns <see cref="T:System.Int32" />.A hash code for the current object.</returns>
    </member>
    <member name="M:System.Net.Http.Headers.RangeItemHeaderValue.System#ICloneable#Clone">
      <summary>Creates a new object that is a copy of the current <see cref="T:System.Net.Http.Headers.RangeItemHeaderValue" /> instance.</summary>
      <returns>Returns <see cref="T:System.Object" />.A copy of the current instance.</returns>
    </member>
    <member name="P:System.Net.Http.Headers.RangeItemHeaderValue.To">
      <returns>Returns <see cref="T:System.Int64" />.</returns>
    </member>
    <member name="M:System.Net.Http.Headers.RangeItemHeaderValue.ToString">
      <summary>Returns a string that represents the current <see cref="T:System.Net.Http.Headers.RangeItemHeaderValue" /> object.</summary>
      <returns>Returns <see cref="T:System.String" />.A string that represents the current object.</returns>
    </member>
    <member name="T:System.Net.Http.Headers.RetryConditionHeaderValue">
      <summary>Represents a header value which can either be a date/time or a timespan value.</summary>
    </member>
    <member name="M:System.Net.Http.Headers.RetryConditionHeaderValue.#ctor(System.DateTimeOffset)">
      <summary>Initializes a new instance of the <see cref="T:System.Net.Http.Headers.RetryConditionHeaderValue" /> class.</summary>
    </member>
    <member name="M:System.Net.Http.Headers.RetryConditionHeaderValue.#ctor(System.TimeSpan)">
      <summary>Initializes a new instance of the <see cref="T:System.Net.Http.Headers.RetryConditionHeaderValue" /> class.</summary>
    </member>
    <member name="P:System.Net.Http.Headers.RetryConditionHeaderValue.Date">
      <returns>Returns <see cref="T:System.DateTimeOffset" />.</returns>
    </member>
    <member name="P:System.Net.Http.Headers.RetryConditionHeaderValue.Delta">
      <returns>Returns <see cref="T:System.TimeSpan" />.</returns>
    </member>
    <member name="M:System.Net.Http.Headers.RetryConditionHeaderValue.Equals(System.Object)">
      <summary>Determines whether the specified <see cref="T:System.Object" /> is equal to the current <see cref="T:System.Net.Http.Headers.RetryConditionHeaderValue" /> object.</summary>
      <returns>Returns <see cref="T:System.Boolean" />.true if the specified <see cref="T:System.Object" /> is equal to the current object; otherwise, false.</returns>
      <param name="obj">The object to compare with the current object.</param>
    </member>
    <member name="M:System.Net.Http.Headers.RetryConditionHeaderValue.GetHashCode">
      <summary>Serves as a hash function for an <see cref="T:System.Net.Http.Headers.RetryConditionHeaderValue" /> object.</summary>
      <returns>Returns <see cref="T:System.Int32" />.A hash code for the current object.</returns>
    </member>
    <member name="M:System.Net.Http.Headers.RetryConditionHeaderValue.Parse(System.String)">
      <summary>Converts a string to an <see cref="T:System.Net.Http.Headers.RetryConditionHeaderValue" /> instance.</summary>
      <returns>Returns <see cref="T:System.Net.Http.Headers.RetryConditionHeaderValue" />.An <see cref="T:System.Net.Http.Headers.RetryConditionHeaderValue" /> instance.</returns>
      <param name="input">A string that represents retry condition header value information.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> is a null reference.</exception>
      <exception cref="T:System.FormatException">
        <paramref name="input" /> is not valid retry condition header value information.</exception>
    </member>
    <member name="M:System.Net.Http.Headers.RetryConditionHeaderValue.System#ICloneable#Clone">
      <summary>Creates a new object that is a copy of the current <see cref="T:System.Net.Http.Headers.RetryConditionHeaderValue" /> instance.</summary>
      <returns>Returns <see cref="T:System.Object" />.A copy of the current instance.</returns>
    </member>
    <member name="M:System.Net.Http.Headers.RetryConditionHeaderValue.ToString">
      <summary>Returns a string that represents the current <see cref="T:System.Net.Http.Headers.RetryConditionHeaderValue" /> object.</summary>
      <returns>Returns <see cref="T:System.String" />.A string that represents the current object.</returns>
    </member>
    <member name="M:System.Net.Http.Headers.RetryConditionHeaderValue.TryParse(System.String,System.Net.Http.Headers.RetryConditionHeaderValue@)">
      <summary>Determines whether a string is valid <see cref="T:System.Net.Http.Headers.RetryConditionHeaderValue" /> information.</summary>
      <returns>Returns <see cref="T:System.Boolean" />.true if <paramref name="input" /> is valid <see cref="T:System.Net.Http.Headers.RetryConditionHeaderValue" /> information; otherwise, false.</returns>
      <param name="input">The string to validate.</param>
      <param name="parsedValue">The <see cref="T:System.Net.Http.Headers.RetryConditionHeaderValue" /> version of the string.</param>
    </member>
    <member name="T:System.Net.Http.Headers.StringWithQualityHeaderValue">
      <summary>Represents a string header value with an optional quality.</summary>
    </member>
    <member name="M:System.Net.Http.Headers.StringWithQualityHeaderValue.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Net.Http.Headers.StringWithQualityHeaderValue" /> class.</summary>
    </member>
    <member name="M:System.Net.Http.Headers.StringWithQualityHeaderValue.#ctor(System.String,System.Double)">
      <summary>Initializes a new instance of the <see cref="T:System.Net.Http.Headers.StringWithQualityHeaderValue" /> class.</summary>
    </member>
    <member name="M:System.Net.Http.Headers.StringWithQualityHeaderValue.Equals(System.Object)">
      <summary>Determines whether the specified Object is equal to the current <see cref="T:System.Net.Http.Headers.StringWithQualityHeaderValue" /> object.</summary>
      <returns>Returns <see cref="T:System.Boolean" />.true if the specified <see cref="T:System.Object" /> is equal to the current object; otherwise, false.</returns>
      <param name="obj">The object to compare with the current object.</param>
    </member>
    <member name="M:System.Net.Http.Headers.StringWithQualityHeaderValue.GetHashCode">
      <summary>Serves as a hash function for an <see cref="T:System.Net.Http.Headers.StringWithQualityHeaderValue" /> object.</summary>
      <returns>Returns <see cref="T:System.Int32" />.A hash code for the current object.</returns>
    </member>
    <member name="M:System.Net.Http.Headers.StringWithQualityHeaderValue.Parse(System.String)">
      <summary>Converts a string to an <see cref="T:System.Net.Http.Headers.StringWithQualityHeaderValue" /> instance.</summary>
      <returns>Returns <see cref="T:System.Net.Http.Headers.StringWithQualityHeaderValue" />.An <see cref="T:System.Net.Http.Headers.AuthenticationHeaderValue" /> instance.</returns>
      <param name="input">A string that represents quality header value information.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> is a null reference.</exception>
      <exception cref="T:System.FormatException">
        <paramref name="input" /> is not valid string with quality header value information.</exception>
    </member>
    <member name="P:System.Net.Http.Headers.StringWithQualityHeaderValue.Quality">
      <returns>Returns <see cref="T:System.Double" />.</returns>
    </member>
    <member name="M:System.Net.Http.Headers.StringWithQualityHeaderValue.System#ICloneable#Clone">
      <summary>Creates a new object that is a copy of the current <see cref="T:System.Net.Http.Headers.StringWithQualityHeaderValue" /> instance.</summary>
      <returns>Returns <see cref="T:System.Object" />.A copy of the current instance.</returns>
    </member>
    <member name="M:System.Net.Http.Headers.StringWithQualityHeaderValue.ToString">
      <summary>Returns a string that represents the current <see cref="T:System.Net.Http.Headers.StringWithQualityHeaderValue" /> object.</summary>
      <returns>Returns <see cref="T:System.String" />.A string that represents the current object.</returns>
    </member>
    <member name="M:System.Net.Http.Headers.StringWithQualityHeaderValue.TryParse(System.String,System.Net.Http.Headers.StringWithQualityHeaderValue@)">
      <summary>Determines whether a string is valid <see cref="T:System.Net.Http.Headers.StringWithQualityHeaderValue" /> information.</summary>
      <returns>Returns <see cref="T:System.Boolean" />.true if <paramref name="input" /> is valid <see cref="T:System.Net.Http.Headers.StringWithQualityHeaderValue" /> information; otherwise, false.</returns>
      <param name="input">The string to validate.</param>
      <param name="parsedValue">The <see cref="T:System.Net.Http.Headers.StringWithQualityHeaderValue" /> version of the string.</param>
    </member>
    <member name="P:System.Net.Http.Headers.StringWithQualityHeaderValue.Value">
      <returns>Returns <see cref="T:System.String" />.</returns>
    </member>
    <member name="T:System.Net.Http.Headers.TransferCodingHeaderValue">
      <summary>Represents a transfer-coding header value.</summary>
    </member>
    <member name="M:System.Net.Http.Headers.TransferCodingHeaderValue.#ctor(System.Net.Http.Headers.TransferCodingHeaderValue)">
      <summary>Initializes a new instance of the <see cref="T:System.Net.Http.Headers.TransferCodingHeaderValue" /> class.</summary>
    </member>
    <member name="M:System.Net.Http.Headers.TransferCodingHeaderValue.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Net.Http.Headers.TransferCodingHeaderValue" /> class.</summary>
    </member>
    <member name="M:System.Net.Http.Headers.TransferCodingHeaderValue.Equals(System.Object)">
      <summary>Determines whether the specified Object is equal to the current <see cref="T:System.Net.Http.Headers.TransferCodingHeaderValue" /> object.</summary>
      <returns>Returns <see cref="T:System.Boolean" />.true if the specified <see cref="T:System.Object" /> is equal to the current object; otherwise, false.</returns>
      <param name="obj">The object to compare with the current object.</param>
    </member>
    <member name="M:System.Net.Http.Headers.TransferCodingHeaderValue.GetHashCode">
      <summary>Serves as a hash function for an <see cref="T:System.Net.Http.Headers.TransferCodingHeaderValue" /> object.</summary>
      <returns>Returns <see cref="T:System.Int32" />.A hash code for the current object.</returns>
    </member>
    <member name="P:System.Net.Http.Headers.TransferCodingHeaderValue.Parameters">
      <summary>Gets the transfer-coding parameters.</summary>
      <returns>Returns <see cref="T:System.Collections.Generic.ICollection`1" />.The transfer-coding parameters.</returns>
    </member>
    <member name="M:System.Net.Http.Headers.TransferCodingHeaderValue.Parse(System.String)">
      <summary>Converts a string to an <see cref="T:System.Net.Http.Headers.TransferCodingHeaderValue" /> instance.</summary>
      <returns>Returns <see cref="T:System.Net.Http.Headers.TransferCodingHeaderValue" />.An <see cref="T:System.Net.Http.Headers.AuthenticationHeaderValue" /> instance.</returns>
      <param name="input">A string that represents transfer-coding header value information.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> is a null reference.</exception>
      <exception cref="T:System.FormatException">
        <paramref name="input" /> is not valid transfer-coding header value information.</exception>
    </member>
    <member name="M:System.Net.Http.Headers.TransferCodingHeaderValue.System#ICloneable#Clone">
      <summary>Creates a new object that is a copy of the current <see cref="T:System.Net.Http.Headers.TransferCodingHeaderValue" /> instance.</summary>
      <returns>Returns <see cref="T:System.Object" />.A copy of the current instance.</returns>
    </member>
    <member name="M:System.Net.Http.Headers.TransferCodingHeaderValue.ToString">
      <summary>Returns a string that represents the current <see cref="T:System.Net.Http.Headers.TransferCodingHeaderValue" /> object.</summary>
      <returns>Returns <see cref="T:System.String" />.A string that represents the current object.</returns>
    </member>
    <member name="M:System.Net.Http.Headers.TransferCodingHeaderValue.TryParse(System.String,System.Net.Http.Headers.TransferCodingHeaderValue@)">
      <summary>Determines whether a string is valid <see cref="T:System.Net.Http.Headers.TransferCodingHeaderValue" /> information.</summary>
      <returns>Returns <see cref="T:System.Boolean" />.true if <paramref name="input" /> is valid <see cref="T:System.Net.Http.Headers.TransferCodingHeaderValue" /> information; otherwise, false.</returns>
      <param name="input">The string to validate.</param>
      <param name="parsedValue">The <see cref="T:System.Net.Http.Headers.TransferCodingHeaderValue" /> version of the string.</param>
    </member>
    <member name="P:System.Net.Http.Headers.TransferCodingHeaderValue.Value">
      <summary>Gets the transfer-coding value.</summary>
      <returns>Returns <see cref="T:System.String" />.The transfer-coding value.</returns>
    </member>
    <member name="T:System.Net.Http.Headers.TransferCodingWithQualityHeaderValue">
      <summary>Represents a transfer-coding header value with optional quality.</summary>
    </member>
    <member name="M:System.Net.Http.Headers.TransferCodingWithQualityHeaderValue.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Net.Http.Headers.TransferCodingWithQualityHeaderValue" /> class.</summary>
    </member>
    <member name="M:System.Net.Http.Headers.TransferCodingWithQualityHeaderValue.#ctor(System.String,System.Double)">
      <summary>Initializes a new instance of the <see cref="T:System.Net.Http.Headers.TransferCodingWithQualityHeaderValue" /> class.</summary>
    </member>
    <member name="M:System.Net.Http.Headers.TransferCodingWithQualityHeaderValue.Parse(System.String)">
      <summary>Converts a string to an <see cref="T:System.Net.Http.Headers.TransferCodingWithQualityHeaderValue" /> instance.</summary>
      <returns>Returns <see cref="T:System.Net.Http.Headers.TransferCodingWithQualityHeaderValue" />.An <see cref="T:System.Net.Http.Headers.TransferCodingWithQualityHeaderValue" /> instance.</returns>
      <param name="input">A string that represents transfer-coding value information.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> is a null reference.</exception>
      <exception cref="T:System.FormatException">
        <paramref name="input" /> is not valid transfer-coding with quality header value information.</exception>
    </member>
    <member name="P:System.Net.Http.Headers.TransferCodingWithQualityHeaderValue.Quality">
      <returns>Returns <see cref="T:System.Double" />.</returns>
    </member>
    <member name="M:System.Net.Http.Headers.TransferCodingWithQualityHeaderValue.System#ICloneable#Clone">
      <summary>Creates a new object that is a copy of the current <see cref="T:System.Net.Http.Headers.TransferCodingWithQualityHeaderValue" /> instance.</summary>
      <returns>Returns <see cref="T:System.Object" />.A copy of the current instance.</returns>
    </member>
    <member name="M:System.Net.Http.Headers.TransferCodingWithQualityHeaderValue.TryParse(System.String,System.Net.Http.Headers.TransferCodingWithQualityHeaderValue@)">
      <summary>Determines whether a string is valid <see cref="T:System.Net.Http.Headers.TransferCodingWithQualityHeaderValue" /> information.</summary>
      <returns>Returns <see cref="T:System.Boolean" />.true if <paramref name="input" /> is valid <see cref="T:System.Net.Http.Headers.TransferCodingWithQualityHeaderValue" /> information; otherwise, false.</returns>
      <param name="input">The string to validate.</param>
      <param name="parsedValue">The <see cref="T:System.Net.Http.Headers.TransferCodingWithQualityHeaderValue" /> version of the string.</param>
    </member>
    <member name="T:System.Net.Http.Headers.ViaHeaderValue">
      <summary>Represents the value of a Via header.</summary>
    </member>
    <member name="M:System.Net.Http.Headers.ViaHeaderValue.#ctor(System.String,System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Net.Http.Headers.ViaHeaderValue" /> class.</summary>
      <param name="protocolVersion">The protocol version of the received protocol.</param>
      <param name="receivedBy">The host and port that the request or response was received by.</param>
    </member>
    <member name="M:System.Net.Http.Headers.ViaHeaderValue.#ctor(System.String,System.String,System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Net.Http.Headers.ViaHeaderValue" /> class.</summary>
      <param name="protocolVersion">The protocol version of the received protocol.</param>
      <param name="receivedBy">The host and port that the request or response was received by.</param>
      <param name="protocolName">The protocol name of the received protocol.</param>
    </member>
    <member name="M:System.Net.Http.Headers.ViaHeaderValue.#ctor(System.String,System.String,System.String,System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Net.Http.Headers.ViaHeaderValue" /> class.</summary>
      <param name="protocolVersion">The protocol version of the received protocol.</param>
      <param name="receivedBy">The host and port that the request or response was received by.</param>
      <param name="protocolName">The protocol name of the received protocol.</param>
      <param name="comment">The comment field used to identify the software of the recipient proxy or gateway.</param>
    </member>
    <member name="P:System.Net.Http.Headers.ViaHeaderValue.Comment">
      <summary>Gets the comment field used to identify the software of the recipient proxy or gateway.</summary>
      <returns>Returns <see cref="T:System.String" />.The comment field used to identify the software of the recipient proxy or gateway.</returns>
    </member>
    <member name="M:System.Net.Http.Headers.ViaHeaderValue.Equals(System.Object)">
      <summary>Determines whether the specified <see cref="T:System.Object" /> is equal to the current <see cref="T:System.Net.Http.Headers.ViaHeaderValue" />object.</summary>
      <returns>Returns <see cref="T:System.Boolean" />.true if the specified <see cref="T:System.Object" /> is equal to the current object; otherwise, false.</returns>
      <param name="obj">The object to compare with the current object.</param>
    </member>
    <member name="M:System.Net.Http.Headers.ViaHeaderValue.GetHashCode">
      <summary>Serves as a hash function for an <see cref="T:System.Net.Http.Headers.ViaHeaderValue" /> object.</summary>
      <returns>Returns <see cref="T:System.Int32" />.Returns a hash code for the current object.</returns>
    </member>
    <member name="M:System.Net.Http.Headers.ViaHeaderValue.Parse(System.String)">
      <summary>Converts a string to an <see cref="T:System.Net.Http.Headers.ViaHeaderValue" /> instance.</summary>
      <returns>Returns <see cref="T:System.Net.Http.Headers.ViaHeaderValue" />.An <see cref="T:System.Net.Http.Headers.ViaHeaderValue" /> instance.</returns>
      <param name="input">A string that represents via header value information.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> is a null reference.</exception>
      <exception cref="T:System.FormatException">
        <paramref name="input" /> is not valid via header value information.</exception>
    </member>
    <member name="P:System.Net.Http.Headers.ViaHeaderValue.ProtocolName">
      <summary>Gets the protocol name of the received protocol.</summary>
      <returns>Returns <see cref="T:System.String" />.The protocol name.</returns>
    </member>
    <member name="P:System.Net.Http.Headers.ViaHeaderValue.ProtocolVersion">
      <summary>Gets the protocol version of the received protocol.</summary>
      <returns>Returns <see cref="T:System.String" />.The protocol version.</returns>
    </member>
    <member name="P:System.Net.Http.Headers.ViaHeaderValue.ReceivedBy">
      <summary>Gets the host and port that the request or response was received by.</summary>
      <returns>Returns <see cref="T:System.String" />.The host and port that the request or response was received by.</returns>
    </member>
    <member name="M:System.Net.Http.Headers.ViaHeaderValue.System#ICloneable#Clone">
      <summary>Creates a new object that is a copy of the current <see cref="T:System.Net.Http.Headers.ViaHeaderValue" /> instance.</summary>
      <returns>Returns <see cref="T:System.Object" />.A copy of the current instance.</returns>
    </member>
    <member name="M:System.Net.Http.Headers.ViaHeaderValue.ToString">
      <summary>Returns a string that represents the current <see cref="T:System.Net.Http.Headers.ViaHeaderValue" /> object.</summary>
      <returns>Returns <see cref="T:System.String" />.A string that represents the current object.</returns>
    </member>
    <member name="M:System.Net.Http.Headers.ViaHeaderValue.TryParse(System.String,System.Net.Http.Headers.ViaHeaderValue@)">
      <summary>Determines whether a string is valid <see cref="T:System.Net.Http.Headers.ViaHeaderValue" /> information.</summary>
      <returns>Returns <see cref="T:System.Boolean" />.true if <paramref name="input" /> is valid <see cref="T:System.Net.Http.Headers.ViaHeaderValue" /> information; otherwise, false.</returns>
      <param name="input">The string to validate.</param>
      <param name="parsedValue">The <see cref="T:System.Net.Http.Headers.ViaHeaderValue" /> version of the string.</param>
    </member>
    <member name="T:System.Net.Http.Headers.WarningHeaderValue">
      <summary>Represents a warning value used by the Warning header.</summary>
    </member>
    <member name="M:System.Net.Http.Headers.WarningHeaderValue.#ctor(System.Int32,System.String,System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Net.Http.Headers.WarningHeaderValue" /> class.</summary>
      <param name="code">The specific warning code.</param>
      <param name="agent">The host that attached the warning.</param>
      <param name="text">A quoted-string containing the warning text.</param>
    </member>
    <member name="M:System.Net.Http.Headers.WarningHeaderValue.#ctor(System.Int32,System.String,System.String,System.DateTimeOffset)">
      <summary>Initializes a new instance of the <see cref="T:System.Net.Http.Headers.WarningHeaderValue" /> class.</summary>
      <param name="code">The specific warning code.</param>
      <param name="agent">The host that attached the warning.</param>
      <param name="text">A quoted-string containing the warning text.</param>
      <param name="date">The date/time stamp of the warning.</param>
    </member>
    <member name="P:System.Net.Http.Headers.WarningHeaderValue.Agent">
      <summary>Gets the host that attached the warning.</summary>
      <returns>Returns <see cref="T:System.String" />.The host that attached the warning.</returns>
    </member>
    <member name="P:System.Net.Http.Headers.WarningHeaderValue.Code">
      <summary>Gets the specific warning code.</summary>
      <returns>Returns <see cref="T:System.Int32" />.The specific warning code.</returns>
    </member>
    <member name="P:System.Net.Http.Headers.WarningHeaderValue.Date">
      <summary>Gets the date/time stamp of the warning.</summary>
      <returns>Returns <see cref="T:System.DateTimeOffset" />.The date/time stamp of the warning.</returns>
    </member>
    <member name="M:System.Net.Http.Headers.WarningHeaderValue.Equals(System.Object)">
      <summary>Determines whether the specified <see cref="T:System.Object" /> is equal to the current <see cref="T:System.Net.Http.Headers.WarningHeaderValue" /> object.</summary>
      <returns>Returns <see cref="T:System.Boolean" />.true if the specified <see cref="T:System.Object" /> is equal to the current object; otherwise, false.</returns>
      <param name="obj">The object to compare with the current object.</param>
    </member>
    <member name="M:System.Net.Http.Headers.WarningHeaderValue.GetHashCode">
      <summary>Serves as a hash function for an <see cref="T:System.Net.Http.Headers.WarningHeaderValue" /> object.</summary>
      <returns>Returns <see cref="T:System.Int32" />.A hash code for the current object.</returns>
    </member>
    <member name="M:System.Net.Http.Headers.WarningHeaderValue.Parse(System.String)">
      <summary>Converts a string to an <see cref="T:System.Net.Http.Headers.WarningHeaderValue" /> instance.</summary>
      <returns>Returns an <see cref="T:System.Net.Http.Headers.WarningHeaderValue" /> instance.</returns>
      <param name="input">A string that represents authentication header value information.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> is a null reference.</exception>
      <exception cref="T:System.FormatException">
        <paramref name="input" /> is not valid authentication header value information.</exception>
    </member>
    <member name="M:System.Net.Http.Headers.WarningHeaderValue.System#ICloneable#Clone">
      <summary>Creates a new object that is a copy of the current <see cref="T:System.Net.Http.Headers.WarningHeaderValue" /> instance.</summary>
      <returns>Returns <see cref="T:System.Object" />.Returns a copy of the current instance.</returns>
    </member>
    <member name="P:System.Net.Http.Headers.WarningHeaderValue.Text">
      <summary>Gets a quoted-string containing the warning text.</summary>
      <returns>Returns <see cref="T:System.String" />.A quoted-string containing the warning text.</returns>
    </member>
    <member name="M:System.Net.Http.Headers.WarningHeaderValue.ToString">
      <summary>Returns a string that represents the current <see cref="T:System.Net.Http.Headers.WarningHeaderValue" /> object.</summary>
      <returns>Returns <see cref="T:System.String" />.A string that represents the current object.</returns>
    </member>
    <member name="M:System.Net.Http.Headers.WarningHeaderValue.TryParse(System.String,System.Net.Http.Headers.WarningHeaderValue@)">
      <summary>Determines whether a string is valid <see cref="T:System.Net.Http.Headers.WarningHeaderValue" /> information.</summary>
      <returns>Returns <see cref="T:System.Boolean" />.true if <paramref name="input" /> is valid <see cref="T:System.Net.Http.Headers.WarningHeaderValue" /> information; otherwise, false.</returns>
      <param name="input">The string to validate.</param>
      <param name="parsedValue">The <see cref="T:System.Net.Http.Headers.WarningHeaderValue" /> version of the string.</param>
    </member>
  </members>
=======
ï»¿<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>System.Net.Http</name>
  </assembly>
  <members>
    <member name="T:System.Net.Http.ByteArrayContent">
      <summary>åºäºå­èæ°ç»æä¾ HTTP åå®¹ã</summary>
    </member>
    <member name="M:System.Net.Http.ByteArrayContent.#ctor(System.Byte[])">
      <summary>åå§å <see cref="T:System.Net.Http.ByteArrayContent" /> ç±»çæ°å®ä¾ã</summary>
      <param name="content">ç¨äºåå§å <see cref="T:System.Net.Http.ByteArrayContent" /> çåå®¹ã</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="content" /> åæ°ä¸º nullã</exception>
    </member>
    <member name="M:System.Net.Http.ByteArrayContent.#ctor(System.Byte[],System.Int32,System.Int32)">
      <summary>åå§å <see cref="T:System.Net.Http.ByteArrayContent" /> ç±»çæ°å®ä¾ã</summary>
      <param name="content">ç¨äºåå§å <see cref="T:System.Net.Http.ByteArrayContent" /> çåå®¹ã</param>
      <param name="offset">ä»¥å­èä¸ºåä½ï¼å¨<paramref name="content" /> åæ°ä¸­ç¨äºåå§å <see cref="T:System.Net.Http.ByteArrayContent" /> çåç§»éã</param>
      <param name="count">
        <paramref name="content" /> ä¸­ä»ç¨äºåå§å <see cref="T:System.Net.Http.ByteArrayContent" /> ç <paramref name="offset" /> åæ°å¼å§çå­èæ°ã</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="content" /> åæ°ä¸º nullã</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" /> åæ°å°äºé¶ã - æ - <paramref name="offset" /> åæ°å¤§äº <paramref name="content" />  åæ°æå®çåå®¹çé¿åº¦ã - æ - <paramref name="count " /> åæ°å°äºé¶ã - æ - <paramref name="count" /> åæ°å¤§äºç± <paramref name="content" /> åæ°åå» <paramref name="offset" /> åæ°ææå®çåå®¹é¿åº¦ã</exception>
    </member>
    <member name="M:System.Net.Http.ByteArrayContent.CreateContentReadStreamAsync">
      <summary>åå»º HTTP åå®¹æµï¼å®æ¯å¶åå¤å¨å­åºæ¯ <see cref="T:System.Net.Http.ByteArrayContent" /> çåå­çè¯»åçå¼æ­¥æä½ã</summary>
      <returns>è¿å <see cref="T:System.Threading.Tasks.Task`1" />ã è¡¨ç¤ºå¼æ­¥æä½çä»»å¡å¯¹è±¡ã</returns>
    </member>
    <member name="M:System.Net.Http.ByteArrayContent.SerializeToStreamAsync(System.IO.Stream,System.Net.TransportContext)">
      <summary>åºååå¹¶åå¥å¨æé å½æ°ä¸­æä¾çå­èæ°ç»å°ä½ä¸ºå¼æ­¥æä½ç HTTP åå®¹æµã</summary>
      <returns>è¿å <see cref="T:System.Threading.Tasks.Task" />ã è¡¨ç¤ºå¼æ­¥æä½çä»»å¡å¯¹è±¡ã</returns>
      <param name="stream">ç®æ æµã</param>
      <param name="context">æå³ä¼ è¾çä¿¡æ¯ï¼ä¾å¦ï¼ééç»å®ã æ­¤åæ°å¯ä»¥ä¸º nullã</param>
    </member>
    <member name="M:System.Net.Http.ByteArrayContent.TryComputeLength(System.Int64@)">
      <summary>ç¡®å®å­èæ°ç»æ¯å¦å·æåæ³çå­èé¿åº¦ã</summary>
      <returns>è¿å <see cref="T:System.Boolean" />ã å¦æ <paramref name="length" /> ä¸ºææé¿åº¦ï¼åä¸º trueï¼å¦åï¼ä¸º falseã</returns>
      <param name="length">ä»¥å­èä¸ºåä½çå­èæ°ç»çé¿åº¦ã</param>
    </member>
    <member name="T:System.Net.Http.ClientCertificateOption">
      <summary>æå®å¦ä½æä¾å®¢æ·ç«¯è¯ä¹¦ã</summary>
    </member>
    <member name="F:System.Net.Http.ClientCertificateOption.Manual">
      <summary>è¯¥åºç¨ç¨åºå <see cref="T:System.Net.Http.WebRequestHandler" /> æå¨æä¾å®¢æ·ç«¯è¯ä¹¦ã è¿å¼æ¯é»è®¤å¼ã</summary>
    </member>
    <member name="F:System.Net.Http.ClientCertificateOption.Automatic">
      <summary>
        <see cref="T:System.Net.Http.HttpClientHandler" /> å°å°è¯èªå¨æä¾ææçå¯å©ç¨çå®¢æ·ç«¯è¯ä¹¦ã</summary>
    </member>
    <member name="T:System.Net.Http.DelegatingHandler">
      <summary>è¢«ç§°ä¸ºåé¨å¤çç¨åºçå¹¶å° HTTP ååºæ¶æ¯å§æç»å¦ä¸å¤çç¨åºç HTTP å¤çç¨åºçåºç±»åã</summary>
    </member>
    <member name="M:System.Net.Http.DelegatingHandler.#ctor">
      <summary>åå»º <see cref="T:System.Net.Http.DelegatingHandler" /> ç±»çæ°å®ä¾ã</summary>
    </member>
    <member name="M:System.Net.Http.DelegatingHandler.#ctor(System.Net.Http.HttpMessageHandler)">
      <summary>åå»ºç¹å®åé¨å¤çç¨åºç <see cref="T:System.Net.Http.DelegatingHandler" /> ç±»çæ°å®ä¾ã</summary>
      <param name="innerHandler">è´è´£å¤ç HTTP ååºæ¶æ¯çåé¨å¤çç¨åºã</param>
    </member>
    <member name="M:System.Net.Http.DelegatingHandler.Dispose(System.Boolean)">
      <summary>éæ¾ç± <see cref="T:System.Net.Http.DelegatingHandler" /> ä½¿ç¨çéæç®¡èµæºï¼å¹¶å¯æ ¹æ®éè¦éæ¾æç®¡èµæºã</summary>
      <param name="disposing">å¦æä¸º trueï¼åéæ¾æç®¡èµæºåéæç®¡èµæºï¼å¦æä¸º falseï¼åä»éæ¾éæç®¡èµæºã</param>
    </member>
    <member name="P:System.Net.Http.DelegatingHandler.InnerHandler">
      <summary>è·åæè®¾ç½®å¤ç HTTP ååºæ¶æ¯çåé¨å¤çç¨åºã</summary>
      <returns>è¿å <see cref="T:System.Net.Http.HttpMessageHandler" />ã HTTP ååºæ¶æ¯çåé¨å¤çç¨åºã</returns>
    </member>
    <member name="M:System.Net.Http.DelegatingHandler.SendAsync(System.Net.Http.HttpRequestMessage,System.Threading.CancellationToken)">
      <summary>ä»¥å¼æ­¥æä½åé HTTP è¯·æ±å°åé¨ç®¡çå¨ä»¥åéå°æå¡å¨ã</summary>
      <returns>è¿å <see cref="T:System.Threading.Tasks.Task`1" />ã è¡¨ç¤ºå¼æ­¥æä½çä»»å¡å¯¹è±¡ã</returns>
      <param name="request">è¦åéå°æå¡å¨ç HTTP è¯·æ±æ¶æ¯ã</param>
      <param name="cancellationToken">åæ¶æä½çåæ¶æ è®°ã</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="request" /> ä¸º nullã</exception>
    </member>
    <member name="T:System.Net.Http.FormUrlEncodedContent">
      <summary>ä½¿ç¨åºç¨ç¨åº/x-www-form-urlencoded MIME ç±»åç¼ç çåç§°/å¼åç»çå®¹å¨ã</summary>
    </member>
    <member name="M:System.Net.Http.FormUrlEncodedContent.#ctor(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.String}})">
      <summary>ä½¿ç¨æå®çåç§°/å¼å¯¹éååå§å <see cref="T:System.Net.Http.FormUrlEncodedContent" /> ç±»çæ°å®ä¾ã</summary>
      <param name="nameValueCollection">åç§°/å¼å¯¹çéåã</param>
    </member>
    <member name="T:System.Net.Http.HttpClient">
      <summary>æä¾åºæ¬ç±»ï¼ç¨äºåé HTTP è¯·æ±åæ¥æ¶æ¥èªéè¿ URI ç¡®è®¤çèµæºç HTTP ååºã</summary>
    </member>
    <member name="M:System.Net.Http.HttpClient.#ctor">
      <summary>åå§å <see cref="T:System.Net.Http.HttpClient" /> ç±»çæ°å®ä¾ã</summary>
    </member>
    <member name="M:System.Net.Http.HttpClient.#ctor(System.Net.Http.HttpMessageHandler)">
      <summary>ç¨ç¹å®çå¤çç¨åºåå§å <see cref="T:System.Net.Http.HttpClient" /> ç±»çæ°å®ä¾ã</summary>
      <param name="handler">ç¨äºåéè¯·æ±çä½¿ç¨ç HTTP å¤çç¨åºå æ ã</param>
    </member>
    <member name="M:System.Net.Http.HttpClient.#ctor(System.Net.Http.HttpMessageHandler,System.Boolean)">
    </member>
    <member name="P:System.Net.Http.HttpClient.BaseAddress">
      <summary>è·åæè®¾ç½®åéè¯·æ±æ¶ä½¿ç¨ç Internet èµæºçç»ä¸èµæºæ è¯ç¬¦ (URI) çåºå°åã</summary>
      <returns>è¿å <see cref="T:System.Uri" />ã åéè¯·æ±æ¶ä½¿ç¨ç Internet èµæºçç»ä¸èµæºæ è¯ç¬¦ (URI) çåºåã</returns>
    </member>
    <member name="M:System.Net.Http.HttpClient.CancelPendingRequests">
      <summary>åæ¶è¯¥å®ä¾æææèµ·çè¯·æ±ã</summary>
    </member>
    <member name="P:System.Net.Http.HttpClient.DefaultRequestHeaders">
      <summary>è·åä¸æ¯ä¸ªè¯·æ±ä¸èµ·åéçæ é¢ã</summary>
      <returns>è¿å <see cref="T:System.Net.Http.Headers.HttpRequestHeaders" />ã åºä¸æ¯ä¸ä¸ªè¯·æ±ä¸èµ·åéçæ é¢ã</returns>
    </member>
    <member name="M:System.Net.Http.HttpClient.DeleteAsync(System.String)">
      <summary>ä»¥å¼æ­¥æä½å° DELETE è¯·æ±åéç»æå® URIã</summary>
      <returns>è¿å <see cref="T:System.Threading.Tasks.Task`1" />ã è¡¨ç¤ºå¼æ­¥æä½çä»»å¡å¯¹è±¡ã</returns>
      <param name="requestUri">è¯·æ±åéå°ç URIã</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="requestUri" /> ä¸º nullã</exception>
    </member>
    <member name="M:System.Net.Http.HttpClient.DeleteAsync(System.String,System.Threading.CancellationToken)">
      <summary>ç¨ä»¥å¼æ­¥æä½çåæ¶æ è®°åé DELETE è¯·æ±å°æå®ç URIã</summary>
      <returns>è¿å <see cref="T:System.Threading.Tasks.Task`1" />ã è¡¨ç¤ºå¼æ­¥æä½çä»»å¡å¯¹è±¡ã</returns>
      <param name="requestUri">è¯·æ±åéå°ç URIã</param>
      <param name="cancellationToken">å¯ç±å¶ä»å¯¹è±¡æçº¿ç¨ç¨ä»¥æ¥æ¶åæ¶éç¥çåæ¶æ è®°ã</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="requestUri" /> ä¸º nullã</exception>
    </member>
    <member name="M:System.Net.Http.HttpClient.DeleteAsync(System.Uri)">
      <summary>ä»¥å¼æ­¥æä½å° DELETE è¯·æ±åéç»æå® URIã</summary>
      <returns>è¿å <see cref="T:System.Threading.Tasks.Task`1" />ã è¡¨ç¤ºå¼æ­¥æä½çä»»å¡å¯¹è±¡ã</returns>
      <param name="requestUri">è¯·æ±åéå°ç URIã</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="requestUri" /> ä¸º nullã</exception>
    </member>
    <member name="M:System.Net.Http.HttpClient.DeleteAsync(System.Uri,System.Threading.CancellationToken)">
      <summary>ç¨ä»¥å¼æ­¥æä½çåæ¶æ è®°åé DELETE è¯·æ±å°æå®ç URIã</summary>
      <returns>è¿å <see cref="T:System.Threading.Tasks.Task`1" />ã è¡¨ç¤ºå¼æ­¥æä½çä»»å¡å¯¹è±¡ã</returns>
      <param name="requestUri">è¯·æ±åéå°ç URIã</param>
      <param name="cancellationToken">å¯ç±å¶ä»å¯¹è±¡æçº¿ç¨ç¨ä»¥æ¥æ¶åæ¶éç¥çåæ¶æ è®°ã</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="requestUri" /> ä¸º nullã</exception>
    </member>
    <member name="M:System.Net.Http.HttpClient.Dispose(System.Boolean)">
      <summary>éæ¾ç± <see cref="T:System.Net.Http.HttpClient" /> ä½¿ç¨çéæç®¡èµæºï¼å¹¶å¯æ ¹æ®éè¦éæ¾æç®¡èµæºã</summary>
      <param name="disposing">å¦æä¸º trueï¼åéæ¾æç®¡èµæºåéæç®¡èµæºï¼å¦æä¸º falseï¼åä»éæ¾éæç®¡èµæºã</param>
    </member>
    <member name="M:System.Net.Http.HttpClient.GetAsync(System.String)">
      <summary>ä»¥å¼æ­¥æä½å° GET è¯·æ±åéç»æå® URIã</summary>
      <returns>è¿å <see cref="T:System.Threading.Tasks.Task`1" />ã è¡¨ç¤ºå¼æ­¥æä½çä»»å¡å¯¹è±¡ã</returns>
      <param name="requestUri">è¯·æ±åéå°ç URIã</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="requestUri" /> ä¸º nullã</exception>
    </member>
    <member name="M:System.Net.Http.HttpClient.GetAsync(System.String,System.Net.Http.HttpCompletionOption)">
      <summary>ç¨ä»¥å¼æ­¥æä½ç HTTP å®æéé¡¹åé GET è¯·æ±å°æå®ç URIã</summary>
      <returns>è¿å <see cref="T:System.Threading.Tasks.Task`1" />ã</returns>
      <param name="requestUri">è¯·æ±åéå°ç URIã</param>
      <param name="completionOption">æç¤ºæä½åºè§ä¸ºå·²å®æçæ¶é´ç HTTP å®æéé¡¹å¼ã</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="requestUri" /> ä¸º nullã</exception>
    </member>
    <member name="M:System.Net.Http.HttpClient.GetAsync(System.String,System.Net.Http.HttpCompletionOption,System.Threading.CancellationToken)">
      <summary>ç¨ä»¥å¼æ­¥æä½ç HTTP å®æéé¡¹ååæ¶æ è®°åé DELETE è¯·æ±å°æå®ç URIã</summary>
      <returns>è¿å <see cref="T:System.Threading.Tasks.Task`1" />ã</returns>
      <param name="requestUri">è¯·æ±åéå°ç URIã</param>
      <param name="completionOption">æç¤ºæä½åºè§ä¸ºå·²å®æçæ¶é´ç HTTP å®æéé¡¹å¼ã</param>
      <param name="cancellationToken">å¯ç±å¶ä»å¯¹è±¡æçº¿ç¨ç¨ä»¥æ¥æ¶åæ¶éç¥çåæ¶æ è®°ã</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="requestUri" /> ä¸º nullã</exception>
    </member>
    <member name="M:System.Net.Http.HttpClient.GetAsync(System.String,System.Threading.CancellationToken)">
      <summary>ç¨ä»¥å¼æ­¥æä½çåæ¶æ è®°åé GET è¯·æ±å°æå®ç URIã</summary>
      <returns>è¿å <see cref="T:System.Threading.Tasks.Task`1" />ã</returns>
      <param name="requestUri">è¯·æ±åéå°ç URIã</param>
      <param name="cancellationToken">å¯ç±å¶ä»å¯¹è±¡æçº¿ç¨ç¨ä»¥æ¥æ¶åæ¶éç¥çåæ¶æ è®°ã</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="requestUri" /> ä¸º nullã</exception>
    </member>
    <member name="M:System.Net.Http.HttpClient.GetAsync(System.Uri)">
      <summary>ä»¥å¼æ­¥æä½å° GET è¯·æ±åéç»æå® URIã</summary>
      <returns>è¿å <see cref="T:System.Threading.Tasks.Task`1" />ã è¡¨ç¤ºå¼æ­¥æä½çä»»å¡å¯¹è±¡ã</returns>
      <param name="requestUri">è¯·æ±åéå°ç URIã</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="requestUri" /> ä¸º nullã</exception>
    </member>
    <member name="M:System.Net.Http.HttpClient.GetAsync(System.Uri,System.Net.Http.HttpCompletionOption)">
      <summary>ç¨ä»¥å¼æ­¥æä½ç HTTP å®æéé¡¹åé GET è¯·æ±å°æå®ç URIã</summary>
      <returns>è¿å <see cref="T:System.Threading.Tasks.Task`1" />ã è¡¨ç¤ºå¼æ­¥æä½çä»»å¡å¯¹è±¡ã</returns>
      <param name="requestUri">è¯·æ±åéå°ç URIã</param>
      <param name="completionOption">æç¤ºæä½åºè§ä¸ºå·²å®æçæ¶é´ç HTTP å®æéé¡¹å¼ã</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="requestUri" /> ä¸º nullã</exception>
    </member>
    <member name="M:System.Net.Http.HttpClient.GetAsync(System.Uri,System.Net.Http.HttpCompletionOption,System.Threading.CancellationToken)">
      <summary>ç¨ä»¥å¼æ­¥æä½ç HTTP å®æéé¡¹ååæ¶æ è®°åé DELETE è¯·æ±å°æå®ç URIã</summary>
      <returns>è¿å <see cref="T:System.Threading.Tasks.Task`1" />ã è¡¨ç¤ºå¼æ­¥æä½çä»»å¡å¯¹è±¡ã</returns>
      <param name="requestUri">è¯·æ±åéå°ç URIã</param>
      <param name="completionOption">æç¤ºæä½åºè§ä¸ºå·²å®æçæ¶é´ç HTTP å®æéé¡¹å¼ã</param>
      <param name="cancellationToken">å¯ç±å¶ä»å¯¹è±¡æçº¿ç¨ç¨ä»¥æ¥æ¶åæ¶éç¥çåæ¶æ è®°ã</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="requestUri" /> ä¸º nullã</exception>
    </member>
    <member name="M:System.Net.Http.HttpClient.GetAsync(System.Uri,System.Threading.CancellationToken)">
      <summary>ç¨ä»¥å¼æ­¥æä½çåæ¶æ è®°åé GET è¯·æ±å°æå®ç URIã</summary>
      <returns>è¿å <see cref="T:System.Threading.Tasks.Task`1" />ã è¡¨ç¤ºå¼æ­¥æä½çä»»å¡å¯¹è±¡ã</returns>
      <param name="requestUri">è¯·æ±åéå°ç URIã</param>
      <param name="cancellationToken">å¯ç±å¶ä»å¯¹è±¡æçº¿ç¨ç¨ä»¥æ¥æ¶åæ¶éç¥çåæ¶æ è®°ã</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="requestUri" /> ä¸º nullã</exception>
    </member>
    <member name="M:System.Net.Http.HttpClient.GetByteArrayAsync(System.String)">
      <summary>å° GET è¯·æ±åéå°æå® URI å¹¶å¨å¼æ­¥æä½ä¸­ä»¥å­èæ°ç»çå½¢å¼è¿åååºæ­£æã</summary>
      <returns>è¿å <see cref="T:System.Threading.Tasks.Task`1" />ã è¡¨ç¤ºå¼æ­¥æä½çä»»å¡å¯¹è±¡ã</returns>
      <param name="requestUri">è¯·æ±åéå°ç URIã</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="requestUri" /> ä¸º nullã</exception>
    </member>
    <member name="M:System.Net.Http.HttpClient.GetByteArrayAsync(System.Uri)">
      <summary>å° GET è¯·æ±åéå°æå® URI å¹¶å¨å¼æ­¥æä½ä¸­ä»¥å­èæ°ç»çå½¢å¼è¿åååºæ­£æã</summary>
      <returns>è¿å <see cref="T:System.Threading.Tasks.Task`1" />ã è¡¨ç¤ºå¼æ­¥æä½çä»»å¡å¯¹è±¡ã</returns>
      <param name="requestUri">è¯·æ±åéå°ç URIã</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="requestUri" /> ä¸º nullã</exception>
    </member>
    <member name="M:System.Net.Http.HttpClient.GetStreamAsync(System.String)">
      <summary>å° GET è¯·æ±åéå°æå® URI å¹¶å¨å¼æ­¥æä½ä¸­ä»¥æµçå½¢å¼è¿åååºæ­£æã</summary>
      <returns>è¿å <see cref="T:System.Threading.Tasks.Task`1" />ã è¡¨ç¤ºå¼æ­¥æä½çä»»å¡å¯¹è±¡ã</returns>
      <param name="requestUri">è¯·æ±åéå°ç URIã</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="requestUri" /> ä¸º nullã</exception>
    </member>
    <member name="M:System.Net.Http.HttpClient.GetStreamAsync(System.Uri)">
      <summary>å° GET è¯·æ±åéå°æå® URI å¹¶å¨å¼æ­¥æä½ä¸­ä»¥æµçå½¢å¼è¿åååºæ­£æã</summary>
      <returns>è¿å <see cref="T:System.Threading.Tasks.Task`1" />ã è¡¨ç¤ºå¼æ­¥æä½çä»»å¡å¯¹è±¡ã</returns>
      <param name="requestUri">è¯·æ±åéå°ç URIã</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="requestUri" /> ä¸º nullã</exception>
    </member>
    <member name="M:System.Net.Http.HttpClient.GetStringAsync(System.String)">
      <summary>å° GET è¯·æ±åéå°æå® URI å¹¶å¨å¼æ­¥æä½ä¸­ä»¥å­ç¬¦ä¸²çå½¢å¼è¿åååºæ­£æã</summary>
      <returns>è¿å <see cref="T:System.Threading.Tasks.Task`1" />ã è¡¨ç¤ºå¼æ­¥æä½çä»»å¡å¯¹è±¡ã</returns>
      <param name="requestUri">è¯·æ±åéå°ç URIã</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="requestUri" /> ä¸º nullã</exception>
    </member>
    <member name="M:System.Net.Http.HttpClient.GetStringAsync(System.Uri)">
      <summary>å° GET è¯·æ±åéå°æå® URI å¹¶å¨å¼æ­¥æä½ä¸­ä»¥å­ç¬¦ä¸²çå½¢å¼è¿åååºæ­£æã</summary>
      <returns>è¿å <see cref="T:System.Threading.Tasks.Task`1" />ã è¡¨ç¤ºå¼æ­¥æä½çä»»å¡å¯¹è±¡ã</returns>
      <param name="requestUri">è¯·æ±åéå°ç URIã</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="requestUri" /> ä¸º nullã</exception>
    </member>
    <member name="P:System.Net.Http.HttpClient.MaxResponseContentBufferSize">
      <summary>è·åæè®¾ç½®è¯»åååºåå®¹æ¶è¦ç¼å²çæå¤§å­èæ°ã</summary>
      <returns>è¿å <see cref="T:System.Int32" />ã å½è¯»åååºåå®¹æ¶ç¼å²åºçæå¤§å­èæ°ã æ­¤å±æ§çé»è®¤å¼ä¸º 64Kã</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">æå®å°äºæç­äºé¶ã</exception>
      <exception cref="T:System.InvalidOperationException">å¨å½åå®ä¾ä¸­å·²å¯å¨æä½ã</exception>
      <exception cref="T:System.ObjectDisposedException">å·²éæ¾å½åçå®ä¾ã</exception>
    </member>
    <member name="M:System.Net.Http.HttpClient.PostAsync(System.String,System.Net.Http.HttpContent)">
      <summary>ä»¥å¼æ­¥æä½å° POST è¯·æ±åéç»æå® URIã</summary>
      <returns>è¿å <see cref="T:System.Threading.Tasks.Task`1" />ã è¡¨ç¤ºå¼æ­¥æä½çä»»å¡å¯¹è±¡ã</returns>
      <param name="requestUri">è¯·æ±åéå°ç URIã</param>
      <param name="content">åéå°æå¡å¨ç HTTP è¯·æ±åå®¹ã</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="requestUri" /> ä¸º nullã</exception>
    </member>
    <member name="M:System.Net.Http.HttpClient.PostAsync(System.String,System.Net.Http.HttpContent,System.Threading.CancellationToken)">
      <summary>ç¨ä»¥å¼æ­¥æä½çåæ¶æ è®°åé POST è¯·æ±ã</summary>
      <returns>è¿å <see cref="T:System.Threading.Tasks.Task`1" />ã è¡¨ç¤ºå¼æ­¥æä½çä»»å¡å¯¹è±¡ã</returns>
      <param name="requestUri">è¯·æ±åéå°ç URIã</param>
      <param name="content">åéå°æå¡å¨ç HTTP è¯·æ±åå®¹ã</param>
      <param name="cancellationToken">å¯ç±å¶ä»å¯¹è±¡æçº¿ç¨ç¨ä»¥æ¥æ¶åæ¶éç¥çåæ¶æ è®°ã</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="requestUri" /> ä¸º nullã</exception>
    </member>
    <member name="M:System.Net.Http.HttpClient.PostAsync(System.Uri,System.Net.Http.HttpContent)">
      <summary>ä»¥å¼æ­¥æä½å° POST è¯·æ±åéç»æå® URIã</summary>
      <returns>è¿å <see cref="T:System.Threading.Tasks.Task`1" />ã è¡¨ç¤ºå¼æ­¥æä½çä»»å¡å¯¹è±¡ã</returns>
      <param name="requestUri">è¯·æ±åéå°ç URIã</param>
      <param name="content">åéå°æå¡å¨ç HTTP è¯·æ±åå®¹ã</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="requestUri" /> ä¸º nullã</exception>
    </member>
    <member name="M:System.Net.Http.HttpClient.PostAsync(System.Uri,System.Net.Http.HttpContent,System.Threading.CancellationToken)">
      <summary>ç¨ä»¥å¼æ­¥æä½çåæ¶æ è®°åé POST è¯·æ±ã</summary>
      <returns>è¿å <see cref="T:System.Threading.Tasks.Task`1" />ã è¡¨ç¤ºå¼æ­¥æä½çä»»å¡å¯¹è±¡ã</returns>
      <param name="requestUri">è¯·æ±åéå°ç URIã</param>
      <param name="content">åéå°æå¡å¨ç HTTP è¯·æ±åå®¹ã</param>
      <param name="cancellationToken">å¯ç±å¶ä»å¯¹è±¡æçº¿ç¨ç¨ä»¥æ¥æ¶åæ¶éç¥çåæ¶æ è®°ã</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="requestUri" /> ä¸º nullã</exception>
    </member>
    <member name="M:System.Net.Http.HttpClient.PutAsync(System.String,System.Net.Http.HttpContent)">
      <summary>ä»¥å¼æ­¥æä½å° PUT è¯·æ±åéç»æå® URIã</summary>
      <returns>è¿å <see cref="T:System.Threading.Tasks.Task`1" />ã è¡¨ç¤ºå¼æ­¥æä½çä»»å¡å¯¹è±¡ã</returns>
      <param name="requestUri">è¯·æ±åéå°ç URIã</param>
      <param name="content">åéå°æå¡å¨ç HTTP è¯·æ±åå®¹ã</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="requestUri" /> ä¸º nullã</exception>
    </member>
    <member name="M:System.Net.Http.HttpClient.PutAsync(System.String,System.Net.Http.HttpContent,System.Threading.CancellationToken)">
      <summary>ç¨ä»¥å¼æ­¥æä½çåæ¶æ è®°åé PUT è¯·æ±ã</summary>
      <returns>è¿å <see cref="T:System.Threading.Tasks.Task`1" />ã è¡¨ç¤ºå¼æ­¥æä½çä»»å¡å¯¹è±¡ã</returns>
      <param name="requestUri">è¯·æ±åéå°ç URIã</param>
      <param name="content">åéå°æå¡å¨ç HTTP è¯·æ±åå®¹ã</param>
      <param name="cancellationToken">å¯ç±å¶ä»å¯¹è±¡æçº¿ç¨ç¨ä»¥æ¥æ¶åæ¶éç¥çåæ¶æ è®°ã</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="requestUri" /> ä¸º nullã</exception>
    </member>
    <member name="M:System.Net.Http.HttpClient.PutAsync(System.Uri,System.Net.Http.HttpContent)">
      <summary>ä»¥å¼æ­¥æä½å° PUT è¯·æ±åéç»æå® URIã</summary>
      <returns>è¿å <see cref="T:System.Threading.Tasks.Task`1" />ã è¡¨ç¤ºå¼æ­¥æä½çä»»å¡å¯¹è±¡ã</returns>
      <param name="requestUri">è¯·æ±åéå°ç URIã</param>
      <param name="content">åéå°æå¡å¨ç HTTP è¯·æ±åå®¹ã</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="requestUri" /> ä¸º nullã</exception>
    </member>
    <member name="M:System.Net.Http.HttpClient.PutAsync(System.Uri,System.Net.Http.HttpContent,System.Threading.CancellationToken)">
      <summary>ç¨ä»¥å¼æ­¥æä½çåæ¶æ è®°åé PUT è¯·æ±ã</summary>
      <returns>è¿å <see cref="T:System.Threading.Tasks.Task`1" />ã è¡¨ç¤ºå¼æ­¥æä½çä»»å¡å¯¹è±¡ã</returns>
      <param name="requestUri">è¯·æ±åéå°ç URIã</param>
      <param name="content">åéå°æå¡å¨ç HTTP è¯·æ±åå®¹ã</param>
      <param name="cancellationToken">å¯ç±å¶ä»å¯¹è±¡æçº¿ç¨ç¨ä»¥æ¥æ¶åæ¶éç¥çåæ¶æ è®°ã</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="requestUri" /> ä¸º nullã</exception>
    </member>
    <member name="M:System.Net.Http.HttpClient.SendAsync(System.Net.Http.HttpRequestMessage)">
      <summary>ä»¥å¼æ­¥æä½åé HTTP è¯·æ±ã</summary>
      <returns>è¿å <see cref="T:System.Threading.Tasks.Task`1" />ã è¡¨ç¤ºå¼æ­¥æä½çä»»å¡å¯¹è±¡ã</returns>
      <param name="request">è¦åéç HTTP è¯·æ±æ¶æ¯ã</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="request" /> ä¸º nullã</exception>
      <exception cref="T:System.InvalidOperationException">è¯·æ±æ¶æ¯å·²ç± <see cref="T:System.Net.Http.HttpClient" /> å®ä¾åéã</exception>
    </member>
    <member name="M:System.Net.Http.HttpClient.SendAsync(System.Net.Http.HttpRequestMessage,System.Net.Http.HttpCompletionOption)">
      <summary>ä»¥å¼æ­¥æä½åé HTTP è¯·æ±ã</summary>
      <returns>è¿å <see cref="T:System.Threading.Tasks.Task`1" />ã è¡¨ç¤ºå¼æ­¥æä½çä»»å¡å¯¹è±¡ã</returns>
      <param name="request">è¦åéç HTTP è¯·æ±æ¶æ¯ã</param>
      <param name="completionOption">æä½åºå®ææ¶ï¼å¨ååºå¯å©ç¨æå¨è¯»åæ´ä¸ªååºåå®¹ä¹åï¼ã</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="request" /> ä¸º nullã</exception>
      <exception cref="T:System.InvalidOperationException">è¯·æ±æ¶æ¯å·²ç± <see cref="T:System.Net.Http.HttpClient" /> å®ä¾åéã</exception>
    </member>
    <member name="M:System.Net.Http.HttpClient.SendAsync(System.Net.Http.HttpRequestMessage,System.Net.Http.HttpCompletionOption,System.Threading.CancellationToken)">
      <summary>ä»¥å¼æ­¥æä½åé HTTP è¯·æ±ã</summary>
      <returns>è¿å <see cref="T:System.Threading.Tasks.Task`1" />ã è¡¨ç¤ºå¼æ­¥æä½çä»»å¡å¯¹è±¡ã</returns>
      <param name="request">è¦åéç HTTP è¯·æ±æ¶æ¯ã</param>
      <param name="completionOption">æä½åºå®ææ¶ï¼å¨ååºå¯å©ç¨æå¨è¯»åæ´ä¸ªååºåå®¹ä¹åï¼ã</param>
      <param name="cancellationToken">åæ¶æä½çåæ¶æ è®°ã</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="request" /> ä¸º nullã</exception>
      <exception cref="T:System.InvalidOperationException">è¯·æ±æ¶æ¯å·²ç± <see cref="T:System.Net.Http.HttpClient" /> å®ä¾åéã</exception>
    </member>
    <member name="M:System.Net.Http.HttpClient.SendAsync(System.Net.Http.HttpRequestMessage,System.Threading.CancellationToken)">
      <summary>ä»¥å¼æ­¥æä½åé HTTP è¯·æ±ã</summary>
      <returns>è¿å <see cref="T:System.Threading.Tasks.Task`1" />ã è¡¨ç¤ºå¼æ­¥æä½çä»»å¡å¯¹è±¡ã</returns>
      <param name="request">è¦åéç HTTP è¯·æ±æ¶æ¯ã</param>
      <param name="cancellationToken">åæ¶æä½çåæ¶æ è®°ã</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="request" /> ä¸º nullã</exception>
      <exception cref="T:System.InvalidOperationException">è¯·æ±æ¶æ¯å·²ç± <see cref="T:System.Net.Http.HttpClient" /> å®ä¾åéã</exception>
    </member>
    <member name="P:System.Net.Http.HttpClient.Timeout">
      <summary>è·åæè®¾ç½®è¯·æ±è¶æ¶åç­å¾çæ¯«ç§æ°ã</summary>
      <returns>è¿å <see cref="T:System.TimeSpan" />ã è¯·æ±è¶æ¶åç­å¾çæ¯«ç§æ°ã</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">æå®çè¶æ¶å¼å°äºæç­äºé¶ï¼å¹¶ä¸ä¸ä¸º <see cref="F:System.Threading.Timeout.Infinite" />ã</exception>
      <exception cref="T:System.InvalidOperationException">å¨å½åå®ä¾ä¸­å·²å¯å¨æä½ã</exception>
      <exception cref="T:System.ObjectDisposedException">å·²éæ¾å½åçå®ä¾ã</exception>
    </member>
    <member name="T:System.Net.Http.HttpClientHandler">
      <summary>
        <see cref="T:System.Net.Http.HttpClient" /> æç¨çé»è®¤æ¶æ¯çæ¬ã</summary>
    </member>
    <member name="M:System.Net.Http.HttpClientHandler.#ctor">
      <summary>åå»º <see cref="T:System.Net.Http.HttpClientHandler" /> ç±»çå®ä¾ã</summary>
    </member>
    <member name="P:System.Net.Http.HttpClientHandler.AllowAutoRedirect">
      <summary>è·åæè®¾ç½®ä¸ä¸ªå¼ï¼è¯¥å¼æç¤ºå¤çç¨åºæ¯å¦åºè·ééå®åååºã</summary>
      <returns>è¿å <see cref="T:System.Boolean" />ã å¦æå¤çå¨åºæç§éå®åååºï¼åä¸º trueï¼å¦åä¸º falseã é»è®¤å¼ä¸º trueã</returns>
    </member>
    <member name="P:System.Net.Http.HttpClientHandler.AutomaticDecompression">
      <summary>è·åæè®¾ç½®å¤çç¨åºç¨äºå®ç° HTTP åå®¹ååºçèªå¨è§£åç¼©çè§£åç¼©æ¹æ³ã</summary>
      <returns>è¿å <see cref="T:System.Net.DecompressionMethods" />ã ç±å¤çç¨åºä½¿ç¨çèªå¨è§£åç¼©ã é»è®¤å¼ä¸º <see cref="F:System.Net.DecompressionMethods.None" />ã</returns>
    </member>
    <member name="P:System.Net.Http.HttpClientHandler.ClientCertificateOptions">
      <summary>è·åæè®¾ç½®ä¸æ­¤å¤çç¨åºå³èçå®å¨è¯ä¹¦éåã</summary>
      <returns>è¿å <see cref="T:System.Net.Http.ClientCertificateOption" />ã ä¸æ­¤æä¾ç¨åºå³èçå®å¨è¯ä¹¦çéåã</returns>
    </member>
    <member name="P:System.Net.Http.HttpClientHandler.CookieContainer">
      <summary>è·åæè®¾ç½®ç¨äºå­å¨å¤çç¨åºäº§ççæå¡å¨ Cookie ç Cookie å®¹å¨ã</summary>
      <returns>è¿å <see cref="T:System.Net.CookieContainer" />ã ç¨äºéè¿å¤çç¨åºå­å¨æå¡å¨ cookie ç cookie å®¹å¨ã</returns>
    </member>
    <member name="P:System.Net.Http.HttpClientHandler.Credentials">
      <summary>è·åæè®¾ç½®æ­¤å¤çç¨åºä½¿ç¨çèº«ä»½éªè¯ä¿¡æ¯ã</summary>
      <returns>è¿å <see cref="T:System.Net.ICredentials" />ã ä¸å¤çç¨åºç¸å³èçèº«ä»½éªè¯å­è¯ã é»è®¤å¼ä¸º nullã</returns>
    </member>
    <member name="M:System.Net.Http.HttpClientHandler.Dispose(System.Boolean)">
      <summary>éæ¾ç± <see cref="T:System.Net.Http.HttpClientHandler" /> ä½¿ç¨çéæç®¡èµæºï¼å¹¶å¯æ ¹æ®éè¦éæ¾æç®¡èµæºã</summary>
      <param name="disposing">å¦æä¸º trueï¼åéæ¾æç®¡èµæºåéæç®¡èµæºï¼å¦æä¸º falseï¼åä»éæ¾éæç®¡èµæºã</param>
    </member>
    <member name="P:System.Net.Http.HttpClientHandler.MaxAutomaticRedirections">
      <summary>è·åæè®¾ç½®å°è·éçå¤çç¨åºçéå®åçæå¤§æ°ç®ã</summary>
      <returns>è¿å <see cref="T:System.Int32" />ã å¤çç¨åºè·éçæå¤§éå®åååºæ°ã é»è®¤å¼ä¸º 50ã</returns>
    </member>
    <member name="P:System.Net.Http.HttpClientHandler.MaxRequestContentBufferSize">
      <summary>è·åæè®¾ç½®å¤çç¨åºçä½¿ç¨çè¯·æ±åå®¹çæå¤§ç¼å²åºå¤§å°ã</summary>
      <returns>è¿å <see cref="T:System.Int32" />ã æå¤§è¯·æ±åå®¹ç¼å²åºå¤§å°ï¼ä»¥å­èä¸ºåä½ï¼ã é»è®¤å¼ä¸º 65,536 ä¸ªå­èã</returns>
    </member>
    <member name="P:System.Net.Http.HttpClientHandler.PreAuthenticate">
      <summary>è·åæè®¾ç½®ä¸ä¸ªå¼ï¼è¯¥å¼æç¤ºå¤çç¨åºæ¯å¦éè¯·æ±åéä¸ä¸ªâèº«ä»½éªè¯âæ å¤´ã</summary>
      <returns>è¿å <see cref="T:System.Boolean" />ã å¤çç¨åºç true å¨åçèº«ä»½éªè¯ä¹åéè¯·æ±ä¸èµ·åé HTTP æææ å¤´ï¼å¦åä¸º falseã é»è®¤å¼ä¸º falseã</returns>
    </member>
    <member name="P:System.Net.Http.HttpClientHandler.Proxy">
      <summary>è·åæè®¾ç½®å¤çç¨åºä½¿ç¨çä»£çä¿¡æ¯ã</summary>
      <returns>è¿å <see cref="T:System.Net.IWebProxy" />ã è¢«å¤çç¨åºä½¿ç¨çä»£çä¿¡æ¯ã é»è®¤å¼ä¸º nullã</returns>
    </member>
    <member name="M:System.Net.Http.HttpClientHandler.SendAsync(System.Net.Http.HttpRequestMessage,System.Threading.CancellationToken)">
      <summary>åå»ºåºäºç¨ä½ä¸ä¼é»å¡çæä½ç <see cref="T:System.Net.Http.HttpRequestMessage" /> çæä¾ä¿¡æ¯ç <see cref="T:System.Net.Http.HttpResponseMessage" /> å®ä¾ã</summary>
      <returns>è¿å <see cref="T:System.Threading.Tasks.Task`1" />ã è¡¨ç¤ºå¼æ­¥æä½çä»»å¡å¯¹è±¡ã</returns>
      <param name="request">HTTP è¯·æ±æ¶æ¯ã</param>
      <param name="cancellationToken">åæ¶æä½çåæ¶æ è®°ã</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="request" /> ä¸º nullã</exception>
    </member>
    <member name="P:System.Net.Http.HttpClientHandler.SupportsAutomaticDecompression">
      <summary>è·åæç¤ºå¤çç¨åºæ¯å¦æ¯æèªå¨ååºåå®¹è§£åçå¼ã</summary>
      <returns>è¿å <see cref="T:System.Boolean" />ã å¦æå¤çå¨æ¯æèªå¨ååºåå®¹è§£åç¼©ï¼åä¸º trueï¼å¦å falseã é»è®¤å¼ä¸º trueã</returns>
    </member>
    <member name="P:System.Net.Http.HttpClientHandler.SupportsProxy">
      <summary>è·åæç¤ºå¤çç¨åºæ¯å¦æ¯æä»£çè®¾ç½®çå¼ã</summary>
      <returns>è¿å <see cref="T:System.Boolean" />ã å¦æå¤çå¨æ¯æä»£çè®¾ç½®ï¼åä¸º trueï¼å¦åä¸º falseã é»è®¤å¼ä¸º trueã</returns>
    </member>
    <member name="P:System.Net.Http.HttpClientHandler.SupportsRedirectConfiguration">
      <summary>è·åæç¤ºå¤çç¨åºæ¯å¦æ¯æ <see cref="P:System.Net.Http.HttpClientHandler.AllowAutoRedirect" /> å <see cref="P:System.Net.Http.HttpClientHandler.MaxAutomaticRedirections" /> å±æ§éç½®è®¾ç½®çå¼ã</summary>
      <returns>è¿å <see cref="T:System.Boolean" />ã å¦æå¤çå¨æ¯æ <see cref="P:System.Net.Http.HttpClientHandler.AllowAutoRedirect" /> å <see cref="P:System.Net.Http.HttpClientHandler.MaxAutomaticRedirections" /> å±æ§çéç½®è®¾ç½®ï¼åä¸º trueï¼å¦åä¸º falseã é»è®¤å¼ä¸º trueã</returns>
    </member>
    <member name="P:System.Net.Http.HttpClientHandler.UseCookies">
      <summary>è·åæè®¾ç½®æç¤ºåéè¯·æ±æ¶ï¼å¤çç¨åºæ¯å¦ä½¿ç¨ <see cref="P:System.Net.Http.HttpClientHandler.CookieContainer" /> å±æ§å­å¨æå¡å¨ Cookie å¹¶ä½¿ç¨è¿äº Cookie çå¼ã</summary>
      <returns>è¿å <see cref="T:System.Boolean" />ã å¦æå¤çå¨æ¯æä½¿ç¨ <see cref="P:System.Net.Http.HttpClientHandler.CookieContainer" /> å±æ§æ¥å­æ¾æå¡å¨ cookies å¹¶å¨åéè¯·æ±æ¶ä½¿ç¨è¿äº cookiesï¼åä¸º trueï¼å¦åä¸º falseã é»è®¤å¼ä¸º trueã</returns>
    </member>
    <member name="P:System.Net.Http.HttpClientHandler.UseDefaultCredentials">
      <summary>è·åæè®¾ç½®ä¸ä¸ªå¼ï¼è¯¥å¼æ§å¶é»è®¤å­æ®æ¯å¦è¢«å¤çç¨åºéè¯·æ±ä¸èµ·åéã</summary>
      <returns>è¿å <see cref="T:System.Boolean" />ã å¦æä½¿ç¨é»è®¤å­æ®ï¼åä¸º trueï¼å¦åä¸º falseã é»è®¤å¼ä¸º falseã</returns>
    </member>
    <member name="P:System.Net.Http.HttpClientHandler.UseProxy">
      <summary>è·åæè®¾ç½®ä¸ä¸ªå¼ï¼è¯¥å¼æç¤ºå¤çç¨åºæ¯å¦ä¸ºè¯·æ±ä½¿ç¨ä»£çã</summary>
      <returns>è¿å <see cref="T:System.Boolean" />ã å¦æè¯¥ç®¡çå¨åºä¸ºè¯·æ±ä½¿ç¨ä»£çé¡¹ï¼åä¸º trueï¼å¦åä¸º falseã é»è®¤å¼ä¸º trueã</returns>
    </member>
    <member name="T:System.Net.Http.HttpCompletionOption">
      <summary>æç¤º <see cref="T:System.Net.Http.HttpClient" /> æä½æ¯å¨ååºå¯å©ç¨æ¶ç«å³è§ä¸ºå·²å®æï¼è¿æ¯å¨è¯»ååå«ä¸ä¸æçæ´ä¸ªç­æ¡ä¿¡æ¯ä¹åæè§ä¸ºå·²å®æã</summary>
    </member>
    <member name="F:System.Net.Http.HttpCompletionOption.ResponseContentRead">
      <summary>æä½åºå¨éè¯»åæ¬è¯¥åå®¹çæ´ä¸ªååºä¹åå®æã</summary>
    </member>
    <member name="F:System.Net.Http.HttpCompletionOption.ResponseHeadersRead">
      <summary>ååºä¸å¯ç¨ä¸æ é¢å¯è¯»æ¶å³åºå®æçæä½ã å°æªè¯»åçåå®¹ã</summary>
    </member>
    <member name="T:System.Net.Http.HttpContent">
      <summary>è¡¨ç¤º HTTP å®ä½æ­£æååå®¹æ å¤´çåºç±»ã</summary>
    </member>
    <member name="M:System.Net.Http.HttpContent.#ctor">
      <summary>åå§å <see cref="T:System.Net.Http.HttpContent" /> ç±»çæ°å®ä¾ã</summary>
    </member>
    <member name="M:System.Net.Http.HttpContent.CopyToAsync(System.IO.Stream)">
      <summary>ä»¥å¼æ­¥æä½å° HTTP åå®¹åå¥æµã</summary>
      <returns>è¿å <see cref="T:System.Threading.Tasks.Task" />ã è¡¨ç¤ºå¼æ­¥æä½çä»»å¡å¯¹è±¡ã</returns>
      <param name="stream">ç®æ æµã</param>
    </member>
    <member name="M:System.Net.Http.HttpContent.CopyToAsync(System.IO.Stream,System.Net.TransportContext)">
      <summary>ä»¥å¼æ­¥æä½å° HTTP åå®¹åå¥æµã</summary>
      <returns>è¿å <see cref="T:System.Threading.Tasks.Task" />ã è¡¨ç¤ºå¼æ­¥æä½çä»»å¡å¯¹è±¡ã</returns>
      <param name="stream">ç®æ æµã</param>
      <param name="context">æå³ä¼ è¾çä¿¡æ¯ï¼ä¾å¦ï¼ééç»å®ï¼ã æ­¤åæ°å¯ä»¥ä¸º nullã</param>
    </member>
    <member name="M:System.Net.Http.HttpContent.CreateContentReadStreamAsync">
      <summary>ä»¥å¼æ­¥æä½å° HTTP åå®¹åå¥åå­æµã</summary>
      <returns>è¿å <see cref="T:System.Threading.Tasks.Task`1" />ã è¡¨ç¤ºå¼æ­¥æä½çä»»å¡å¯¹è±¡ã</returns>
    </member>
    <member name="M:System.Net.Http.HttpContent.Dispose">
      <summary>éæ¾ç± <see cref="T:System.Net.Http.HttpContent" /> ä½¿ç¨çéæç®¡èµæºåæç®¡èµæºã</summary>
    </member>
    <member name="M:System.Net.Http.HttpContent.Dispose(System.Boolean)">
      <summary>éæ¾ç± <see cref="T:System.Net.Http.HttpContent" /> ä½¿ç¨çéæç®¡èµæºï¼å¹¶å¯æ ¹æ®éè¦éæ¾æç®¡èµæºã</summary>
      <param name="disposing">å¦æä¸º trueï¼åéæ¾æç®¡èµæºåéæç®¡èµæºï¼å¦æä¸º falseï¼åä»éæ¾éæç®¡èµæºã</param>
    </member>
    <member name="P:System.Net.Http.HttpContent.Headers">
      <summary>æ ¹æ® RFC 2616 ä¸­çå®ä¹ï¼è·ååå®¹æ å¤´ã</summary>
      <returns>è¿å <see cref="T:System.Net.Http.Headers.HttpContentHeaders" />ã å¦ RFC 2616 ä¸­å®ä¹çåå®¹æ å¤´ã</returns>
    </member>
    <member name="M:System.Net.Http.HttpContent.LoadIntoBufferAsync">
      <summary>ä»¥å¼æ­¥æä½å° HTTP åå®¹åºååå°åå­ç¼å²åºã</summary>
      <returns>è¿å <see cref="T:System.Threading.Tasks.Task" />ã è¡¨ç¤ºå¼æ­¥æä½çä»»å¡å¯¹è±¡ã</returns>
    </member>
    <member name="M:System.Net.Http.HttpContent.LoadIntoBufferAsync(System.Int64)">
    </member>
    <member name="M:System.Net.Http.HttpContent.ReadAsByteArrayAsync">
      <summary>ä»¥å¼æ­¥æä½å° HTTP åå®¹åå¥å­èæ°ç»ã</summary>
      <returns>è¿å <see cref="T:System.Threading.Tasks.Task`1" />ã è¡¨ç¤ºå¼æ­¥æä½çä»»å¡å¯¹è±¡ã</returns>
    </member>
    <member name="M:System.Net.Http.HttpContent.ReadAsStreamAsync">
      <summary>ä»¥å¼æ­¥æä½å° HTTP åå®¹åå¥æµã</summary>
      <returns>è¿å <see cref="T:System.Threading.Tasks.Task`1" />ã è¡¨ç¤ºå¼æ­¥æä½çä»»å¡å¯¹è±¡ã</returns>
    </member>
    <member name="M:System.Net.Http.HttpContent.ReadAsStringAsync">
      <summary>ä»¥å¼æ­¥æä½å° HTTP åå®¹åå¥æµã</summary>
      <returns>è¿å <see cref="T:System.Threading.Tasks.Task`1" />ã è¡¨ç¤ºå¼æ­¥æä½çä»»å¡å¯¹è±¡ã</returns>
    </member>
    <member name="M:System.Net.Http.HttpContent.SerializeToStreamAsync(System.IO.Stream,System.Net.TransportContext)">
      <summary>ä»¥å¼æ­¥æä½å° HTTP åå®¹åºååå°æµã</summary>
      <returns>è¿å <see cref="T:System.Threading.Tasks.Task" />ã è¡¨ç¤ºå¼æ­¥æä½çä»»å¡å¯¹è±¡ã</returns>
      <param name="stream">ç®æ æµã</param>
      <param name="context">æå³ä¼ è¾çä¿¡æ¯ï¼ä¾å¦ï¼ééç»å®ï¼ã æ­¤åæ°å¯ä»¥ä¸º nullã</param>
    </member>
    <member name="M:System.Net.Http.HttpContent.TryComputeLength(System.Int64@)">
      <summary>ç¡®å® HTTP åå®¹æ¯å¦å·å¤ææçå­èé¿åº¦ã</summary>
      <returns>è¿å <see cref="T:System.Boolean" />ã å¦æ <paramref name="length" /> ä¸ºææé¿åº¦ï¼åä¸º trueï¼å¦åï¼ä¸º falseã</returns>
      <param name="length">ä»¥å­èä¸ºåä½ç HHTP å¯¹è±¡çé¿åº¦ã</param>
    </member>
    <member name="T:System.Net.Http.HttpMessageHandler">
      <summary>HTTP æ¶æ¯å¤çç¨åºçåºç±»åã</summary>
    </member>
    <member name="M:System.Net.Http.HttpMessageHandler.#ctor">
      <summary>åå§å <see cref="T:System.Net.Http.HttpMessageHandler" /> ç±»çæ°å®ä¾ã</summary>
    </member>
    <member name="M:System.Net.Http.HttpMessageHandler.Dispose">
      <summary>éæ¾ç± <see cref="T:System.Net.Http.HttpMessageHandler" /> ä½¿ç¨çéæç®¡èµæºåæç®¡èµæºã</summary>
    </member>
    <member name="M:System.Net.Http.HttpMessageHandler.Dispose(System.Boolean)">
      <summary>éæ¾ç± <see cref="T:System.Net.Http.HttpMessageHandler" /> ä½¿ç¨çéæç®¡èµæºï¼å¹¶å¯æ ¹æ®éè¦éæ¾æç®¡èµæºã</summary>
      <param name="disposing">å¦æä¸º trueï¼åéæ¾æç®¡èµæºåéæç®¡èµæºï¼å¦æä¸º falseï¼åä»éæ¾éæç®¡èµæºã</param>
    </member>
    <member name="M:System.Net.Http.HttpMessageHandler.SendAsync(System.Net.Http.HttpRequestMessage,System.Threading.CancellationToken)">
      <summary>ä»¥å¼æ­¥æä½åé HTTP è¯·æ±ã</summary>
      <returns>è¿å <see cref="T:System.Threading.Tasks.Task`1" />ã è¡¨ç¤ºå¼æ­¥æä½çä»»å¡å¯¹è±¡ã</returns>
      <param name="request">è¦åéç HTTP è¯·æ±æ¶æ¯ã</param>
      <param name="cancellationToken">åæ¶æä½çåæ¶æ è®°ã</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="request" /> ä¸º nullã</exception>
    </member>
    <member name="T:System.Net.Http.HttpMessageInvoker">
    </member>
    <member name="M:System.Net.Http.HttpMessageInvoker.#ctor(System.Net.Http.HttpMessageHandler)">
    </member>
    <member name="M:System.Net.Http.HttpMessageInvoker.#ctor(System.Net.Http.HttpMessageHandler,System.Boolean)">
    </member>
    <member name="M:System.Net.Http.HttpMessageInvoker.Dispose">
    </member>
    <member name="M:System.Net.Http.HttpMessageInvoker.Dispose(System.Boolean)">
    </member>
    <member name="M:System.Net.Http.HttpMessageInvoker.SendAsync(System.Net.Http.HttpRequestMessage,System.Threading.CancellationToken)">
    </member>
    <member name="T:System.Net.Http.HttpMethod">
      <summary>æ åçæ£ç´¢åæ¯è¾ HTTP æ¹æ³å¸®å©å¨ç±»ã</summary>
    </member>
    <member name="M:System.Net.Http.HttpMethod.#ctor(System.String)">
      <summary>ä½¿ç¨æå®ç HTTP æ¹æ³åå§å <see cref="T:System.Net.Http.HttpMethod" /> ç±»çæ°å®ä¾ã</summary>
      <param name="method">HTTP æ¹æ³ã</param>
    </member>
    <member name="P:System.Net.Http.HttpMethod.Delete">
      <summary>è¡¨ç¤ºä¸ä¸ª HTTP DELETE åè®®æ¹æ³ã</summary>
      <returns>è¿å <see cref="T:System.Net.Http.HttpMethod" />ã</returns>
    </member>
    <member name="M:System.Net.Http.HttpMethod.Equals(System.Net.Http.HttpMethod)">
      <summary>ç¡®å®æå®ç <see cref="T:System.Net.Http.HttpMethod" /> æ¯å¦ç­äºå½åç <see cref="T:System.Object" />ã</summary>
      <returns>è¿å <see cref="T:System.Boolean" />ã å¦ææå®çå¯¹è±¡ç­äºå½åå¯¹è±¡ï¼åä¸º trueï¼å¦åä¸º falseã</returns>
      <param name="other">è¦ä¸å½åç®æ è¿è¡æ¯è¾ç HTTP æ¹æ³ã</param>
    </member>
    <member name="M:System.Net.Http.HttpMethod.Equals(System.Object)">
      <summary>ç¡®å®æå®ç <see cref="T:System.Object" /> æ¯å¦ç­äºå½åç <see cref="T:System.Object" />ã</summary>
      <returns>è¿å <see cref="T:System.Boolean" />ã å¦ææå®çå¯¹è±¡ç­äºå½åå¯¹è±¡ï¼åä¸º trueï¼å¦åä¸º falseã</returns>
      <param name="obj">è¦ä¸å½åå¯¹è±¡è¿è¡æ¯è¾çå¯¹è±¡ã</param>
    </member>
    <member name="P:System.Net.Http.HttpMethod.Get">
      <summary>è¡¨ç¤ºä¸ä¸ª HTTP GET åè®®æ¹æ³ã</summary>
      <returns>è¿å <see cref="T:System.Net.Http.HttpMethod" />ã</returns>
    </member>
    <member name="M:System.Net.Http.HttpMethod.GetHashCode">
      <summary>ç¨ä½æ­¤ç±»åçåå¸å½æ°ã</summary>
      <returns>è¿å <see cref="T:System.Int32" />ã å½å <see cref="T:System.Object" /> çåå¸ä»£ç ã</returns>
    </member>
    <member name="P:System.Net.Http.HttpMethod.Head">
      <summary>è¡¨ç¤ºä¸ä¸ª HTTP HEAD åè®®æ¹æ³ã é¤äºæå¡å¨å¨ååºä¸­åªè¿åæ¶æ¯å¤´ä¸è¿åæ¶æ¯ä½ä»¥å¤ï¼HEAD æ¹æ³å GET æ¯ä¸æ ·çã</summary>
      <returns>è¿å <see cref="T:System.Net.Http.HttpMethod" />ã</returns>
    </member>
    <member name="P:System.Net.Http.HttpMethod.Method">
      <summary>HTTP æ¹æ³ã</summary>
      <returns>è¿å <see cref="T:System.String" />ã è¡¨ç¤ºä½ä¸º <see cref="T:System.String" /> ç HTTP æ¹æ³ã</returns>
    </member>
    <member name="M:System.Net.Http.HttpMethod.op_Equality(System.Net.Http.HttpMethod,System.Net.Http.HttpMethod)">
      <summary>ç¨äºæ¯è¾ä¸¤ä¸ª <see cref="T:System.Net.Http.HttpMethod" /> å¯¹è±¡çç¸ç­è¿ç®ç¬¦ã</summary>
      <returns>è¿å <see cref="T:System.Boolean" />ã å¦ææå®ç <paramref name="left" /> å <paramref name="right" /> åæ°ç¸ç­ï¼åä¸º trueï¼å¦åä¸º falseã</returns>
      <param name="left">ç¸ç­è¿ç®ç¬¦å·¦ä¾§ç <see cref="T:System.Net.Http.HttpMethod" />ã</param>
      <param name="right">ç¸ç­è¿ç®ç¬¦å³ä¾§ç <see cref="T:System.Net.Http.HttpMethod" />ã</param>
    </member>
    <member name="M:System.Net.Http.HttpMethod.op_Inequality(System.Net.Http.HttpMethod,System.Net.Http.HttpMethod)">
      <summary>ç¨äºæ¯è¾ä¸¤ä¸ª <see cref="T:System.Net.Http.HttpMethod" /> å¯¹è±¡çä¸ç¸ç­è¿ç®ç¬¦ã</summary>
      <returns>è¿å <see cref="T:System.Boolean" />ã å¦ææå®ç <paramref name="left" /> å <paramref name="right" /> åæ°ä¸ç¸ç­ï¼åä¸º trueï¼å¦åä¸º falseã</returns>
      <param name="left">ä¸ç¸ç­è¿ç®ç¬¦å·¦ä¾§ç <see cref="T:System.Net.Http.HttpMethod" />ã</param>
      <param name="right">ä¸ç¸ç­è¿ç®ç¬¦å³ä¾§ç <see cref="T:System.Net.Http.HttpMethod" />ã</param>
    </member>
    <member name="P:System.Net.Http.HttpMethod.Options">
      <summary>è¡¨ç¤ºä¸ä¸ª HTTP OPTIONS åè®®æ¹æ³ã</summary>
      <returns>è¿å <see cref="T:System.Net.Http.HttpMethod" />ã</returns>
    </member>
    <member name="P:System.Net.Http.HttpMethod.Post">
      <summary>è¡¨ç¤ºä¸ä¸ª HTTP POST åè®®æ¹æ³ï¼è¯¥æ¹æ³ç¨äºå°æ°å®ä½ä½ä¸ºè¡¥ååéå°æä¸ª URIã</summary>
      <returns>è¿å <see cref="T:System.Net.Http.HttpMethod" />ã</returns>
    </member>
    <member name="P:System.Net.Http.HttpMethod.Put">
      <summary>è¡¨ç¤ºä¸ä¸ª HTTP PUT åè®®æ¹æ³ï¼è¯¥æ¹æ³ç¨äºæ¿æ¢ URI æ è¯çå®ä½ã</summary>
      <returns>è¿å <see cref="T:System.Net.Http.HttpMethod" />ã</returns>
    </member>
    <member name="M:System.Net.Http.HttpMethod.ToString">
      <summary>è¿åè¡¨ç¤ºå½åå¯¹è±¡çå­ç¬¦ä¸²ã</summary>
      <returns>è¿å <see cref="T:System.String" />ã ä¸ä¸ªè¡¨ç¤ºå½åå¯¹è±¡çå­ç¬¦ä¸²ã</returns>
    </member>
    <member name="P:System.Net.Http.HttpMethod.Trace">
      <summary>è¡¨ç¤ºä¸ä¸ª HTTP TRACE åè®®æ¹æ³ã</summary>
      <returns>è¿å <see cref="T:System.Net.Http.HttpMethod" />ã</returns>
    </member>
    <member name="T:System.Net.Http.HttpRequestException">
      <summary>
        <see cref="T:System.Net.Http.HttpClient" /> å <see cref="T:System.Net.Http.HttpMessageHandler" /> æå¼åçå¼å¸¸çåºç±»ã</summary>
    </member>
    <member name="M:System.Net.Http.HttpRequestException.#ctor">
      <summary>åå§å <see cref="T:System.Net.Http.HttpRequestException" /> ç±»çæ°å®ä¾ã</summary>
    </member>
    <member name="M:System.Net.Http.HttpRequestException.#ctor(System.String)">
      <summary>ä½¿ç¨ç±ç¹å®çç¨æ¥æè¿°å½åå¼å¸¸çæ¶æ¯åå§å <see cref="T:System.Net.Http.HttpRequestException" /> ç±»çæ°å®ä¾ã</summary>
      <param name="message">æè¿°å½åå¼å¸¸çæ¶æ¯ã</param>
    </member>
    <member name="M:System.Net.Http.HttpRequestException.#ctor(System.String,System.Exception)">
      <summary>ä½¿ç¨æå®æ¶æ¯ä»¥åæè¿°å½åå¼å¸¸çåé¨å¼å¸¸æ¥åå§å <see cref="T:System.Net.Http.HttpRequestException" /> ç±»çæ°å®ä¾ã</summary>
      <param name="message">æè¿°å½åå¼å¸¸çæ¶æ¯ã</param>
      <param name="inner">åé¨å¼å¸¸ã</param>
    </member>
    <member name="T:System.Net.Http.HttpRequestMessage">
      <summary>è¡¨ç¤º HTTP è¯·æ±æ¶æ¯ã</summary>
    </member>
    <member name="M:System.Net.Http.HttpRequestMessage.#ctor">
      <summary>åå§å <see cref="T:System.Net.Http.HttpRequestMessage" /> ç±»çæ°å®ä¾ã</summary>
    </member>
    <member name="M:System.Net.Http.HttpRequestMessage.#ctor(System.Net.Http.HttpMethod,System.String)">
      <summary>åå§å HTTP æ¹æ³åè¯·æ± <see cref="T:System.Uri" /> ç <see cref="T:System.Net.Http.HttpRequestMessage" /> ç±»çæ°å®ä¾ã</summary>
      <param name="method">HTTP æ¹æ³ã</param>
      <param name="requestUri">è¡¨ç¤ºè¯·æ± <see cref="T:System.Uri" /> çå­ç¬¦ä¸²ã</param>
    </member>
    <member name="M:System.Net.Http.HttpRequestMessage.#ctor(System.Net.Http.HttpMethod,System.Uri)">
      <summary>åå§å HTTP æ¹æ³åè¯·æ± <see cref="T:System.Uri" /> ç <see cref="T:System.Net.Http.HttpRequestMessage" /> ç±»çæ°å®ä¾ã</summary>
      <param name="method">HTTP æ¹æ³ã</param>
      <param name="requestUri">è¦è¯·æ±ç <see cref="T:System.Uri" />ã</param>
    </member>
    <member name="P:System.Net.Http.HttpRequestMessage.Content">
      <summary>è·åæè®¾ç½® HTTP æ¶æ¯çåå®¹ã</summary>
      <returns>è¿å <see cref="T:System.Net.Http.HttpContent" />ã æ¶æ¯çåå®¹</returns>
    </member>
    <member name="M:System.Net.Http.HttpRequestMessage.Dispose">
      <summary>éæ¾ç± <see cref="T:System.Net.Http.HttpRequestMessage" /> ä½¿ç¨çéæç®¡èµæºåæç®¡èµæºã</summary>
    </member>
    <member name="M:System.Net.Http.HttpRequestMessage.Dispose(System.Boolean)">
      <summary>éæ¾ç± <see cref="T:System.Net.Http.HttpRequestMessage" /> ä½¿ç¨çéæç®¡èµæºï¼å¹¶å¯æ ¹æ®éè¦éæ¾æç®¡èµæºã</summary>
      <param name="disposing">å¦æä¸º trueï¼åéæ¾æç®¡èµæºåéæç®¡èµæºï¼å¦æä¸º falseï¼åä»éæ¾éæç®¡èµæºã</param>
    </member>
    <member name="P:System.Net.Http.HttpRequestMessage.Headers">
      <summary>è·å HTTP è¯·æ±æ å¤´çéåã</summary>
      <returns>è¿å <see cref="T:System.Net.Http.Headers.HttpRequestHeaders" />ã HTTP è¯·æ±æ å¤´çéåã</returns>
    </member>
    <member name="P:System.Net.Http.HttpRequestMessage.Method">
      <summary>è·åæè®¾ç½® HTTP è¯·æ±ä¿¡æ¯ä½¿ç¨ç HTTP æ¹æ³ã</summary>
      <returns>è¿å <see cref="T:System.Net.Http.HttpMethod" />ã è¢«è¯·æ±æ¶æ¯ä½¿ç¨çHTTP æ¹æ³ã GET æ¯é»è®¤æ¹æ³ã</returns>
    </member>
    <member name="P:System.Net.Http.HttpRequestMessage.Properties">
      <summary>è·å HTTP è¯·æ±çå±æ§éã</summary>
      <returns>è¿å <see cref="T:System.Collections.Generic.IDictionary`2" />ã</returns>
    </member>
    <member name="P:System.Net.Http.HttpRequestMessage.RequestUri">
      <summary>è·åæè®¾ç½® HTTP è¯·æ±ç <see cref="T:System.Uri" />ã</summary>
      <returns>è¿å <see cref="T:System.Uri" />ã ç¨äº HTTP è¯·æ±ç <see cref="T:System.Uri" />ã</returns>
    </member>
    <member name="M:System.Net.Http.HttpRequestMessage.ToString">
      <summary>è¿åè¡¨ç¤ºå½åå¯¹è±¡çå­ç¬¦ä¸²ã</summary>
      <returns>è¿å <see cref="T:System.String" />ã å½åå¯¹è±¡çå­ç¬¦ä¸²è¡¨ç¤ºå½¢å¼ã</returns>
    </member>
    <member name="P:System.Net.Http.HttpRequestMessage.Version">
      <summary>è·åæè®¾ç½® HTTP æ¶æ¯çæ¬ã</summary>
      <returns>è¿å <see cref="T:System.Version" />ã HTTP æ¶æ¯çæ¬ã é»è®¤å¼ä¸º 1.1ã</returns>
    </member>
    <member name="T:System.Net.Http.HttpResponseMessage">
      <summary>è¡¨ç¤º HTTP ååºæ¶æ¯ã</summary>
    </member>
    <member name="M:System.Net.Http.HttpResponseMessage.#ctor">
      <summary>åå§å <see cref="T:System.Net.Http.HttpResponseMessage" /> ç±»çæ°å®ä¾ã</summary>
    </member>
    <member name="M:System.Net.Http.HttpResponseMessage.#ctor(System.Net.HttpStatusCode)">
      <summary>åå§åæå®ç <see cref="P:System.Net.Http.HttpResponseMessage.StatusCode" /> ç <see cref="T:System.Net.Http.HttpResponseMessage" /> ç±»çæ°å®ä¾ã</summary>
      <param name="statusCode">HTTP ååºçç¶æä»£ç ã</param>
    </member>
    <member name="P:System.Net.Http.HttpResponseMessage.Content">
      <summary>è·åæè®¾ç½® HTTP ååºæ¶æ¯çåå®¹ã</summary>
      <returns>è¿å <see cref="T:System.Net.Http.HttpContent" />ã HTTP ååºæ¶æ¯çåå®¹ã</returns>
    </member>
    <member name="M:System.Net.Http.HttpResponseMessage.Dispose">
      <summary>éæ¾ç± <see cref="T:System.Net.Http.HttpResponseMessage" /> ä½¿ç¨çéæç®¡èµæºã</summary>
    </member>
    <member name="M:System.Net.Http.HttpResponseMessage.Dispose(System.Boolean)">
      <summary>éæ¾ç± <see cref="T:System.Net.Http.HttpResponseMessage" /> ä½¿ç¨çéæç®¡èµæºï¼å¹¶å¯æ ¹æ®éè¦éæ¾æç®¡èµæºã</summary>
      <param name="disposing">å¦æä¸º trueï¼åéæ¾æç®¡èµæºåéæç®¡èµæºï¼å¦æä¸º falseï¼åä»éæ¾éæç®¡èµæºã</param>
    </member>
    <member name="M:System.Net.Http.HttpResponseMessage.EnsureSuccessStatusCode">
      <summary>å¦æ HTTP ååºç <see cref="P:System.Net.Http.HttpResponseMessage.IsSuccessStatusCode" /> å±æ§ä¸º  falseï¼ å°å¼åå¼å¸¸ã</summary>
      <returns>è¿å <see cref="T:System.Net.Http.HttpResponseMessage" />ã å¦æè°ç¨æåå HTTP ååºæ¶æ¯ã</returns>
    </member>
    <member name="P:System.Net.Http.HttpResponseMessage.Headers">
      <summary>è·å HTTP ååºæ å¤´çéåã</summary>
      <returns>è¿å <see cref="T:System.Net.Http.Headers.HttpResponseHeaders" />ã HTTP ååºæ å¤´çéåã</returns>
    </member>
    <member name="P:System.Net.Http.HttpResponseMessage.IsSuccessStatusCode">
      <summary>è·åä¸ä¸ªå¼ï¼è¯¥å¼æç¤º HTTP ååºæ¯å¦æåã</summary>
      <returns>è¿å <see cref="T:System.Boolean" />ã æç¤º HTTP ååºæ¯å¦æåçå¼ã å¦æ <see cref="P:System.Net.Http.HttpResponseMessage.StatusCode" /> å¨ 200-299 èå´ä¸­ï¼åä¸º trueï¼å¦åä¸º falseã</returns>
    </member>
    <member name="P:System.Net.Http.HttpResponseMessage.ReasonPhrase">
      <summary>è·åæè®¾ç½®æå¡å¨ä¸ç¶æä»£ç éå¸¸ä¸èµ·åéçåå ç­è¯­ã</summary>
      <returns>è¿å <see cref="T:System.String" />ã æå¡å¨åéçåå è¯ç»ã</returns>
    </member>
    <member name="P:System.Net.Http.HttpResponseMessage.RequestMessage">
      <summary>è·åæè®¾ç½®å¯¼è´æ­¤ååºæ¶æ¯çè¯·æ±æ¶æ¯ã</summary>
      <returns>è¿å <see cref="T:System.Net.Http.HttpRequestMessage" />ã å¯¼è´æ­¤ååºä¿¡æ¯çè¯·æ±æ¶æ¯ã</returns>
    </member>
    <member name="P:System.Net.Http.HttpResponseMessage.StatusCode">
      <summary>è·åæè®¾ç½® HTTP ååºçç¶æä»£ç ã</summary>
      <returns>è¿å <see cref="T:System.Net.HttpStatusCode" />ã HTTP ååºçç¶æä»£ç ã</returns>
    </member>
    <member name="M:System.Net.Http.HttpResponseMessage.ToString">
      <summary>è¿åè¡¨ç¤ºå½åå¯¹è±¡çå­ç¬¦ä¸²ã</summary>
      <returns>è¿å <see cref="T:System.String" />ã å½åå¯¹è±¡çå­ç¬¦ä¸²è¡¨ç¤ºå½¢å¼ã</returns>
    </member>
    <member name="P:System.Net.Http.HttpResponseMessage.Version">
      <summary>è·åæè®¾ç½® HTTP æ¶æ¯çæ¬ã</summary>
      <returns>è¿å <see cref="T:System.Version" />ã HTTP æ¶æ¯çæ¬ã é»è®¤å¼ä¸º 1.1ã</returns>
    </member>
    <member name="T:System.Net.Http.MessageProcessingHandler">
      <summary>ä»æ§è¡è¯·æ±å/æååºæ¶æ¯ççæäºå°å¤çæä½çå¤çç¨åºçåºç±»åã</summary>
    </member>
    <member name="M:System.Net.Http.MessageProcessingHandler.#ctor">
      <summary>åå»º <see cref="T:System.Net.Http.MessageProcessingHandler" /> ç±»çå®ä¾ã</summary>
    </member>
    <member name="M:System.Net.Http.MessageProcessingHandler.#ctor(System.Net.Http.HttpMessageHandler)">
      <summary>åå»ºç¹å®åé¨å¤çç¨åºç <see cref="T:System.Net.Http.MessageProcessingHandler" /> ç±»çå®ä¾ã</summary>
      <param name="innerHandler">è´è´£å¤ç HTTP ååºæ¶æ¯çåé¨å¤çç¨åºã</param>
    </member>
    <member name="M:System.Net.Http.MessageProcessingHandler.ProcessRequest(System.Net.Http.HttpRequestMessage,System.Threading.CancellationToken)">
      <summary>å¤ç HTTP è¯·æ±æ¶æ¯ã</summary>
      <returns>è¿å <see cref="T:System.Net.Http.HttpRequestMessage" />ã è¢«å¤çç HTTP è¯·æ±æ¶æ¯ã</returns>
      <param name="request">è¦å¤çç HTTP è¯·æ±æ¶æ¯ã</param>
      <param name="cancellationToken">å¯ç±å¶ä»å¯¹è±¡æçº¿ç¨ç¨ä»¥æ¥æ¶åæ¶éç¥çåæ¶æ è®°ã</param>
    </member>
    <member name="M:System.Net.Http.MessageProcessingHandler.ProcessResponse(System.Net.Http.HttpResponseMessage,System.Threading.CancellationToken)">
      <summary>å¤ç HTTP ååºæ¶æ¯ã</summary>
      <returns>è¿å <see cref="T:System.Net.Http.HttpResponseMessage" />ã å·²å¤çç HTTP ååºæ¶æ¯ã</returns>
      <param name="response">è¦å¤çç HTTP ååºæ¶æ¯ã</param>
      <param name="cancellationToken">å¯ç±å¶ä»å¯¹è±¡æçº¿ç¨ç¨ä»¥æ¥æ¶åæ¶éç¥çåæ¶æ è®°ã</param>
    </member>
    <member name="M:System.Net.Http.MessageProcessingHandler.SendAsync(System.Net.Http.HttpRequestMessage,System.Threading.CancellationToken)">
      <summary>ä»¥å¼æ­¥æä½åé HTTP è¯·æ±å°åé¨ç®¡çå¨ä»¥åéå°æå¡å¨ã</summary>
      <returns>è¿å <see cref="T:System.Threading.Tasks.Task`1" />ã è¡¨ç¤ºå¼æ­¥æä½çä»»å¡å¯¹è±¡ã</returns>
      <param name="request">è¦åéå°æå¡å¨ç HTTP è¯·æ±æ¶æ¯ã</param>
      <param name="cancellationToken">å¯ç±å¶ä»å¯¹è±¡æçº¿ç¨ç¨ä»¥æ¥æ¶åæ¶éç¥çåæ¶æ è®°ã</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="request" /> ä¸º nullã</exception>
    </member>
    <member name="T:System.Net.Http.MultipartContent">
      <summary>æä¾ <see cref="T:System.Net.Http.HttpContent" /> å¯¹è±¡çéåï¼å¶å¯éè¿ä½¿ç¨å¤é¨å/* åå®¹ç±»åè§èåºååã</summary>
    </member>
    <member name="M:System.Net.Http.MultipartContent.#ctor">
      <summary>åå»º <see cref="T:System.Net.Http.MultipartContent" /> ç±»çæ°å®ä¾ã</summary>
    </member>
    <member name="M:System.Net.Http.MultipartContent.#ctor(System.String)">
      <summary>åå»º <see cref="T:System.Net.Http.MultipartContent" /> ç±»çæ°å®ä¾ã</summary>
      <param name="subtype">å¤é¨ååå®¹çå­ç±»åã</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="subtype" /> ä¸º null æåªåå«ç©ºç½å­ç¬¦ã</exception>
    </member>
    <member name="M:System.Net.Http.MultipartContent.#ctor(System.String,System.String)">
      <summary>åå»º <see cref="T:System.Net.Http.MultipartContent" /> ç±»çæ°å®ä¾ã</summary>
      <param name="subtype">å¤é¨ååå®¹çå­ç±»åã</param>
      <param name="boundary">å¤é¨ååå®¹çè¾¹çå­ç¬¦ä¸²ã</param>
      <exception cref="T:System.ArgumentException">è¯¥ <paramref name="subtype" /> ä¸º null æç©ºå­ç¬¦ä¸²ã <paramref name="boundary" /> ä¸º null æåªåå«ç©ºç½å­ç¬¦ã - æ - <paramref name="boundary" /> ä»¥ç©ºç½å­ç¬¦ç»å°¾ã</exception>
      <exception cref="T:System.OutOfRangeException">
        <paramref name="boundary" /> çé¿åº¦å¤§äº 70ã</exception>
    </member>
    <member name="M:System.Net.Http.MultipartContent.Add(System.Net.Http.HttpContent)">
      <summary>æ·»å å¤é¨å HTTP åå®¹å° <see cref="T:System.Net.Http.HttpContent" /> å¯¹è±¡çéåï¼å¶å¯éè¿ä½¿ç¨å¤é¨å/* åå®¹ç±»åè§èè·ååºååã</summary>
      <param name="content">è¦æ·»å å°éåä¸­ç HTTP åå®¹ã</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="content" /> ä¸º nullã</exception>
    </member>
    <member name="M:System.Net.Http.MultipartContent.Dispose(System.Boolean)">
      <summary>éæ¾ç± <see cref="T:System.Net.Http.MultipartContent" /> ä½¿ç¨çéæç®¡èµæºï¼å¹¶å¯æ ¹æ®éè¦éæ¾æç®¡èµæºã</summary>
      <param name="disposing">å¦æä¸º trueï¼åéæ¾æç®¡èµæºåéæç®¡èµæºï¼å¦æä¸º falseï¼åä»éæ¾éæç®¡èµæºã</param>
    </member>
    <member name="M:System.Net.Http.MultipartContent.GetEnumerator">
      <summary>è¿åå¾ªç¯è®¿é® <see cref="T:System.Net.Http.HttpContent" /> å¯¹è±¡çéåçæä¸¾å¨ï¼å¶å¯éè¿ä½¿ç¨å¤é¨å/* åå®¹ç±»åè§èåºååã</summary>
      <returns>è¿å <see cref="T:System.Collections.Generic.IEnumerator`1" />ã ä¸ä¸ªå¯ç¨äºå¾ªç¯è®¿é®éåçå¯¹è±¡ã</returns>
    </member>
    <member name="M:System.Net.Http.MultipartContent.SerializeToStreamAsync(System.IO.Stream,System.Net.TransportContext)">
      <summary>ä»¥å¼æ­¥æä½å°å¤é¨å HTTP åå®¹åºååå°æµã</summary>
      <returns>è¿å <see cref="T:System.Threading.Tasks.Task" />ã è¡¨ç¤ºå¼æ­¥æä½çä»»å¡å¯¹è±¡ã</returns>
      <param name="stream">ç®æ æµã</param>
      <param name="context">æå³ä¼ è¾çä¿¡æ¯ï¼ä¾å¦ï¼ééç»å®ï¼ã æ­¤åæ°å¯ä»¥ä¸º nullã</param>
    </member>
    <member name="M:System.Net.Http.MultipartContent.System#Collections#IEnumerable#GetEnumerator">
      <summary>
        <see cref="M:System.Net.Http.MultipartContent.GetEnumerator" /> æ¹æ³çæ¾å¼å®ç°ã</summary>
      <returns>è¿å <see cref="T:System.Collections.IEnumerator" />ã ä¸ä¸ªå¯ç¨äºå¾ªç¯è®¿é®éåçå¯¹è±¡ã</returns>
    </member>
    <member name="M:System.Net.Http.MultipartContent.TryComputeLength(System.Int64@)">
      <summary>ç¡®å® HTTP å¤é¨ååå®¹æ¯å¦å·å¤ææçå­èé¿åº¦ã</summary>
      <returns>è¿å <see cref="T:System.Boolean" />ã å¦æ <paramref name="length" /> ä¸ºææé¿åº¦ï¼åä¸º trueï¼å¦åï¼ä¸º falseã</returns>
      <param name="length">ä»¥å­èä¸ºåä½ç HHTP å¯¹è±¡çé¿åº¦ã</param>
    </member>
    <member name="T:System.Net.Http.MultipartFormDataContent">
      <summary>æä¾å®¹å¨ï¼ç¨äºä½¿ç¨å¤é¨å/è¡¨æ ¼æ°æ® MIME ç±»åç¼ç çåå®¹ã</summary>
    </member>
    <member name="M:System.Net.Http.MultipartFormDataContent.#ctor">
      <summary>åå»º <see cref="T:System.Net.Http.MultipartFormDataContent" /> ç±»çæ°å®ä¾ã</summary>
    </member>
    <member name="M:System.Net.Http.MultipartFormDataContent.#ctor(System.String)">
      <summary>åå»º <see cref="T:System.Net.Http.MultipartFormDataContent" /> ç±»çæ°å®ä¾ã</summary>
      <param name="boundary">å¤é¨åçªä½æ°æ®åå®¹çè¾¹çå­ç¬¦ä¸²ã</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="boundary" /> ä¸º null æåªåå«ç©ºç½å­ç¬¦ã - æ - <paramref name="boundary" /> ä»¥ç©ºç½å­ç¬¦ç»å°¾ã</exception>
      <exception cref="T:System.OutOfRangeException">
        <paramref name="boundary" /> çé¿åº¦å¤§äº 70ã</exception>
    </member>
    <member name="M:System.Net.Http.MultipartFormDataContent.Add(System.Net.Http.HttpContent)">
      <summary>ååºååå°å¤é¨/çªä½æ°æ® MIME ç±»åç <see cref="T:System.Net.Http.HttpContent" /> å¯¹è±¡éåæ·»å  HTTP åå®¹ã</summary>
      <param name="content">è¦æ·»å å°éåä¸­ç HTTP åå®¹ã</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="content" /> ä¸º nullã</exception>
    </member>
    <member name="M:System.Net.Http.MultipartFormDataContent.Add(System.Net.Http.HttpContent,System.String)">
      <summary>ååºååå°å¤é¨/çªä½æ°æ® MIME ç±»åç <see cref="T:System.Net.Http.HttpContent" /> å¯¹è±¡éåæ·»å  HTTP åå®¹ã</summary>
      <param name="content">è¦æ·»å å°éåä¸­ç HTTP åå®¹ã</param>
      <param name="name">è¦æ·»å ç HTTP åå®¹çåç§°ã</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="name" /> ä¸º null æåªåå«ç©ºç½å­ç¬¦ã</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="content" /> ä¸º nullã</exception>
    </member>
    <member name="M:System.Net.Http.MultipartFormDataContent.Add(System.Net.Http.HttpContent,System.String,System.String)">
      <summary>ååºååå°å¤é¨/çªä½æ°æ® MIME ç±»åç <see cref="T:System.Net.Http.HttpContent" /> å¯¹è±¡éåæ·»å  HTTP åå®¹ã</summary>
      <param name="content">è¦æ·»å å°éåä¸­ç HTTP åå®¹ã</param>
      <param name="name">è¦æ·»å ç HTTP åå®¹çåç§°ã</param>
      <param name="fileName">è¦æ·»å å°éåä¸­ç HTTP åå®¹çæä»¶åã</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="name" /> ä¸º null æåªåå«ç©ºç½å­ç¬¦ã - æ - <paramref name="fileName" /> ä¸º null æåªåå«ç©ºç½å­ç¬¦ã</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="content" /> ä¸º nullã</exception>
    </member>
    <member name="T:System.Net.Http.StreamContent">
      <summary>åºäºæµæä¾ HTTP åå®¹ã</summary>
    </member>
    <member name="M:System.Net.Http.StreamContent.#ctor(System.IO.Stream)">
      <summary>åå»º <see cref="T:System.Net.Http.StreamContent" /> ç±»çæ°å®ä¾ã</summary>
      <param name="content">ç¨äºåå§å <see cref="T:System.Net.Http.StreamContent" /> çåå®¹ã</param>
    </member>
    <member name="M:System.Net.Http.StreamContent.#ctor(System.IO.Stream,System.Int32)">
      <summary>åå»º <see cref="T:System.Net.Http.StreamContent" /> ç±»çæ°å®ä¾ã</summary>
      <param name="content">ç¨äºåå§å <see cref="T:System.Net.Http.StreamContent" /> çåå®¹ã</param>
      <param name="bufferSize">
        <see cref="T:System.Net.Http.StreamContent" /> çç¼å²åºçå¤§å°ï¼ä»¥å­èä¸ºåä½ï¼ã</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="content" /> ä¸º nullã</exception>
      <exception cref="T:System.OutOfRangeException">
        <paramref name="bufferSize" /> å°äºæç­äºé¶ã</exception>
    </member>
    <member name="M:System.Net.Http.StreamContent.CreateContentReadStreamAsync">
      <summary>ä»¥å¼æ­¥æä½å° HTTP æµåå®¹åå¥åå­æµã</summary>
      <returns>è¿å <see cref="T:System.Threading.Tasks.Task`1" />ã è¡¨ç¤ºå¼æ­¥æä½çä»»å¡å¯¹è±¡ã</returns>
    </member>
    <member name="M:System.Net.Http.StreamContent.Dispose(System.Boolean)">
      <summary>éæ¾ç± <see cref="T:System.Net.Http.StreamContent" /> ä½¿ç¨çéæç®¡èµæºï¼å¹¶å¯æ ¹æ®éè¦éæ¾æç®¡èµæºã</summary>
      <param name="disposing">å¦æä¸º trueï¼åéæ¾æç®¡èµæºåéæç®¡èµæºï¼å¦æä¸º falseï¼åä»éæ¾éæç®¡èµæºã</param>
    </member>
    <member name="M:System.Net.Http.StreamContent.SerializeToStreamAsync(System.IO.Stream,System.Net.TransportContext)">
      <summary>ä»¥å¼æ­¥æä½å° HTTP åå®¹åºååå°æµã</summary>
      <returns>è¿å <see cref="T:System.Threading.Tasks.Task" />ã è¡¨ç¤ºå¼æ­¥æä½çä»»å¡å¯¹è±¡ã</returns>
      <param name="stream">ç®æ æµã</param>
      <param name="context">æå³ä¼ è¾çä¿¡æ¯ï¼ä¾å¦ï¼ééç»å®ï¼ã æ­¤åæ°å¯ä»¥ä¸º nullã</param>
    </member>
    <member name="M:System.Net.Http.StreamContent.TryComputeLength(System.Int64@)">
      <summary>ç¡®å®æµåå®¹æ¯å¦å·å¤ææçå­èé¿åº¦ã</summary>
      <returns>è¿å <see cref="T:System.Boolean" />ã å¦æ <paramref name="length" /> ä¸ºææé¿åº¦ï¼åä¸º trueï¼å¦åï¼ä¸º falseã</returns>
      <param name="length">ä»¥å­èä¸ºåä½çæµåå®¹çé¿åº¦ã</param>
    </member>
    <member name="T:System.Net.Http.StringContent">
      <summary>åºäºå­ç¬¦ä¸²æä¾ HTTP åå®¹ã</summary>
    </member>
    <member name="M:System.Net.Http.StringContent.#ctor(System.String)">
      <summary>åå»º <see cref="T:System.Net.Http.StringContent" /> ç±»çæ°å®ä¾ã</summary>
      <param name="content">ç¨äºåå§å <see cref="T:System.Net.Http.StringContent" /> çåå®¹ã</param>
    </member>
    <member name="M:System.Net.Http.StringContent.#ctor(System.String,System.Text.Encoding)">
      <summary>åå»º <see cref="T:System.Net.Http.StringContent" /> ç±»çæ°å®ä¾ã</summary>
      <param name="content">ç¨äºåå§å <see cref="T:System.Net.Http.StringContent" /> çåå®¹ã</param>
      <param name="encoding">ç¨äºåå®¹çç¼ç ã</param>
    </member>
    <member name="M:System.Net.Http.StringContent.#ctor(System.String,System.Text.Encoding,System.String)">
      <summary>åå»º <see cref="T:System.Net.Http.StringContent" /> ç±»çæ°å®ä¾ã</summary>
      <param name="content">ç¨äºåå§å <see cref="T:System.Net.Http.StringContent" /> çåå®¹ã</param>
      <param name="encoding">ç¨äºåå®¹çç¼ç ã</param>
      <param name="mediaType">è¦ç¨äºè¯¥åå®¹çåªä½ã</param>
    </member>
    <member name="T:System.Net.Http.Headers.AuthenticationHeaderValue">
      <summary>è¡¨ç¤º AuthorizationãProxyAuthorizationãWWW-Authneticate å Proxy-Authenticate æ å¤´å¼ä¸­çéªè¯ä¿¡æ¯ã</summary>
    </member>
    <member name="M:System.Net.Http.Headers.AuthenticationHeaderValue.#ctor(System.String)">
      <summary>åå§å <see cref="T:System.Net.Http.Headers.AuthenticationHeaderValue" /> ç±»çæ°å®ä¾ã</summary>
      <param name="scheme">ç¨äºææçæ¶æã</param>
    </member>
    <member name="M:System.Net.Http.Headers.AuthenticationHeaderValue.#ctor(System.String,System.String)">
      <summary>åå§å <see cref="T:System.Net.Http.Headers.AuthenticationHeaderValue" /> ç±»çæ°å®ä¾ã</summary>
      <param name="scheme">ç¨äºææçæ¶æã</param>
      <param name="parameter">åå«è¯·æ±èµæºçç¨æ·ä»£ççèº«ä»½éªè¯æ¶æ¯çå­è¯ã</param>
    </member>
    <member name="M:System.Net.Http.Headers.AuthenticationHeaderValue.Equals(System.Object)">
      <summary>ç¡®å®æå®ç <see cref="T:System.Object" /> æ¯å¦ç­äºå½åç <see cref="T:System.Net.Http.Headers.AuthenticationHeaderValue" /> å¯¹è±¡ã</summary>
      <returns>è¿å <see cref="T:System.Boolean" />ã å¦ææå®ç <see cref="T:System.Object" />ç­äºå½åçå¯¹è±¡ï¼åä¸º trueï¼å¦åä¸º falseã</returns>
      <param name="obj">è¦ä¸å½åå¯¹è±¡è¿è¡æ¯è¾çå¯¹è±¡ã</param>
    </member>
    <member name="M:System.Net.Http.Headers.AuthenticationHeaderValue.GetHashCode">
      <summary>ä½ä¸º <see cref="T:System.Net.Http.Headers.AuthenticationHeaderValue" /> å¯¹è±¡çåå¸å½æ°ã</summary>
      <returns>è¿å <see cref="T:System.Int32" />ã å½åå¯¹è±¡çåå¸ä»£ç ã</returns>
    </member>
    <member name="P:System.Net.Http.Headers.AuthenticationHeaderValue.Parameter">
      <summary>è·ååå«æè¯·æ±èµæºçç¨æ·ä»£ççèº«ä»½éªè¯ä¿¡æ¯çå­æ®ã</summary>
      <returns>è¿å <see cref="T:System.String" />ã å­è¯åå«èº«ä»½éªè¯ä¿¡æ¯ã</returns>
    </member>
    <member name="M:System.Net.Http.Headers.AuthenticationHeaderValue.Parse(System.String)">
      <summary>å°å­ç¬¦ä¸²è½¬æ¢ä¸º <see cref="T:System.Net.Http.Headers.AuthenticationHeaderValue" /> å®ä¾ã</summary>
      <returns>è¿å <see cref="T:System.Net.Http.Headers.AuthenticationHeaderValue" />ã ä¸ä¸ª <see cref="T:System.Net.Http.Headers.AuthenticationHeaderValue" /> å®ä¾ã</returns>
      <param name="input">ä¸ä¸ªå­ç¬¦ä¸²ï¼è¡¨ç¤ºè®¤è¯æ å¤´å¼ä¿¡æ¯ã</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> ä¸º null å¼ç¨ã</exception>
      <exception cref="T:System.FormatException">
        <paramref name="input" /> æ¯æ æçèº«ä»½éªè¯æ å¤´å¼ä¿¡æ¯ã</exception>
    </member>
    <member name="P:System.Net.Http.Headers.AuthenticationHeaderValue.Scheme">
      <summary>è·åç¨äºèº«ä»½éªè¯çæ¹æ¡ã</summary>
      <returns>è¿å <see cref="T:System.String" />ã ç¨äºææçæ¶æã</returns>
    </member>
    <member name="M:System.Net.Http.Headers.AuthenticationHeaderValue.System#ICloneable#Clone">
      <summary>åå»ºä½ä¸ºå½å <see cref="T:System.Net.Http.Headers.AuthenticationHeaderValue" /> å®ä¾å¯æ¬çæ°å¯¹è±¡ã</summary>
      <returns>è¿å <see cref="T:System.Object" />ã å½åå®ä¾çå¯æ¬ã</returns>
    </member>
    <member name="M:System.Net.Http.Headers.AuthenticationHeaderValue.ToString">
      <summary>è¿åè¡¨ç¤ºå½å <see cref="T:System.Net.Http.Headers.AuthenticationHeaderValue" /> å¯¹è±¡çå­ç¬¦ä¸²ã</summary>
      <returns>è¿å <see cref="T:System.String" />ã è¡¨ç¤ºå½åå¯¹è±¡çå­ç¬¦ä¸²ã</returns>
    </member>
    <member name="M:System.Net.Http.Headers.AuthenticationHeaderValue.TryParse(System.String,System.Net.Http.Headers.AuthenticationHeaderValue@)">
      <summary>ç¡®å®å­ç¬¦ä¸²æ¯å¦æ¯ææç <see cref="T:System.Net.Http.Headers.AuthenticationHeaderValue" /> ä¿¡æ¯ã</summary>
      <returns>è¿å <see cref="T:System.Boolean" />ã å¦æ <paramref name="input" />ä¸ºææ <see cref="T:System.Net.Http.Headers.AuthenticationHeaderValue" /> ä¿¡æ¯ï¼åä¸º trueï¼å¦åä¸º falseã</returns>
      <param name="input">è¦éªè¯çå­ç¬¦ä¸²ã</param>
      <param name="parsedValue">å­ç¬¦ä¸²ç <see cref="T:System.Net.Http.Headers.AuthenticationHeaderValue" /> çæ¬ã</param>
    </member>
    <member name="T:System.Net.Http.Headers.CacheControlHeaderValue">
      <summary>è¡¨ç¤º Cache-Control æ å¤´çå¼ã</summary>
    </member>
    <member name="M:System.Net.Http.Headers.CacheControlHeaderValue.#ctor">
      <summary>åå§å <see cref="T:System.Net.Http.Headers.CacheControlHeaderValue" /> ç±»çæ°å®ä¾ã</summary>
    </member>
    <member name="M:System.Net.Http.Headers.CacheControlHeaderValue.Equals(System.Object)">
      <summary>ç¡®å®æå®ç <see cref="T:System.Object" /> æ¯å¦ç­äºå½åç <see cref="T:System.Net.Http.Headers.CacheControlHeaderValue" /> å¯¹è±¡ã</summary>
      <returns>è¿å <see cref="T:System.Boolean" />ã å¦ææå®ç <see cref="T:System.Object" />ç­äºå½åçå¯¹è±¡ï¼åä¸º trueï¼å¦åä¸º falseã</returns>
      <param name="obj">è¦ä¸å½åå¯¹è±¡è¿è¡æ¯è¾çå¯¹è±¡ã</param>
    </member>
    <member name="P:System.Net.Http.Headers.CacheControlHeaderValue.Extensions">
      <summary>ç¼å­æ©å±ç¬¦ï¼æ¯ä¸ªç¼å­æ©å±ç¬¦é½èµæå¯éå¼ã</summary>
      <returns>è¿å <see cref="T:System.Collections.Generic.ICollection`1" />ã ç¼å­æ©å±ç¬¦çéåï¼æ¯ä¸ªç¼å­æ©å±ç¬¦é½èµæå¯éå¼ã</returns>
    </member>
    <member name="M:System.Net.Http.Headers.CacheControlHeaderValue.GetHashCode">
      <summary>ä½ä¸º <see cref="T:System.Net.Http.Headers.CacheControlHeaderValue" /> å¯¹è±¡çåå¸å½æ°ã</summary>
      <returns>è¿å <see cref="T:System.Int32" />ã å½åå¯¹è±¡çåå¸ä»£ç ã</returns>
    </member>
    <member name="P:System.Net.Http.Headers.CacheControlHeaderValue.MaxAge">
      <summary>HTTP å®¢æ·ç«¯æ¿ææ¥åä»¥ç§ä¸ºæå®åä½çæå¤§çå­æã</summary>
      <returns>è¿å <see cref="T:System.TimeSpan" />ã ä»¥ç§ä¸ºåä½çæ¶é´ã</returns>
    </member>
    <member name="P:System.Net.Http.Headers.CacheControlHeaderValue.MaxStale">
      <summary>HTTP å®¢æ·æ¯å¦æ¿ææ¥åå·²è¶è¿å¶è¿ææ¶é´çååºã</summary>
      <returns>è¿å <see cref="T:System.Boolean" />ã å¦æHTTP å®¢æ·æ¿ææ¥åå·²è¶è¿è¿ææ¶é´çååºï¼åä¸º trueï¼å¦åä¸º falseã</returns>
    </member>
    <member name="P:System.Net.Http.Headers.CacheControlHeaderValue.MaxStaleLimit">
      <summary>HTTP å®¢æ·ç«¯æ¿ææ¥åçå·²è¶è¿å¶è¿ææ¶é´çååºçæé¿æ¶é´ï¼ä»¥ç§ä¸ºåä½ï¼ã</summary>
      <returns>è¿å <see cref="T:System.TimeSpan" />ã ä»¥ç§ä¸ºåä½çæ¶é´ã</returns>
    </member>
    <member name="P:System.Net.Http.Headers.CacheControlHeaderValue.MinFresh">
      <summary>HTTP å®¢æ·ç«¯æ¿ææ¥åä»¥ç§ä¸ºåä½ååºçæ°é²çå½æã</summary>
      <returns>è¿å <see cref="T:System.TimeSpan" />ã ä»¥ç§ä¸ºåä½çæ¶é´ã</returns>
    </member>
    <member name="P:System.Net.Http.Headers.CacheControlHeaderValue.MustRevalidate">
      <summary>ç¼å­é¡¹è¿æ¶æ¶ï¼æºæå¡å¨æ¯å¦éè¦å¯¹ä»»ä½åç»­ä½¿ç¨çç¼å­é¡¹è¿è¡éªè¯ã</summary>
      <returns>è¿å <see cref="T:System.Boolean" />ã å¦æç¼å­é¡¹è¿æ¶æ¶æºæå¡å¨éè¦å¯¹ä»»ä½åç»­ä½¿ç¨çç¼å­é¡¹è¿è¡éªè¯ï¼åä¸º trueï¼å¦åä¸º falseã</returns>
    </member>
    <member name="P:System.Net.Http.Headers.CacheControlHeaderValue.NoCache">
      <summary>HTTP å®¢æ·æ¯å¦æ¿ææ¥åç¼å­ååºã</summary>
      <returns>è¿å <see cref="T:System.Boolean" />ã å¦æ HTTP å®¢æ·æ¿ææ¥åç¼å­ååºï¼åä¸º trueï¼å¦åä¸º falseã</returns>
    </member>
    <member name="P:System.Net.Http.Headers.CacheControlHeaderValue.NoCacheHeaders">
      <summary>HTTP ååºæ¶ç¼å­æ§å¶æ å¤´å­æ®µä¸­âno-cacheâæä»¤ä¸­ç fieldnames çéåã</summary>
      <returns>è¿å <see cref="T:System.Collections.Generic.ICollection`1" />ã fieldnames çéåã</returns>
    </member>
    <member name="P:System.Net.Http.Headers.CacheControlHeaderValue.NoStore">
      <summary>ç¼å­æ¯å¦ä¸è½å­å¨ HTTP è¯·æ± mressage æä»»ä½ååºçä»»ä½é¨ä»¶ã</summary>
      <returns>è¿å <see cref="T:System.Boolean" />ã å¦æç¼å­ä¸è½å­å¨ HTTP è¯·æ± mressage æä»»ä½ååºçä»»ä½é¨ä»¶ï¼å trueï¼å¦åï¼ä¸º falseã</returns>
    </member>
    <member name="P:System.Net.Http.Headers.CacheControlHeaderValue.NoTransform">
      <summary>ç¼å­æä»£çé¡¹æ¯å¦æ æ³æ´æ¹è¯¥ä¸ªä½ä¸»ä½çä»»ä½æ¹é¢ã</summary>
      <returns>è¿å <see cref="T:System.Boolean" />ã å¦æç¼å­æä»£çé¡¹æ æ³æ´æ¹è¯¥ä¸ªä½ä¸»ä½çä»»ä½æ¹é¢ï¼å trueï¼å¦åï¼ä¸º falseã</returns>
    </member>
    <member name="P:System.Net.Http.Headers.CacheControlHeaderValue.OnlyIfCached">
      <summary>ç¼å­æ¯å¦åºä½¿ç¨ä¸å¶ä» HTTP è¯·æ±ä¸è´çç¼å­é¡¹è¿è¡ååºæååº 504ï¼ç½å³è¶æ¶ï¼ç¶æã</summary>
      <returns>è¿å <see cref="T:System.Boolean" />ã å¦æç¼å­åºä½¿ç¨ä¸å¶ä» HTTP è¯·æ±ä¸è´çç¼å­é¡¹è¿è¡ååºæååº 504ï¼ç½å³è¶æ¶ï¼ç¶æï¼å trueï¼å¦åï¼ä¸º falseã</returns>
    </member>
    <member name="M:System.Net.Http.Headers.CacheControlHeaderValue.Parse(System.String)">
      <summary>å°å­ç¬¦ä¸²è½¬æ¢ä¸º <see cref="T:System.Net.Http.Headers.CacheControlHeaderValue" /> å®ä¾ã</summary>
      <returns>è¿å <see cref="T:System.Net.Http.Headers.CacheControlHeaderValue" />ã ä¸ä¸ª <see cref="T:System.Net.Http.Headers.CacheControlHeaderValue" /> å®ä¾ã</returns>
      <param name="input">ä¸ä¸ªå­ç¬¦ä¸²ï¼è¡¨ç¤ºç¼å­æ§å¶æ å¤´å¼ä¿¡æ¯ã</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> ä¸º null å¼ç¨ã</exception>
      <exception cref="T:System.FormatException">
        <paramref name="input" /> æ¯æ æçç¼å­æ§å¶æ å¤´å¼ä¿¡æ¯ã</exception>
    </member>
    <member name="P:System.Net.Http.Headers.CacheControlHeaderValue.Private">
      <summary>HTTP ååºæ¶æ¯çå¨é¨æé¨åæ¯å¦éç¨äºåä¸ªç¨æ·ä¸ä¸å¾ç±å±äº«ç¼å­è¿è¡ç¼å­ã</summary>
      <returns>è¿å <see cref="T:System.Boolean" />ã å¦æ HTTP ååºæ¶æ¯çå¨é¨æé¨åéç¨äºåä¸ªç¨æ·åæ¯å¦å¿é¡»ç±å±äº«ç¼å­è¿è¡ç¼å­ï¼åä¸º trueï¼å¦åä¸º falseã</returns>
    </member>
    <member name="P:System.Net.Http.Headers.CacheControlHeaderValue.PrivateHeaders">
      <summary>HTTP ååºæ¶ç¼å­æ§å¶æ å¤´å­æ®µä¸­âç§æâæä»¤çéå fieldnamesã</summary>
      <returns>è¿å <see cref="T:System.Collections.Generic.ICollection`1" />ã fieldnames çéåã</returns>
    </member>
    <member name="P:System.Net.Http.Headers.CacheControlHeaderValue.ProxyRevalidate">
      <summary>ç¼å­é¡¹å¯¹å±äº«çç¨æ·ä»£çç¼å­è¿æ¶æ¶ï¼æºæå¡å¨æ¯å¦éè¦å¯¹ä»»ä½åç»­ä½¿ç¨çç¼å­é¡¹è¿è¡éªè¯ã</summary>
      <returns>è¿å <see cref="T:System.Boolean" />ã å¦æç¼å­é¡¹å¯¹å±äº«çç¨æ·ä»£çç¼å­è¿æ¶æ¶æºæå¡å¨éè¦å¯¹ä»»ä½åç»­ä½¿ç¨çç¼å­é¡¹è¿è¡éªè¯ï¼åä¸º trueï¼å¦åä¸º falseã</returns>
    </member>
    <member name="P:System.Net.Http.Headers.CacheControlHeaderValue.Public">
      <summary>HTTP ååºæ¯å¦å¯ç±ä»»ä½ç¼å­è¿è¡ç¼å­ï¼å³ä½¿å®éå¸¸å¨éå±äº«ç¼å­ä¸­ä»ä¸å¯ç¼å­æå¯ç¼å­ã</summary>
      <returns>è¿å <see cref="T:System.Boolean" />ã å¦æ HTTP ååºå¯ç±ä»»ä½ç¼å­è¿è¡ç¼å­ï¼å³ä½¿å®éå¸¸å¨éå±äº«ç¼å­ä¸­ä»ä¸å¯ç¼å­æå¯ç¼å­ï¼åä¸º trueï¼å¦åä¸º falseã</returns>
    </member>
    <member name="P:System.Net.Http.Headers.CacheControlHeaderValue.SharedMaxAge">
      <summary>å¨ä¸ä¸ª HTTP ååºä¸­å±äº«çæå¤§å¹´é¾ï¼æå®æ¯ç§ï¼è¯¥ååºç´æ¥å¨ç¨äºç¼å­-æ§ä»¶æ é¢æä¸ä¸ªç¨äºç¼å­çè¿ææ é¢ä¸­éè½½äºâæå¤§å¹´é¾âã</summary>
      <returns>è¿å <see cref="T:System.TimeSpan" />ã ä»¥ç§ä¸ºåä½çæ¶é´ã</returns>
    </member>
    <member name="M:System.Net.Http.Headers.CacheControlHeaderValue.System#ICloneable#Clone">
      <summary>åå»ºä½ä¸ºå½å <see cref="T:System.Net.Http.Headers.CacheControlHeaderValue" /> å®ä¾å¯æ¬çæ°å¯¹è±¡ã</summary>
      <returns>è¿å <see cref="T:System.Object" />ã å½åå®ä¾çå¯æ¬ã</returns>
    </member>
    <member name="M:System.Net.Http.Headers.CacheControlHeaderValue.ToString">
      <summary>è¿åè¡¨ç¤ºå½å <see cref="T:System.Net.Http.Headers.CacheControlHeaderValue" /> å¯¹è±¡çå­ç¬¦ä¸²ã</summary>
      <returns>è¿å <see cref="T:System.String" />ã è¡¨ç¤ºå½åå¯¹è±¡çå­ç¬¦ä¸²ã</returns>
    </member>
    <member name="M:System.Net.Http.Headers.CacheControlHeaderValue.TryParse(System.String,System.Net.Http.Headers.CacheControlHeaderValue@)">
      <summary>ç¡®å®å­ç¬¦ä¸²æ¯å¦æ¯ææç <see cref="T:System.Net.Http.Headers.CacheControlHeaderValue" /> ä¿¡æ¯ã</summary>
      <returns>è¿å <see cref="T:System.Boolean" />ã å¦æ <paramref name="input" />ä¸ºææ <see cref="T:System.Net.Http.Headers.CacheControlHeaderValue" /> ä¿¡æ¯ï¼åä¸º trueï¼å¦åä¸º falseã</returns>
      <param name="input">è¦éªè¯çå­ç¬¦ä¸²ã</param>
      <param name="parsedValue">å­ç¬¦ä¸²ç <see cref="T:System.Net.Http.Headers.CacheControlHeaderValue" /> çæ¬ã</param>
    </member>
    <member name="T:System.Net.Http.Headers.ContentDispositionHeaderValue">
      <summary>è¡¨ç¤º Content-Disposition æ å¤´çå¼ã</summary>
    </member>
    <member name="M:System.Net.Http.Headers.ContentDispositionHeaderValue.#ctor(System.Net.Http.Headers.ContentDispositionHeaderValue)">
      <summary>åå§å <see cref="T:System.Net.Http.Headers.ContentDispositionHeaderValue" /> ç±»çæ°å®ä¾ã</summary>
    </member>
    <member name="M:System.Net.Http.Headers.ContentDispositionHeaderValue.#ctor(System.String)">
      <summary>åå§å <see cref="T:System.Net.Http.Headers.ContentDispositionHeaderValue" /> ç±»çæ°å®ä¾ã</summary>
    </member>
    <member name="P:System.Net.Http.Headers.ContentDispositionHeaderValue.CreationDate">
      <summary>æä»¶çåå»ºæ¥æã</summary>
      <returns>è¿å <see cref="T:System.DateTimeOffset" />ã æä»¶çææ¥æã</returns>
    </member>
    <member name="P:System.Net.Http.Headers.ContentDispositionHeaderValue.DispositionType">
      <summary>åå®¹æ­£æé¨åçå¤ç½®ç±»åã</summary>
      <returns>è¿å <see cref="T:System.String" />ã å¤ç½®ç±»åã</returns>
    </member>
    <member name="M:System.Net.Http.Headers.ContentDispositionHeaderValue.Equals(System.Object)">
      <summary>ç¡®å®æå®ç <see cref="T:System.Object" /> æ¯å¦ç­äºå½åç <see cref="T:System.Net.Http.Headers.ContentDispositionHeaderValue" /> å¯¹è±¡ã</summary>
      <returns>è¿å <see cref="T:System.Boolean" />ã å¦ææå®ç <see cref="T:System.Object" />ç­äºå½åçå¯¹è±¡ï¼åä¸º trueï¼å¦åä¸º falseã</returns>
      <param name="obj">è¦ä¸å½åå¯¹è±¡è¿è¡æ¯è¾çå¯¹è±¡ã</param>
    </member>
    <member name="P:System.Net.Http.Headers.ContentDispositionHeaderValue.FileName">
      <summary>å¦æä¸»ä½åç¦»åå¨å­å¨ä¸ä¸ªåç¬çæä»¶ä¸­ï¼å¦ä½ä¸ºå¨å­è¦ä½¿ç¨çæ¶æ¯è´è½½æé ä¸ä¸ªæä»¶åçå»ºè®®ã</summary>
      <returns>è¿å <see cref="T:System.String" />ã å»ºè®®çæä»¶åã</returns>
    </member>
    <member name="P:System.Net.Http.Headers.ContentDispositionHeaderValue.FileNameStar">
      <summary>å¦æä¸»ä½åç¦»åå¨å­å¨åç¬çæä»¶ä¸­ï¼å¦ä½ä¸ºå¨å­è¦ä½¿ç¨çæ¶æ¯è´è½½æé æä»¶åçå»ºè®®ã</summary>
      <returns>è¿å <see cref="T:System.String" />ã çªä½ filename* çå»ºè®®æä»¶åã</returns>
    </member>
    <member name="M:System.Net.Http.Headers.ContentDispositionHeaderValue.GetHashCode">
      <summary>ä½ä¸º <see cref="T:System.Net.Http.Headers.ContentDispositionHeaderValue" /> å¯¹è±¡çåå¸å½æ°ã</summary>
      <returns>è¿å <see cref="T:System.Int32" />ã å½åå¯¹è±¡çåå¸ä»£ç ã</returns>
    </member>
    <member name="P:System.Net.Http.Headers.ContentDispositionHeaderValue.ModificationDate">
      <summary>ä¸æ¬¡ä¿®æ¹æä»¶çæ¥æã</summary>
      <returns>è¿å <see cref="T:System.DateTimeOffset" />ã æä»¶ä¿®æ¹æ¥æã</returns>
    </member>
    <member name="P:System.Net.Http.Headers.ContentDispositionHeaderValue.Name">
      <summary>ä¸ä¸ªåå®¹ä¸»ä½é¨åçåç§°ã</summary>
      <returns>è¿å <see cref="T:System.String" />ã è¯¥åå®¹ä¸»ä½é¨åçåç§°ã</returns>
    </member>
    <member name="P:System.Net.Http.Headers.ContentDispositionHeaderValue.Parameters">
      <summary>åæ°éåå« Content-Disposition æ å¤´ã</summary>
      <returns>è¿å <see cref="T:System.Collections.Generic.ICollection`1" />ã åæ°çéåã</returns>
    </member>
    <member name="M:System.Net.Http.Headers.ContentDispositionHeaderValue.Parse(System.String)">
      <summary>å°å­ç¬¦ä¸²è½¬æ¢ä¸º <see cref="T:System.Net.Http.Headers.ContentDispositionHeaderValue" /> å®ä¾ã</summary>
      <returns>è¿å <see cref="T:System.Net.Http.Headers.ContentDispositionHeaderValue" />ã ä¸ä¸ª <see cref="T:System.Net.Http.Headers.ContentDispositionHeaderValue" /> å®ä¾ã</returns>
      <param name="input">å­ç¬¦ä¸²è¡¨ç¤ºåå®¹å¤ç½®æ å¤´å¼ä¿¡æ¯ã</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> ä¸º null å¼ç¨ã</exception>
      <exception cref="T:System.FormatException">
        <paramref name="input" /> æ¯æ æçåå®¹å¤ç½®æ å¤´å¼ä¿¡æ¯ã</exception>
    </member>
    <member name="P:System.Net.Http.Headers.ContentDispositionHeaderValue.ReadDate">
      <summary>ä¸æ¬¡è¯»åæä»¶çæ¥æã</summary>
      <returns>è¿å <see cref="T:System.DateTimeOffset" />ã ä¸æ¬¡è¯»åæ¥æã</returns>
    </member>
    <member name="P:System.Net.Http.Headers.ContentDispositionHeaderValue.Size">
      <summary>æä»¶çè¿ä¼¼å¤§å°ï¼å­èï¼ã</summary>
      <returns>è¿å <see cref="T:System.Int64" />ã è¿ä¼¼å¤§å°ï¼ä»¥å­èä¸ºåä½ã</returns>
    </member>
    <member name="M:System.Net.Http.Headers.ContentDispositionHeaderValue.System#ICloneable#Clone">
      <summary>åå»ºä½ä¸ºå½å <see cref="T:System.Net.Http.Headers.ContentDispositionHeaderValue" /> å®ä¾å¯æ¬çæ°å¯¹è±¡ã</summary>
      <returns>è¿å <see cref="T:System.Object" />ã å½åå®ä¾çå¯æ¬ã</returns>
    </member>
    <member name="M:System.Net.Http.Headers.ContentDispositionHeaderValue.ToString">
      <summary>è¿åè¡¨ç¤ºå½å <see cref="T:System.Net.Http.Headers.ContentDispositionHeaderValue" /> å¯¹è±¡çå­ç¬¦ä¸²ã</summary>
      <returns>è¿å <see cref="T:System.String" />ã è¡¨ç¤ºå½åå¯¹è±¡çå­ç¬¦ä¸²ã</returns>
    </member>
    <member name="M:System.Net.Http.Headers.ContentDispositionHeaderValue.TryParse(System.String,System.Net.Http.Headers.ContentDispositionHeaderValue@)">
      <summary>ç¡®å®å­ç¬¦ä¸²æ¯å¦æ¯ææç <see cref="T:System.Net.Http.Headers.ContentDispositionHeaderValue" /> ä¿¡æ¯ã</summary>
      <returns>è¿å <see cref="T:System.Boolean" />ã å¦æ <paramref name="input" />ä¸ºææ <see cref="T:System.Net.Http.Headers.ContentDispositionHeaderValue" /> ä¿¡æ¯ï¼åä¸º trueï¼å¦åä¸º falseã</returns>
      <param name="input">è¦éªè¯çå­ç¬¦ä¸²ã</param>
      <param name="parsedValue">å­ç¬¦ä¸²ç <see cref="T:System.Net.Http.Headers.ContentDispositionHeaderValue" /> çæ¬ã</param>
    </member>
    <member name="T:System.Net.Http.Headers.ContentRangeHeaderValue">
      <summary>è¡¨ç¤º Content-Range æ å¤´çå¼ã</summary>
    </member>
    <member name="M:System.Net.Http.Headers.ContentRangeHeaderValue.#ctor(System.Int64)">
    </member>
    <member name="M:System.Net.Http.Headers.ContentRangeHeaderValue.#ctor(System.Int64,System.Int64)">
    </member>
    <member name="M:System.Net.Http.Headers.ContentRangeHeaderValue.#ctor(System.Int64,System.Int64,System.Int64)">
    </member>
    <member name="M:System.Net.Http.Headers.ContentRangeHeaderValue.Equals(System.Object)">
      <returns>è¿å <see cref="T:System.Boolean" />ã</returns>
    </member>
    <member name="P:System.Net.Http.Headers.ContentRangeHeaderValue.From">
      <returns>è¿å <see cref="T:System.Int64" />ã</returns>
    </member>
    <member name="M:System.Net.Http.Headers.ContentRangeHeaderValue.GetHashCode">
      <returns>è¿å <see cref="T:System.Int32" />ã</returns>
    </member>
    <member name="P:System.Net.Http.Headers.ContentRangeHeaderValue.HasLength">
      <returns>è¿å <see cref="T:System.Boolean" />ã</returns>
    </member>
    <member name="P:System.Net.Http.Headers.ContentRangeHeaderValue.HasRange">
      <returns>è¿å <see cref="T:System.Boolean" />ã</returns>
    </member>
    <member name="P:System.Net.Http.Headers.ContentRangeHeaderValue.Length">
      <returns>è¿å <see cref="T:System.Int64" />ã</returns>
    </member>
    <member name="M:System.Net.Http.Headers.ContentRangeHeaderValue.Parse(System.String)">
      <returns>è¿å <see cref="T:System.Net.Http.Headers.ContentRangeHeaderValue" />ã</returns>
    </member>
    <member name="M:System.Net.Http.Headers.ContentRangeHeaderValue.System#ICloneable#Clone">
      <returns>è¿å <see cref="T:System.Object" />ã</returns>
    </member>
    <member name="P:System.Net.Http.Headers.ContentRangeHeaderValue.To">
      <returns>è¿å <see cref="T:System.Int64" />ã</returns>
    </member>
    <member name="M:System.Net.Http.Headers.ContentRangeHeaderValue.ToString">
      <returns>è¿å <see cref="T:System.String" />ã</returns>
    </member>
    <member name="M:System.Net.Http.Headers.ContentRangeHeaderValue.TryParse(System.String,System.Net.Http.Headers.ContentRangeHeaderValue@)">
      <returns>è¿å <see cref="T:System.Boolean" />ã</returns>
    </member>
    <member name="P:System.Net.Http.Headers.ContentRangeHeaderValue.Unit">
      <returns>è¿å <see cref="T:System.String" />ã</returns>
    </member>
    <member name="T:System.Net.Http.Headers.EntityTagHeaderValue">
      <summary>è¡¨ç¤ºå®ä½æ è®°æ å¤´å¼ã</summary>
    </member>
    <member name="M:System.Net.Http.Headers.EntityTagHeaderValue.#ctor(System.String)">
    </member>
    <member name="M:System.Net.Http.Headers.EntityTagHeaderValue.#ctor(System.String,System.Boolean)">
    </member>
    <member name="P:System.Net.Http.Headers.EntityTagHeaderValue.Any">
      <returns>è¿å <see cref="T:System.Net.Http.Headers.EntityTagHeaderValue" />ã</returns>
    </member>
    <member name="M:System.Net.Http.Headers.EntityTagHeaderValue.Equals(System.Object)">
      <returns>è¿å <see cref="T:System.Boolean" />ã</returns>
    </member>
    <member name="M:System.Net.Http.Headers.EntityTagHeaderValue.GetHashCode">
      <returns>è¿å <see cref="T:System.Int32" />ã</returns>
    </member>
    <member name="P:System.Net.Http.Headers.EntityTagHeaderValue.IsWeak">
      <returns>è¿å <see cref="T:System.Boolean" />ã</returns>
    </member>
    <member name="M:System.Net.Http.Headers.EntityTagHeaderValue.Parse(System.String)">
      <returns>è¿å <see cref="T:System.Net.Http.Headers.EntityTagHeaderValue" />ã</returns>
    </member>
    <member name="M:System.Net.Http.Headers.EntityTagHeaderValue.System#ICloneable#Clone">
      <returns>è¿å <see cref="T:System.Object" />ã</returns>
    </member>
    <member name="P:System.Net.Http.Headers.EntityTagHeaderValue.Tag">
      <returns>è¿å <see cref="T:System.String" />ã</returns>
    </member>
    <member name="M:System.Net.Http.Headers.EntityTagHeaderValue.ToString">
      <returns>è¿å <see cref="T:System.String" />ã</returns>
    </member>
    <member name="M:System.Net.Http.Headers.EntityTagHeaderValue.TryParse(System.String,System.Net.Http.Headers.EntityTagHeaderValue@)">
      <returns>è¿å <see cref="T:System.Boolean" />ã</returns>
    </member>
    <member name="T:System.Net.Http.Headers.HttpContentHeaders">
      <summary>è¡¨ç¤ºå¨ RFC 2616 ä¸­å®ä¹çâåå®¹æ é¢âçéåã</summary>
    </member>
    <member name="P:System.Net.Http.Headers.HttpContentHeaders.Allow">
      <summary>è·å HTTP ååºç Allow åå®¹æ é¢çå¼ã</summary>
      <returns>è¿å <see cref="T:System.Collections.Generic.ICollection`1" />ã è¯·æ± HTTP ç Allow æ é¢çå¼ã</returns>
    </member>
    <member name="P:System.Net.Http.Headers.HttpContentHeaders.ContentDisposition">
      <returns>è¿å <see cref="T:System.Net.Http.Headers.ContentDispositionHeaderValue" />ã</returns>
    </member>
    <member name="P:System.Net.Http.Headers.HttpContentHeaders.ContentEncoding">
      <summary>è·å HTTP ååºç Content-Encoding åå®¹æ é¢çå¼ã</summary>
      <returns>è¿å <see cref="T:System.Collections.Generic.ICollection`1" />ã è¯·æ± HTTP ç Content-Encoding åå®¹æ é¢çå¼ã</returns>
    </member>
    <member name="P:System.Net.Http.Headers.HttpContentHeaders.ContentLanguage">
      <summary>è·å HTTP ååºç Content-Language åå®¹æ é¢çå¼ã</summary>
      <returns>è¿å <see cref="T:System.Collections.Generic.ICollection`1" />ã è¯·æ± HTTP ç Content-Language åå®¹æ é¢çå¼ã</returns>
    </member>
    <member name="P:System.Net.Http.Headers.HttpContentHeaders.ContentLength">
      <summary>è·åæè®¾ç½® HTTP ååºä¸ç Content-Length åå®¹æ å¤´å¼ã</summary>
      <returns>è¿å <see cref="T:System.Int64" />ã è¯·æ± HTTP ç Content-Length åå®¹æ é¢çå¼ã</returns>
    </member>
    <member name="P:System.Net.Http.Headers.HttpContentHeaders.ContentLocation">
      <summary>è·åæè®¾ç½® HTTP ååºä¸ç Content-Location åå®¹æ å¤´å¼ã</summary>
      <returns>è¿å <see cref="T:System.Uri" />ã è¯·æ± HTTP ç Content-Location åå®¹æ é¢çå¼ã</returns>
    </member>
    <member name="P:System.Net.Http.Headers.HttpContentHeaders.ContentMD5">
      <summary>è·åæè®¾ç½® HTTP ååºä¸ç Content-MD5 åå®¹æ å¤´å¼ã</summary>
      <returns>è¿å <see cref="T:System.Byte" />ã è¯·æ± HTTP ç Content-MD5 åå®¹æ é¢çå¼ã</returns>
    </member>
    <member name="P:System.Net.Http.Headers.HttpContentHeaders.ContentRange">
      <summary>è·åæè®¾ç½® HTTP ååºä¸ç Content-Range åå®¹æ å¤´å¼ã</summary>
      <returns>è¿å <see cref="T:System.Net.Http.Headers.ContentRangeHeaderValue" />ã è¯·æ± HTTP ç Content-Range åå®¹æ é¢çå¼ã</returns>
    </member>
    <member name="P:System.Net.Http.Headers.HttpContentHeaders.ContentType">
      <summary>è·åæè®¾ç½® HTTP ååºä¸ç Content-Type åå®¹æ å¤´å¼ã</summary>
      <returns>è¿å <see cref="T:System.Net.Http.Headers.MediaTypeHeaderValue" />ã è¯·æ± HTTP ç Content-Type åå®¹æ é¢çå¼ã</returns>
    </member>
    <member name="P:System.Net.Http.Headers.HttpContentHeaders.Expires">
      <summary>è·åæè®¾ç½® HTTP ååºä¸ç Expires åå®¹æ å¤´å¼ã</summary>
      <returns>è¿å <see cref="T:System.DateTimeOffset" />ã è¯·æ± HTTP ç Expires åå®¹æ é¢çå¼ã</returns>
    </member>
    <member name="P:System.Net.Http.Headers.HttpContentHeaders.LastModified">
      <summary>è·åæè®¾ç½® HTTP ååºä¸ç Last-Modified åå®¹æ å¤´å¼ã</summary>
      <returns>è¿å <see cref="T:System.DateTimeOffset" />ã è¯·æ± HTTP ç Last-Modified åå®¹æ é¢çå¼ã</returns>
    </member>
    <member name="T:System.Net.Http.Headers.HttpHeaders">
      <summary>æ å¤´åå¶å¨ RFC 2616 ä¸­å®ä¹çå¼çéåã</summary>
    </member>
    <member name="M:System.Net.Http.Headers.HttpHeaders.#ctor">
      <summary>åå§å <see cref="T:System.Net.Http.Headers.HttpHeaders" /> ç±»çæ°å®ä¾ã</summary>
    </member>
    <member name="M:System.Net.Http.Headers.HttpHeaders.Add(System.String,System.Collections.Generic.IEnumerable{System.String})">
      <summary>æ·»å æå®çæ å¤´åå¶å¼å° <see cref="T:System.Net.Http.Headers.HttpHeaders" /> éåä¸­ã</summary>
      <param name="name">è¦æ·»å å°éåä¸­çæ å¤´ã</param>
      <param name="values">è¦åéåä¸­æ·»å çæ å¤´å¼çåè¡¨ã</param>
    </member>
    <member name="M:System.Net.Http.Headers.HttpHeaders.Add(System.String,System.String)">
      <summary>æ·»å æå®çæ å¤´åå¶å¼å° <see cref="T:System.Net.Http.Headers.HttpHeaders" /> éåä¸­ã</summary>
      <param name="name">è¦æ·»å å°éåä¸­çæ å¤´ã</param>
      <param name="value">æ å¤´çåå®¹ã</param>
    </member>
    <member name="M:System.Net.Http.Headers.HttpHeaders.Clear">
      <summary>ä» <see cref="T:System.Net.Http.Headers.HttpHeaders" /> éåä¸­ç§»é¤æææ å¤´ã</summary>
    </member>
    <member name="M:System.Net.Http.Headers.HttpHeaders.Contains(System.String)">
      <summary>å¦ææå®æ å¤´å­å¨äº <see cref="T:System.Net.Http.Headers.HttpHeaders" /> éååè¿åã</summary>
      <returns>è¿å <see cref="T:System.Boolean" />ã å¦æéåä¸­å­å¨æå®æ å¤´ï¼åä¸º trueï¼å¦åä¸º falseã</returns>
      <param name="name">æå®çè¯»åå¨ã</param>
    </member>
    <member name="M:System.Net.Http.Headers.HttpHeaders.GetEnumerator">
      <summary>è¿åå¯å¾ªç¯è®¿é® <see cref="T:System.Net.Http.Headers.HttpHeaders" /> å®ä¾çæä¸¾æ°ã</summary>
      <returns>è¿å <see cref="T:System.Collections.Generic.IEnumerator`1" />ã <see cref="T:System.Net.Http.Headers.HttpHeaders" /> çä¸ä¸ªæä¸¾æ°ã</returns>
    </member>
    <member name="M:System.Net.Http.Headers.HttpHeaders.GetValues(System.String)">
      <summary>è¿åå­å¨å¨ <see cref="T:System.Net.Http.Headers.HttpHeaders" /> éåä¸­æææå®æ å¤´çæ å¤´å¼ã</summary>
      <returns>è¿å <see cref="T:System.Collections.Generic.IEnumerable`1" />ã æ å¤´å­ç¬¦ä¸²æ°ç»ã</returns>
      <param name="name">è¿åå¼æåºç¨çæå®è¯»åå¨ã</param>
    </member>
    <member name="M:System.Net.Http.Headers.HttpHeaders.Remove(System.String)">
      <summary>ä» <see cref="T:System.Net.Http.Headers.HttpHeaders" /> éåä¸­ç§»é¤æå®çæ å¤´ã</summary>
      <returns>è¿å <see cref="T:System.Boolean" />ã</returns>
      <param name="name">è¦ä»éåä¸­ç§»é¤çæ å¤´åç§°ã</param>
    </member>
    <member name="M:System.Net.Http.Headers.HttpHeaders.System#Collections#IEnumerable#GetEnumerator">
      <returns>è¿å <see cref="T:System.Collections.IEnumerator" />ã</returns>
    </member>
    <member name="M:System.Net.Http.Headers.HttpHeaders.ToString">
      <returns>è¿å <see cref="T:System.String" />ã</returns>
    </member>
    <member name="M:System.Net.Http.Headers.HttpHeaders.TryAddWithoutValidation(System.String,System.Collections.Generic.IEnumerable{System.String})">
    </member>
    <member name="M:System.Net.Http.Headers.HttpHeaders.TryAddWithoutValidation(System.String,System.String)">
    </member>
    <member name="M:System.Net.Http.Headers.HttpHeaders.TryGetValues(System.String,System.Collections.Generic.IEnumerable{System.String}@)">
      <summary>å¦ææå®çæ å¤´åæå®çå¼å­å¨å¨ <see cref="T:System.Net.Http.Headers.HttpHeaders" /> éåä¸­åè¿åã</summary>
      <returns>è¿å <see cref="T:System.Boolean" />ã true æ¯æå®çæ å¤´ <paramref name="name" />ï¼å¹¶ä¸ values å·²å­å¨å¨éåä¸­;å¦å falseã</returns>
      <param name="name">æå®æ å¤´ã</param>
      <param name="values">æå®çæ å¤´å¼ã</param>
    </member>
    <member name="T:System.Net.Http.Headers.HttpHeaderValueCollection`1">
      <summary>è¡¨ç¤ºæ å¤´å¼çéåã</summary>
      <typeparam name="T">
      </typeparam>
    </member>
    <member name="M:System.Net.Http.Headers.HttpHeaderValueCollection`1.Add(`0)">
    </member>
    <member name="M:System.Net.Http.Headers.HttpHeaderValueCollection`1.Clear">
    </member>
    <member name="M:System.Net.Http.Headers.HttpHeaderValueCollection`1.Contains(`0)">
      <returns>è¿å <see cref="T:System.Boolean" />ã</returns>
    </member>
    <member name="M:System.Net.Http.Headers.HttpHeaderValueCollection`1.CopyTo(`0[],System.Int32)">
    </member>
    <member name="P:System.Net.Http.Headers.HttpHeaderValueCollection`1.Count">
      <returns>è¿å <see cref="T:System.Int32" />ã</returns>
    </member>
    <member name="M:System.Net.Http.Headers.HttpHeaderValueCollection`1.GetEnumerator">
      <returns>è¿å <see cref="T:System.Collections.Generic.IEnumerator`1" />ã</returns>
    </member>
    <member name="P:System.Net.Http.Headers.HttpHeaderValueCollection`1.IsReadOnly">
      <returns>è¿å <see cref="T:System.Boolean" />ã</returns>
    </member>
    <member name="M:System.Net.Http.Headers.HttpHeaderValueCollection`1.ParseAdd(System.String)">
    </member>
    <member name="M:System.Net.Http.Headers.HttpHeaderValueCollection`1.Remove(`0)">
      <returns>è¿å <see cref="T:System.Boolean" />ã</returns>
    </member>
    <member name="M:System.Net.Http.Headers.HttpHeaderValueCollection`1.System#Collections#IEnumerable#GetEnumerator">
      <returns>è¿å <see cref="T:System.Collections.IEnumerator" />ã</returns>
    </member>
    <member name="M:System.Net.Http.Headers.HttpHeaderValueCollection`1.ToString">
      <returns>è¿å <see cref="T:System.String" />ã</returns>
    </member>
    <member name="M:System.Net.Http.Headers.HttpHeaderValueCollection`1.TryParseAdd(System.String)">
      <returns>è¿å <see cref="T:System.Boolean" />ã</returns>
    </member>
    <member name="T:System.Net.Http.Headers.HttpRequestHeaders">
      <summary>è¡¨ç¤ºå¨ RFC 2616 ä¸­å®ä¹çâè¯·æ±æ é¢âçéåã</summary>
    </member>
    <member name="P:System.Net.Http.Headers.HttpRequestHeaders.Accept">
      <summary>è·å HTTP è¯·æ±ç Accept æ å¤´çå¼ã</summary>
      <returns>è¿å <see cref="T:System.Net.Http.Headers.HttpHeaderValueCollection`1" />ã è¯·æ± HTTP ç Accept æ é¢çå¼ã</returns>
    </member>
    <member name="P:System.Net.Http.Headers.HttpRequestHeaders.AcceptCharset">
      <summary>è·å HTTP è¯·æ±ç Accept-Charset æ å¤´çå¼ã</summary>
      <returns>è¿å <see cref="T:System.Net.Http.Headers.HttpHeaderValueCollection`1" />ã è¯·æ± HTTP ç Accept-Charset æ é¢çå¼ã</returns>
    </member>
    <member name="P:System.Net.Http.Headers.HttpRequestHeaders.AcceptEncoding">
      <summary>è·å HTTP è¯·æ±ç Accept-Encoding æ å¤´çå¼ã</summary>
      <returns>è¿å <see cref="T:System.Net.Http.Headers.HttpHeaderValueCollection`1" />ã è¯·æ± HTTP ç Accept-Encoding æ é¢çå¼ã</returns>
    </member>
    <member name="P:System.Net.Http.Headers.HttpRequestHeaders.AcceptLanguage">
      <summary>è·å HTTP è¯·æ±ç Accept-Language æ å¤´çå¼ã</summary>
      <returns>è¿å <see cref="T:System.Net.Http.Headers.HttpHeaderValueCollection`1" />ã è¯·æ± HTTP ç Accept-Language æ é¢çå¼ã</returns>
    </member>
    <member name="P:System.Net.Http.Headers.HttpRequestHeaders.Authorization">
      <summary>è·åæè®¾ç½® HTTP è¯·æ±ç Authorization æ å¤´å¼ã</summary>
      <returns>è¿å <see cref="T:System.Net.Http.Headers.AuthenticationHeaderValue" />ã è¯·æ± HTTP ç Authorization æ é¢çå¼ã</returns>
    </member>
    <member name="P:System.Net.Http.Headers.HttpRequestHeaders.CacheControl">
      <summary>è·åæè®¾ç½® HTTP è¯·æ±ç Cache-Control æ å¤´å¼ã</summary>
      <returns>è¿å <see cref="T:System.Net.Http.Headers.CacheControlHeaderValue" />ã è¯·æ± HTTP ç Cache-Control æ é¢çå¼ã</returns>
    </member>
    <member name="P:System.Net.Http.Headers.HttpRequestHeaders.Connection">
      <summary>è·å HTTP è¯·æ±ç Connection æ å¤´çå¼ã</summary>
      <returns>è¿å <see cref="T:System.Net.Http.Headers.HttpHeaderValueCollection`1" />ã è¯·æ± HTTP ç Connection æ é¢çå¼ã</returns>
    </member>
    <member name="P:System.Net.Http.Headers.HttpRequestHeaders.ConnectionClose">
      <summary>è·åæè®¾ç½®æç¤º HTTP è¯·æ±ç Connection æ å¤´æ¯å¦åºåå« Close çå¼ã</summary>
      <returns>è¿å <see cref="T:System.Boolean" />ã å¦æ Connection æ å¤´åå«å³é­ï¼åä¸º trueï¼å¦å falseã</returns>
    </member>
    <member name="P:System.Net.Http.Headers.HttpRequestHeaders.Date">
      <summary>è·åæè®¾ç½® HTTP è¯·æ±ç Date æ å¤´å¼ã</summary>
      <returns>è¿å <see cref="T:System.DateTimeOffset" />ã è¯·æ± HTTP ç Date æ é¢çå¼ã</returns>
    </member>
    <member name="P:System.Net.Http.Headers.HttpRequestHeaders.Expect">
      <summary>è·å HTTP è¯·æ±ç Expect æ å¤´çå¼ã</summary>
      <returns>è¿å <see cref="T:System.Net.Http.Headers.HttpHeaderValueCollection`1" />ã è¯·æ± HTTP ç Expect æ é¢çå¼ã</returns>
    </member>
    <member name="P:System.Net.Http.Headers.HttpRequestHeaders.ExpectContinue">
      <summary>è·åæè®¾ç½®æç¤º HTTP è¯·æ±ç Expect æ å¤´æ¯å¦åºåå« Continue çå¼ã</summary>
      <returns>è¿å <see cref="T:System.Boolean" />ã å¦æ Expect æ å¤´åå«ç»§ç»­ï¼åä¸º trueï¼å¦å falseã</returns>
    </member>
    <member name="P:System.Net.Http.Headers.HttpRequestHeaders.From">
      <summary>è·åæè®¾ç½® HTTP è¯·æ±ç From æ å¤´å¼ã</summary>
      <returns>è¿å <see cref="T:System.String" />ã è¯·æ± HTTP ç From æ é¢çå¼ã</returns>
    </member>
    <member name="P:System.Net.Http.Headers.HttpRequestHeaders.Host">
      <summary>è·åæè®¾ç½® HTTP è¯·æ±ç Host æ å¤´å¼ã</summary>
      <returns>è¿å <see cref="T:System.String" />ã è¯·æ± HTTP ç Host æ é¢çå¼ã</returns>
    </member>
    <member name="P:System.Net.Http.Headers.HttpRequestHeaders.IfMatch">
      <summary>è·å HTTP è¯·æ±ç If-Match æ å¤´çå¼ã</summary>
      <returns>è¿å <see cref="T:System.Net.Http.Headers.HttpHeaderValueCollection`1" />ã è¯·æ± HTTP ç If-Match æ é¢çå¼ã</returns>
    </member>
    <member name="P:System.Net.Http.Headers.HttpRequestHeaders.IfModifiedSince">
      <summary>è·åæè®¾ç½® HTTP è¯·æ±ç If-Modified-Since æ å¤´å¼ã</summary>
      <returns>è¿å <see cref="T:System.DateTimeOffset" />ã è¯·æ± HTTP ç If-Modified-Since æ é¢çå¼ã</returns>
    </member>
    <member name="P:System.Net.Http.Headers.HttpRequestHeaders.IfNoneMatch">
      <summary>è·å HTTP è¯·æ±ç If-None-Match æ å¤´çå¼ã</summary>
      <returns>è¿å <see cref="T:System.Net.Http.Headers.HttpHeaderValueCollection`1" />ã è·å HTTP è¯·æ±ç If-None-Match æ å¤´çå¼ã</returns>
    </member>
    <member name="P:System.Net.Http.Headers.HttpRequestHeaders.IfRange">
      <summary>è·åæè®¾ç½® HTTP è¯·æ±ç If-Range æ å¤´å¼ã</summary>
      <returns>è¿å <see cref="T:System.Net.Http.Headers.RangeConditionHeaderValue" />ã è¯·æ± HTTP ç If-Range æ é¢çå¼ã</returns>
    </member>
    <member name="P:System.Net.Http.Headers.HttpRequestHeaders.IfUnmodifiedSince">
      <summary>è·åæè®¾ç½® HTTP è¯·æ±ç If-Unmodified-Since æ å¤´å¼ã</summary>
      <returns>è¿å <see cref="T:System.DateTimeOffset" />ã è¯·æ± HTTP ç If-Unmodified-Since æ é¢çå¼ã</returns>
    </member>
    <member name="P:System.Net.Http.Headers.HttpRequestHeaders.MaxForwards">
      <summary>è·åæè®¾ç½® HTTP è¯·æ±ç Max-Forwards æ å¤´å¼ã</summary>
      <returns>è¿å <see cref="T:System.Int32" />ã è¯·æ± HTTP ç Max-Forwards æ é¢çå¼ã</returns>
    </member>
    <member name="P:System.Net.Http.Headers.HttpRequestHeaders.Pragma">
      <summary>è·å HTTP è¯·æ±ç Pragma æ å¤´çå¼ã</summary>
      <returns>è¿å <see cref="T:System.Net.Http.Headers.HttpHeaderValueCollection`1" />ã è¯·æ± HTTP ç Pragma æ é¢çå¼ã</returns>
    </member>
    <member name="P:System.Net.Http.Headers.HttpRequestHeaders.ProxyAuthorization">
      <summary>è·åæè®¾ç½® HTTP è¯·æ±ç Proxy-Authorization æ å¤´å¼ã</summary>
      <returns>è¿å <see cref="T:System.Net.Http.Headers.AuthenticationHeaderValue" />ã è¯·æ± HTTP ç Proxy-Authorization æ é¢çå¼ã</returns>
    </member>
    <member name="P:System.Net.Http.Headers.HttpRequestHeaders.Range">
      <summary>è·åæè®¾ç½® HTTP è¯·æ±ç Range æ å¤´å¼ã</summary>
      <returns>è¿å <see cref="T:System.Net.Http.Headers.RangeHeaderValue" />ã è¯·æ± HTTP ç Range æ é¢çå¼ã</returns>
    </member>
    <member name="P:System.Net.Http.Headers.HttpRequestHeaders.Referrer">
      <summary>è·åæè®¾ç½® HTTP è¯·æ±ç Referer æ å¤´å¼ã</summary>
      <returns>è¿å <see cref="T:System.Uri" />ã è¯·æ± HTTP ç Referer æ é¢çå¼ã</returns>
    </member>
    <member name="P:System.Net.Http.Headers.HttpRequestHeaders.TE">
      <summary>è·å HTTP è¯·æ±ç TE æ å¤´çå¼ã</summary>
      <returns>è¿å <see cref="T:System.Net.Http.Headers.HttpHeaderValueCollection`1" />ã è¯·æ± HTTP ç TE æ é¢çå¼ã</returns>
    </member>
    <member name="P:System.Net.Http.Headers.HttpRequestHeaders.Trailer">
      <summary>è·å HTTP è¯·æ±ç Trailer æ å¤´çå¼ã</summary>
      <returns>è¿å <see cref="T:System.Net.Http.Headers.HttpHeaderValueCollection`1" />ã è¯·æ± HTTP ç Trailer æ é¢çå¼ã</returns>
    </member>
    <member name="P:System.Net.Http.Headers.HttpRequestHeaders.TransferEncoding">
      <summary>è·å HTTP è¯·æ±ç Transfer-Encoding æ å¤´çå¼ã</summary>
      <returns>è¿å <see cref="T:System.Net.Http.Headers.HttpHeaderValueCollection`1" />ã è¯·æ± HTTP ç Transfer-Encoding æ é¢çå¼ã</returns>
    </member>
    <member name="P:System.Net.Http.Headers.HttpRequestHeaders.TransferEncodingChunked">
      <summary>è·åæè®¾ç½®æç¤º HTTP è¯·æ±ç Transfer-Encoding æ å¤´æ¯å¦åºåå« chunked çå¼ã</summary>
      <returns>è¿å <see cref="T:System.Boolean" />ã å¦æ Transfer-Encoding æ å¤´åå«ååï¼åä¸º trueï¼å¦å falseã</returns>
    </member>
    <member name="P:System.Net.Http.Headers.HttpRequestHeaders.Upgrade">
      <summary>è·å HTTP è¯·æ±ç Upgrade æ å¤´çå¼ã</summary>
      <returns>è¿å <see cref="T:System.Net.Http.Headers.HttpHeaderValueCollection`1" />ã è¯·æ± HTTP ç Upgrade æ é¢çå¼ã</returns>
    </member>
    <member name="P:System.Net.Http.Headers.HttpRequestHeaders.UserAgent">
      <summary>è·å HTTP è¯·æ±ç User-Agent æ å¤´çå¼ã</summary>
      <returns>è¿å <see cref="T:System.Net.Http.Headers.HttpHeaderValueCollection`1" />ã è¯·æ± HTTP ç User-Agent æ é¢çå¼ã</returns>
    </member>
    <member name="P:System.Net.Http.Headers.HttpRequestHeaders.Via">
      <summary>è·å HTTP è¯·æ±ç Via æ å¤´çå¼ã</summary>
      <returns>è¿å <see cref="T:System.Net.Http.Headers.HttpHeaderValueCollection`1" />ã è¯·æ± HTTP ç Via æ é¢çå¼ã</returns>
    </member>
    <member name="P:System.Net.Http.Headers.HttpRequestHeaders.Warning">
      <summary>è·å HTTP è¯·æ±ç Warning æ å¤´çå¼ã</summary>
      <returns>è¿å <see cref="T:System.Net.Http.Headers.HttpHeaderValueCollection`1" />ã è¯·æ± HTTP ç Warning æ é¢çå¼ã</returns>
    </member>
    <member name="T:System.Net.Http.Headers.HttpResponseHeaders">
      <summary>è¡¨ç¤ºå¨ RFC 2616 ä¸­å®ä¹çâåå®¹æ é¢âçéåã</summary>
    </member>
    <member name="P:System.Net.Http.Headers.HttpResponseHeaders.AcceptRanges">
      <summary>è·å HTTP è¯·æ±ç Accept-Ranges æ å¤´çå¼ã</summary>
      <returns>è¿å <see cref="T:System.Net.Http.Headers.HttpHeaderValueCollection`1" />ã è¯·æ± HTTP ç Accept-Ranges æ é¢çå¼ã</returns>
    </member>
    <member name="P:System.Net.Http.Headers.HttpResponseHeaders.Age">
      <summary>è·åæè®¾ç½® HTTP ååºç Age æ å¤´å¼ã</summary>
      <returns>è¿å <see cref="T:System.TimeSpan" />ã è¯·æ± HTTP ç Age æ é¢çå¼ã</returns>
    </member>
    <member name="P:System.Net.Http.Headers.HttpResponseHeaders.CacheControl">
      <summary>è·åæè®¾ç½® HTTP ååºç Cache-Control æ å¤´å¼ã</summary>
      <returns>è¿å <see cref="T:System.Net.Http.Headers.CacheControlHeaderValue" />ã è¯·æ± HTTP ç Cache-Control æ é¢çå¼ã</returns>
    </member>
    <member name="P:System.Net.Http.Headers.HttpResponseHeaders.Connection">
      <summary>è·å HTTP è¯·æ±ç Connection æ å¤´çå¼ã</summary>
      <returns>è¿å <see cref="T:System.Net.Http.Headers.HttpHeaderValueCollection`1" />ã è¯·æ± HTTP ç Connection æ é¢çå¼ã</returns>
    </member>
    <member name="P:System.Net.Http.Headers.HttpResponseHeaders.ConnectionClose">
      <summary>è·åæè®¾ç½®æç¤º HTTP ååºç Connection æ å¤´æ¯å¦åºåå« Close çå¼ã</summary>
      <returns>è¿å <see cref="T:System.Boolean" />ã å¦æ Connection æ å¤´åå«å³é­ï¼åä¸º trueï¼å¦å falseã</returns>
    </member>
    <member name="P:System.Net.Http.Headers.HttpResponseHeaders.Date">
      <summary>è·åæè®¾ç½® HTTP ååºç Date æ å¤´å¼ã</summary>
      <returns>è¿å <see cref="T:System.DateTimeOffset" />ã è¯·æ± HTTP ç Date æ é¢çå¼ã</returns>
    </member>
    <member name="P:System.Net.Http.Headers.HttpResponseHeaders.ETag">
      <summary>è·åæè®¾ç½® HTTP ååºç ETag æ å¤´å¼ã</summary>
      <returns>è¿å <see cref="T:System.Net.Http.Headers.EntityTagHeaderValue" />ã è¯·æ± HTTP ç ETag æ é¢çå¼ã</returns>
    </member>
    <member name="P:System.Net.Http.Headers.HttpResponseHeaders.Location">
      <summary>è·åæè®¾ç½® HTTP ååºç Location æ å¤´å¼ã</summary>
      <returns>è¿å <see cref="T:System.Uri" />ã è¯·æ± HTTP ç Location æ é¢çå¼ã</returns>
    </member>
    <member name="P:System.Net.Http.Headers.HttpResponseHeaders.Pragma">
      <summary>è·å HTTP è¯·æ±ç Pragma æ å¤´çå¼ã</summary>
      <returns>è¿å <see cref="T:System.Net.Http.Headers.HttpHeaderValueCollection`1" />ã è¯·æ± HTTP ç Pragma æ é¢çå¼ã</returns>
    </member>
    <member name="P:System.Net.Http.Headers.HttpResponseHeaders.ProxyAuthenticate">
      <summary>è·å HTTP è¯·æ±ç Proxy-Authenticate æ å¤´çå¼ã</summary>
      <returns>è¿å <see cref="T:System.Net.Http.Headers.HttpHeaderValueCollection`1" />ã è¯·æ± HTTP ç Proxy-Authenticate æ é¢çå¼ã</returns>
    </member>
    <member name="P:System.Net.Http.Headers.HttpResponseHeaders.RetryAfter">
      <summary>è·åæè®¾ç½® HTTP ååºç Retry-After æ å¤´å¼ã</summary>
      <returns>è¿å <see cref="T:System.Net.Http.Headers.RetryConditionHeaderValue" />ã è¯·æ± HTTP ç Retry-After æ é¢çå¼ã</returns>
    </member>
    <member name="P:System.Net.Http.Headers.HttpResponseHeaders.Server">
      <summary>è·å HTTP è¯·æ±ç Server æ å¤´çå¼ã</summary>
      <returns>è¿å <see cref="T:System.Net.Http.Headers.HttpHeaderValueCollection`1" />ã è¯·æ± HTTP ç Server æ é¢çå¼ã</returns>
    </member>
    <member name="P:System.Net.Http.Headers.HttpResponseHeaders.Trailer">
      <summary>è·å HTTP è¯·æ±ç Trailer æ å¤´çå¼ã</summary>
      <returns>è¿å <see cref="T:System.Net.Http.Headers.HttpHeaderValueCollection`1" />ã è¯·æ± HTTP ç Trailer æ é¢çå¼ã</returns>
    </member>
    <member name="P:System.Net.Http.Headers.HttpResponseHeaders.TransferEncoding">
      <summary>è·å HTTP è¯·æ±ç Transfer-Encoding æ å¤´çå¼ã</summary>
      <returns>è¿å <see cref="T:System.Net.Http.Headers.HttpHeaderValueCollection`1" />ã è¯·æ± HTTP ç Transfer-Encoding æ é¢çå¼ã</returns>
    </member>
    <member name="P:System.Net.Http.Headers.HttpResponseHeaders.TransferEncodingChunked">
      <summary>è·åæè®¾ç½®æç¤º HTTP ååºç Transfer-Encoding æ å¤´æ¯å¦åºåå« chunked çå¼ã</summary>
      <returns>è¿å <see cref="T:System.Boolean" />ã å¦æ Transfer-Encoding æ å¤´åå«ååï¼åä¸º trueï¼å¦å falseã</returns>
    </member>
    <member name="P:System.Net.Http.Headers.HttpResponseHeaders.Upgrade">
      <summary>è·å HTTP è¯·æ±ç Upgrade æ å¤´çå¼ã</summary>
      <returns>è¿å <see cref="T:System.Net.Http.Headers.HttpHeaderValueCollection`1" />ã è¯·æ± HTTP ç Upgrade æ é¢çå¼ã</returns>
    </member>
    <member name="P:System.Net.Http.Headers.HttpResponseHeaders.Vary">
      <summary>è·å HTTP è¯·æ±ç Vary æ å¤´çå¼ã</summary>
      <returns>è¿å <see cref="T:System.Net.Http.Headers.HttpHeaderValueCollection`1" />ã è¯·æ± HTTP ç Vary æ é¢çå¼ã</returns>
    </member>
    <member name="P:System.Net.Http.Headers.HttpResponseHeaders.Via">
      <summary>è·å HTTP è¯·æ±ç Via æ å¤´çå¼ã</summary>
      <returns>è¿å <see cref="T:System.Net.Http.Headers.HttpHeaderValueCollection`1" />ã è¯·æ± HTTP ç Via æ é¢çå¼ã</returns>
    </member>
    <member name="P:System.Net.Http.Headers.HttpResponseHeaders.Warning">
      <summary>è·å HTTP è¯·æ±ç Warning æ å¤´çå¼ã</summary>
      <returns>è¿å <see cref="T:System.Net.Http.Headers.HttpHeaderValueCollection`1" />ã è¯·æ± HTTP ç Warning æ é¢çå¼ã</returns>
    </member>
    <member name="P:System.Net.Http.Headers.HttpResponseHeaders.WwwAuthenticate">
      <summary>è·å HTTP è¯·æ±ç WWW-Authenticate æ å¤´çå¼ã</summary>
      <returns>è¿å <see cref="T:System.Net.Http.Headers.HttpHeaderValueCollection`1" />ã è¯·æ± HTTP ç WWW-Authenticate æ é¢çå¼ã</returns>
    </member>
    <member name="T:System.Net.Http.Headers.MediaTypeHeaderValue">
      <summary>è¡¨ç¤ºåªä½ç±»åï¼å¦ä¸­ RFC 2616 å®ä¹ã</summary>
    </member>
    <member name="M:System.Net.Http.Headers.MediaTypeHeaderValue.#ctor(System.Net.Http.Headers.MediaTypeHeaderValue)">
    </member>
    <member name="M:System.Net.Http.Headers.MediaTypeHeaderValue.#ctor(System.String)">
    </member>
    <member name="P:System.Net.Http.Headers.MediaTypeHeaderValue.CharSet">
      <returns>è¿å <see cref="T:System.String" />ã</returns>
    </member>
    <member name="M:System.Net.Http.Headers.MediaTypeHeaderValue.Equals(System.Object)">
      <returns>è¿å <see cref="T:System.Boolean" />ã</returns>
    </member>
    <member name="M:System.Net.Http.Headers.MediaTypeHeaderValue.GetHashCode">
      <returns>è¿å <see cref="T:System.Int32" />ã</returns>
    </member>
    <member name="P:System.Net.Http.Headers.MediaTypeHeaderValue.MediaType">
      <returns>è¿å <see cref="T:System.String" />ã</returns>
    </member>
    <member name="P:System.Net.Http.Headers.MediaTypeHeaderValue.Parameters">
      <returns>è¿å <see cref="T:System.Collections.Generic.ICollection`1" />ã</returns>
    </member>
    <member name="M:System.Net.Http.Headers.MediaTypeHeaderValue.Parse(System.String)">
      <returns>è¿å <see cref="T:System.Net.Http.Headers.MediaTypeHeaderValue" />ã</returns>
    </member>
    <member name="M:System.Net.Http.Headers.MediaTypeHeaderValue.System#ICloneable#Clone">
      <returns>è¿å <see cref="T:System.Object" />ã</returns>
    </member>
    <member name="M:System.Net.Http.Headers.MediaTypeHeaderValue.ToString">
      <returns>è¿å <see cref="T:System.String" />ã</returns>
    </member>
    <member name="M:System.Net.Http.Headers.MediaTypeHeaderValue.TryParse(System.String,System.Net.Http.Headers.MediaTypeHeaderValue@)">
      <returns>è¿å <see cref="T:System.Boolean" />ã</returns>
    </member>
    <member name="T:System.Net.Http.Headers.MediaTypeWithQualityHeaderValue">
      <summary>è¡¨ç¤ºå·æé¢å¤è´¨éçåå®¹åæ é¢å¼ã</summary>
    </member>
    <member name="M:System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.#ctor(System.String)">
    </member>
    <member name="M:System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.#ctor(System.String,System.Double)">
    </member>
    <member name="M:System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse(System.String)">
      <returns>è¿å <see cref="T:System.Net.Http.Headers.MediaTypeWithQualityHeaderValue" />ã</returns>
    </member>
    <member name="P:System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Quality">
      <returns>è¿å <see cref="T:System.Double" />ã</returns>
    </member>
    <member name="M:System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.System#ICloneable#Clone">
      <returns>è¿å <see cref="T:System.Object" />ã</returns>
    </member>
    <member name="M:System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.TryParse(System.String,System.Net.Http.Headers.MediaTypeWithQualityHeaderValue@)">
      <returns>è¿å <see cref="T:System.Boolean" />ã</returns>
    </member>
    <member name="T:System.Net.Http.Headers.NameValueHeaderValue">
      <summary>è¡¨ç¤ºä¸ä¸ªåç§°/å¼å¯¹ã</summary>
    </member>
    <member name="M:System.Net.Http.Headers.NameValueHeaderValue.#ctor(System.Net.Http.Headers.NameValueHeaderValue)">
    </member>
    <member name="M:System.Net.Http.Headers.NameValueHeaderValue.#ctor(System.String)">
    </member>
    <member name="M:System.Net.Http.Headers.NameValueHeaderValue.#ctor(System.String,System.String)">
    </member>
    <member name="M:System.Net.Http.Headers.NameValueHeaderValue.Equals(System.Object)">
      <returns>è¿å <see cref="T:System.Boolean" />ã</returns>
    </member>
    <member name="M:System.Net.Http.Headers.NameValueHeaderValue.GetHashCode">
      <returns>è¿å <see cref="T:System.Int32" />ã</returns>
    </member>
    <member name="P:System.Net.Http.Headers.NameValueHeaderValue.Name">
      <returns>è¿å <see cref="T:System.String" />ã</returns>
    </member>
    <member name="M:System.Net.Http.Headers.NameValueHeaderValue.Parse(System.String)">
      <returns>è¿å <see cref="T:System.Net.Http.Headers.NameValueHeaderValue" />ã</returns>
    </member>
    <member name="M:System.Net.Http.Headers.NameValueHeaderValue.System#ICloneable#Clone">
      <returns>è¿å <see cref="T:System.Object" />ã</returns>
    </member>
    <member name="M:System.Net.Http.Headers.NameValueHeaderValue.ToString">
      <returns>è¿å <see cref="T:System.String" />ã</returns>
    </member>
    <member name="M:System.Net.Http.Headers.NameValueHeaderValue.TryParse(System.String,System.Net.Http.Headers.NameValueHeaderValue@)">
      <returns>è¿å <see cref="T:System.Boolean" />ã</returns>
    </member>
    <member name="P:System.Net.Http.Headers.NameValueHeaderValue.Value">
      <returns>è¿å <see cref="T:System.String" />ã</returns>
    </member>
    <member name="T:System.Net.Http.Headers.NameValueWithParametersHeaderValue">
      <summary>è¡¨ç¤ºå·æåæ°çåç§°/å¼å¯¹ã</summary>
    </member>
    <member name="M:System.Net.Http.Headers.NameValueWithParametersHeaderValue.#ctor(System.Net.Http.Headers.NameValueWithParametersHeaderValue)">
    </member>
    <member name="M:System.Net.Http.Headers.NameValueWithParametersHeaderValue.#ctor(System.String)">
    </member>
    <member name="M:System.Net.Http.Headers.NameValueWithParametersHeaderValue.#ctor(System.String,System.String)">
    </member>
    <member name="M:System.Net.Http.Headers.NameValueWithParametersHeaderValue.Equals(System.Object)">
      <returns>è¿å <see cref="T:System.Boolean" />ã</returns>
    </member>
    <member name="M:System.Net.Http.Headers.NameValueWithParametersHeaderValue.GetHashCode">
      <returns>è¿å <see cref="T:System.Int32" />ã</returns>
    </member>
    <member name="P:System.Net.Http.Headers.NameValueWithParametersHeaderValue.Parameters">
      <returns>è¿å <see cref="T:System.Collections.Generic.ICollection`1" />ã</returns>
    </member>
    <member name="M:System.Net.Http.Headers.NameValueWithParametersHeaderValue.Parse(System.String)">
      <returns>è¿å <see cref="T:System.Net.Http.Headers.NameValueWithParametersHeaderValue" />ã</returns>
    </member>
    <member name="M:System.Net.Http.Headers.NameValueWithParametersHeaderValue.System#ICloneable#Clone">
      <returns>è¿å <see cref="T:System.Object" />ã</returns>
    </member>
    <member name="M:System.Net.Http.Headers.NameValueWithParametersHeaderValue.ToString">
      <returns>è¿å <see cref="T:System.String" />ã</returns>
    </member>
    <member name="M:System.Net.Http.Headers.NameValueWithParametersHeaderValue.TryParse(System.String,System.Net.Http.Headers.NameValueWithParametersHeaderValue@)">
      <returns>è¿å <see cref="T:System.Boolean" />ã</returns>
    </member>
    <member name="T:System.Net.Http.Headers.ProductHeaderValue">
      <summary>è¡¨ç¤ºäº§åæ å¤´å¼ã</summary>
    </member>
    <member name="M:System.Net.Http.Headers.ProductHeaderValue.#ctor(System.String)">
    </member>
    <member name="M:System.Net.Http.Headers.ProductHeaderValue.#ctor(System.String,System.String)">
    </member>
    <member name="M:System.Net.Http.Headers.ProductHeaderValue.Equals(System.Object)">
      <returns>è¿å <see cref="T:System.Boolean" />ã</returns>
    </member>
    <member name="M:System.Net.Http.Headers.ProductHeaderValue.GetHashCode">
      <returns>è¿å <see cref="T:System.Int32" />ã</returns>
    </member>
    <member name="P:System.Net.Http.Headers.ProductHeaderValue.Name">
      <returns>è¿å <see cref="T:System.String" />ã</returns>
    </member>
    <member name="M:System.Net.Http.Headers.ProductHeaderValue.Parse(System.String)">
      <returns>è¿å <see cref="T:System.Net.Http.Headers.ProductHeaderValue" />ã</returns>
    </member>
    <member name="M:System.Net.Http.Headers.ProductHeaderValue.System#ICloneable#Clone">
      <returns>è¿å <see cref="T:System.Object" />ã</returns>
    </member>
    <member name="M:System.Net.Http.Headers.ProductHeaderValue.ToString">
      <returns>è¿å <see cref="T:System.String" />ã</returns>
    </member>
    <member name="M:System.Net.Http.Headers.ProductHeaderValue.TryParse(System.String,System.Net.Http.Headers.ProductHeaderValue@)">
      <returns>è¿å <see cref="T:System.Boolean" />ã</returns>
    </member>
    <member name="P:System.Net.Http.Headers.ProductHeaderValue.Version">
      <returns>è¿å <see cref="T:System.String" />ã</returns>
    </member>
    <member name="T:System.Net.Http.Headers.ProductInfoHeaderValue">
      <summary>è¡¨ç¤ºå¼ï¼å¶å¯ä¸ºäº§åææ³¨éã</summary>
    </member>
    <member name="M:System.Net.Http.Headers.ProductInfoHeaderValue.#ctor(System.Net.Http.Headers.ProductHeaderValue)">
    </member>
    <member name="M:System.Net.Http.Headers.ProductInfoHeaderValue.#ctor(System.String)">
    </member>
    <member name="M:System.Net.Http.Headers.ProductInfoHeaderValue.#ctor(System.String,System.String)">
    </member>
    <member name="P:System.Net.Http.Headers.ProductInfoHeaderValue.Comment">
      <returns>è¿å <see cref="T:System.String" />ã</returns>
    </member>
    <member name="M:System.Net.Http.Headers.ProductInfoHeaderValue.Equals(System.Object)">
      <returns>è¿å <see cref="T:System.Boolean" />ã</returns>
    </member>
    <member name="M:System.Net.Http.Headers.ProductInfoHeaderValue.GetHashCode">
      <returns>è¿å <see cref="T:System.Int32" />ã</returns>
    </member>
    <member name="M:System.Net.Http.Headers.ProductInfoHeaderValue.Parse(System.String)">
      <returns>è¿å <see cref="T:System.Net.Http.Headers.ProductInfoHeaderValue" />ã</returns>
    </member>
    <member name="P:System.Net.Http.Headers.ProductInfoHeaderValue.Product">
      <returns>è¿å <see cref="T:System.Net.Http.Headers.ProductHeaderValue" />ã</returns>
    </member>
    <member name="M:System.Net.Http.Headers.ProductInfoHeaderValue.System#ICloneable#Clone">
      <returns>è¿å <see cref="T:System.Object" />ã</returns>
    </member>
    <member name="M:System.Net.Http.Headers.ProductInfoHeaderValue.ToString">
      <returns>è¿å <see cref="T:System.String" />ã</returns>
    </member>
    <member name="M:System.Net.Http.Headers.ProductInfoHeaderValue.TryParse(System.String,System.Net.Http.Headers.ProductInfoHeaderValue@)">
      <returns>è¿å <see cref="T:System.Boolean" />ã</returns>
    </member>
    <member name="T:System.Net.Http.Headers.RangeConditionHeaderValue">
      <summary>è¡¨ç¤ºæ é¢å¼ï¼å¶å¯ä¸ºæ¥æ/äºä»¶æå®ä½æ è®°å¼ã</summary>
    </member>
    <member name="M:System.Net.Http.Headers.RangeConditionHeaderValue.#ctor(System.DateTimeOffset)">
    </member>
    <member name="M:System.Net.Http.Headers.RangeConditionHeaderValue.#ctor(System.Net.Http.Headers.EntityTagHeaderValue)">
    </member>
    <member name="M:System.Net.Http.Headers.RangeConditionHeaderValue.#ctor(System.String)">
    </member>
    <member name="P:System.Net.Http.Headers.RangeConditionHeaderValue.Date">
      <returns>è¿å <see cref="T:System.DateTimeOffset" />ã</returns>
    </member>
    <member name="P:System.Net.Http.Headers.RangeConditionHeaderValue.EntityTag">
      <returns>è¿å <see cref="T:System.Net.Http.Headers.EntityTagHeaderValue" />ã</returns>
    </member>
    <member name="M:System.Net.Http.Headers.RangeConditionHeaderValue.Equals(System.Object)">
      <returns>è¿å <see cref="T:System.Boolean" />ã</returns>
    </member>
    <member name="M:System.Net.Http.Headers.RangeConditionHeaderValue.GetHashCode">
      <returns>è¿å <see cref="T:System.Int32" />ã</returns>
    </member>
    <member name="M:System.Net.Http.Headers.RangeConditionHeaderValue.Parse(System.String)">
      <returns>è¿å <see cref="T:System.Net.Http.Headers.RangeConditionHeaderValue" />ã</returns>
    </member>
    <member name="M:System.Net.Http.Headers.RangeConditionHeaderValue.System#ICloneable#Clone">
      <returns>è¿å <see cref="T:System.Object" />ã</returns>
    </member>
    <member name="M:System.Net.Http.Headers.RangeConditionHeaderValue.ToString">
      <returns>è¿å <see cref="T:System.String" />ã</returns>
    </member>
    <member name="M:System.Net.Http.Headers.RangeConditionHeaderValue.TryParse(System.String,System.Net.Http.Headers.RangeConditionHeaderValue@)">
      <returns>è¿å <see cref="T:System.Boolean" />ã</returns>
    </member>
    <member name="T:System.Net.Http.Headers.RangeHeaderValue">
      <summary>è¡¨ç¤º Range æ å¤´çå¼ã</summary>
    </member>
    <member name="M:System.Net.Http.Headers.RangeHeaderValue.#ctor">
    </member>
    <member name="M:System.Net.Http.Headers.RangeHeaderValue.#ctor(System.Nullable{System.Int64},System.Nullable{System.Int64})">
    </member>
    <member name="M:System.Net.Http.Headers.RangeHeaderValue.Equals(System.Object)">
      <returns>è¿å <see cref="T:System.Boolean" />ã</returns>
    </member>
    <member name="M:System.Net.Http.Headers.RangeHeaderValue.GetHashCode">
      <returns>è¿å <see cref="T:System.Int32" />ã</returns>
    </member>
    <member name="M:System.Net.Http.Headers.RangeHeaderValue.Parse(System.String)">
      <returns>è¿å <see cref="T:System.Net.Http.Headers.RangeHeaderValue" />ã</returns>
    </member>
    <member name="P:System.Net.Http.Headers.RangeHeaderValue.Ranges">
      <returns>è¿å <see cref="T:System.Collections.Generic.ICollection`1" />ã</returns>
    </member>
    <member name="M:System.Net.Http.Headers.RangeHeaderValue.System#ICloneable#Clone">
      <returns>è¿å <see cref="T:System.Object" />ã</returns>
    </member>
    <member name="M:System.Net.Http.Headers.RangeHeaderValue.ToString">
      <returns>è¿å <see cref="T:System.String" />ã</returns>
    </member>
    <member name="M:System.Net.Http.Headers.RangeHeaderValue.TryParse(System.String,System.Net.Http.Headers.RangeHeaderValue@)">
      <returns>è¿å <see cref="T:System.Boolean" />ã</returns>
    </member>
    <member name="P:System.Net.Http.Headers.RangeHeaderValue.Unit">
      <returns>è¿å <see cref="T:System.String" />ã</returns>
    </member>
    <member name="T:System.Net.Http.Headers.RangeItemHeaderValue">
      <summary>è¡¨ç¤ºå­èèå´æ å¤´å¼ã</summary>
    </member>
    <member name="M:System.Net.Http.Headers.RangeItemHeaderValue.#ctor(System.Nullable{System.Int64},System.Nullable{System.Int64})">
    </member>
    <member name="M:System.Net.Http.Headers.RangeItemHeaderValue.Equals(System.Object)">
      <returns>è¿å <see cref="T:System.Boolean" />ã</returns>
    </member>
    <member name="P:System.Net.Http.Headers.RangeItemHeaderValue.From">
      <returns>è¿å <see cref="T:System.Int64" />ã</returns>
    </member>
    <member name="M:System.Net.Http.Headers.RangeItemHeaderValue.GetHashCode">
      <returns>è¿å <see cref="T:System.Int32" />ã</returns>
    </member>
    <member name="M:System.Net.Http.Headers.RangeItemHeaderValue.System#ICloneable#Clone">
      <returns>è¿å <see cref="T:System.Object" />ã</returns>
    </member>
    <member name="P:System.Net.Http.Headers.RangeItemHeaderValue.To">
      <returns>è¿å <see cref="T:System.Int64" />ã</returns>
    </member>
    <member name="M:System.Net.Http.Headers.RangeItemHeaderValue.ToString">
      <returns>è¿å <see cref="T:System.String" />ã</returns>
    </member>
    <member name="T:System.Net.Http.Headers.RetryConditionHeaderValue">
      <summary>è¡¨ç¤ºæ é¢å¼ï¼å¶å¯ä¸ºæ¥æ/äºä»¶ææ¶é´è·¨åº¦å¼ã</summary>
    </member>
    <member name="M:System.Net.Http.Headers.RetryConditionHeaderValue.#ctor(System.DateTimeOffset)">
    </member>
    <member name="M:System.Net.Http.Headers.RetryConditionHeaderValue.#ctor(System.TimeSpan)">
    </member>
    <member name="P:System.Net.Http.Headers.RetryConditionHeaderValue.Date">
      <returns>è¿å <see cref="T:System.DateTimeOffset" />ã</returns>
    </member>
    <member name="P:System.Net.Http.Headers.RetryConditionHeaderValue.Delta">
      <returns>è¿å <see cref="T:System.TimeSpan" />ã</returns>
    </member>
    <member name="M:System.Net.Http.Headers.RetryConditionHeaderValue.Equals(System.Object)">
      <returns>è¿å <see cref="T:System.Boolean" />ã</returns>
    </member>
    <member name="M:System.Net.Http.Headers.RetryConditionHeaderValue.GetHashCode">
      <returns>è¿å <see cref="T:System.Int32" />ã</returns>
    </member>
    <member name="M:System.Net.Http.Headers.RetryConditionHeaderValue.Parse(System.String)">
      <returns>è¿å <see cref="T:System.Net.Http.Headers.RetryConditionHeaderValue" />ã</returns>
    </member>
    <member name="M:System.Net.Http.Headers.RetryConditionHeaderValue.System#ICloneable#Clone">
      <returns>è¿å <see cref="T:System.Object" />ã</returns>
    </member>
    <member name="M:System.Net.Http.Headers.RetryConditionHeaderValue.ToString">
      <returns>è¿å <see cref="T:System.String" />ã</returns>
    </member>
    <member name="M:System.Net.Http.Headers.RetryConditionHeaderValue.TryParse(System.String,System.Net.Http.Headers.RetryConditionHeaderValue@)">
      <returns>è¿å <see cref="T:System.Boolean" />ã</returns>
    </member>
    <member name="T:System.Net.Http.Headers.StringWithQualityHeaderValue">
      <summary>è¡¨ç¤ºå·æå¯éå¤è´¨éçå­ç¬¦ä¸²æ é¢å¼ã</summary>
    </member>
    <member name="M:System.Net.Http.Headers.StringWithQualityHeaderValue.#ctor(System.String)">
    </member>
    <member name="M:System.Net.Http.Headers.StringWithQualityHeaderValue.#ctor(System.String,System.Double)">
    </member>
    <member name="M:System.Net.Http.Headers.StringWithQualityHeaderValue.Equals(System.Object)">
      <returns>è¿å <see cref="T:System.Boolean" />ã</returns>
    </member>
    <member name="M:System.Net.Http.Headers.StringWithQualityHeaderValue.GetHashCode">
      <returns>è¿å <see cref="T:System.Int32" />ã</returns>
    </member>
    <member name="M:System.Net.Http.Headers.StringWithQualityHeaderValue.Parse(System.String)">
      <returns>è¿å <see cref="T:System.Net.Http.Headers.StringWithQualityHeaderValue" />ã</returns>
    </member>
    <member name="P:System.Net.Http.Headers.StringWithQualityHeaderValue.Quality">
      <returns>è¿å <see cref="T:System.Double" />ã</returns>
    </member>
    <member name="M:System.Net.Http.Headers.StringWithQualityHeaderValue.System#ICloneable#Clone">
      <returns>è¿å <see cref="T:System.Object" />ã</returns>
    </member>
    <member name="M:System.Net.Http.Headers.StringWithQualityHeaderValue.ToString">
      <returns>è¿å <see cref="T:System.String" />ã</returns>
    </member>
    <member name="M:System.Net.Http.Headers.StringWithQualityHeaderValue.TryParse(System.String,System.Net.Http.Headers.StringWithQualityHeaderValue@)">
      <returns>è¿å <see cref="T:System.Boolean" />ã</returns>
    </member>
    <member name="P:System.Net.Http.Headers.StringWithQualityHeaderValue.Value">
      <returns>è¿å <see cref="T:System.String" />ã</returns>
    </member>
    <member name="T:System.Net.Http.Headers.TransferCodingHeaderValue">
      <summary>è¡¨ç¤ºä¼ è¾ç¼ç æ å¤´å¼ã</summary>
    </member>
    <member name="M:System.Net.Http.Headers.TransferCodingHeaderValue.#ctor(System.Net.Http.Headers.TransferCodingHeaderValue)">
    </member>
    <member name="M:System.Net.Http.Headers.TransferCodingHeaderValue.#ctor(System.String)">
    </member>
    <member name="M:System.Net.Http.Headers.TransferCodingHeaderValue.Equals(System.Object)">
      <returns>è¿å <see cref="T:System.Boolean" />ã</returns>
    </member>
    <member name="M:System.Net.Http.Headers.TransferCodingHeaderValue.GetHashCode">
      <returns>è¿å <see cref="T:System.Int32" />ã</returns>
    </member>
    <member name="P:System.Net.Http.Headers.TransferCodingHeaderValue.Parameters">
      <returns>è¿å <see cref="T:System.Collections.Generic.ICollection`1" />ã</returns>
    </member>
    <member name="M:System.Net.Http.Headers.TransferCodingHeaderValue.Parse(System.String)">
      <returns>è¿å <see cref="T:System.Net.Http.Headers.TransferCodingHeaderValue" />ã</returns>
    </member>
    <member name="M:System.Net.Http.Headers.TransferCodingHeaderValue.System#ICloneable#Clone">
      <returns>è¿å <see cref="T:System.Object" />ã</returns>
    </member>
    <member name="M:System.Net.Http.Headers.TransferCodingHeaderValue.ToString">
      <returns>è¿å <see cref="T:System.String" />ã</returns>
    </member>
    <member name="M:System.Net.Http.Headers.TransferCodingHeaderValue.TryParse(System.String,System.Net.Http.Headers.TransferCodingHeaderValue@)">
      <returns>è¿å <see cref="T:System.Boolean" />ã</returns>
    </member>
    <member name="P:System.Net.Http.Headers.TransferCodingHeaderValue.Value">
      <returns>è¿å <see cref="T:System.String" />ã</returns>
    </member>
    <member name="T:System.Net.Http.Headers.TransferCodingWithQualityHeaderValue">
      <summary>è¡¨ç¤ºå·æå¯éé¢å¤è´¨éçä¼ è¾ç¼ç æ å¤´å¼ã</summary>
    </member>
    <member name="M:System.Net.Http.Headers.TransferCodingWithQualityHeaderValue.#ctor(System.String)">
    </member>
    <member name="M:System.Net.Http.Headers.TransferCodingWithQualityHeaderValue.#ctor(System.String,System.Double)">
    </member>
    <member name="M:System.Net.Http.Headers.TransferCodingWithQualityHeaderValue.Parse(System.String)">
      <returns>è¿å <see cref="T:System.Net.Http.Headers.TransferCodingWithQualityHeaderValue" />ã</returns>
    </member>
    <member name="P:System.Net.Http.Headers.TransferCodingWithQualityHeaderValue.Quality">
      <returns>è¿å <see cref="T:System.Double" />ã</returns>
    </member>
    <member name="M:System.Net.Http.Headers.TransferCodingWithQualityHeaderValue.System#ICloneable#Clone">
      <returns>è¿å <see cref="T:System.Object" />ã</returns>
    </member>
    <member name="M:System.Net.Http.Headers.TransferCodingWithQualityHeaderValue.TryParse(System.String,System.Net.Http.Headers.TransferCodingWithQualityHeaderValue@)">
      <returns>è¿å <see cref="T:System.Boolean" />ã</returns>
    </member>
    <member name="T:System.Net.Http.Headers.ViaHeaderValue">
      <summary>è¡¨ç¤º Via æ å¤´çå¼ã</summary>
    </member>
    <member name="M:System.Net.Http.Headers.ViaHeaderValue.#ctor(System.String,System.String)">
    </member>
    <member name="M:System.Net.Http.Headers.ViaHeaderValue.#ctor(System.String,System.String,System.String)">
    </member>
    <member name="M:System.Net.Http.Headers.ViaHeaderValue.#ctor(System.String,System.String,System.String,System.String)">
    </member>
    <member name="P:System.Net.Http.Headers.ViaHeaderValue.Comment">
      <returns>è¿å <see cref="T:System.String" />ã</returns>
    </member>
    <member name="M:System.Net.Http.Headers.ViaHeaderValue.Equals(System.Object)">
      <returns>è¿å <see cref="T:System.Boolean" />ã</returns>
    </member>
    <member name="M:System.Net.Http.Headers.ViaHeaderValue.GetHashCode">
      <returns>è¿å <see cref="T:System.Int32" />ã</returns>
    </member>
    <member name="M:System.Net.Http.Headers.ViaHeaderValue.Parse(System.String)">
      <returns>è¿å <see cref="T:System.Net.Http.Headers.ViaHeaderValue" />ã</returns>
    </member>
    <member name="P:System.Net.Http.Headers.ViaHeaderValue.ProtocolName">
      <returns>è¿å <see cref="T:System.String" />ã</returns>
    </member>
    <member name="P:System.Net.Http.Headers.ViaHeaderValue.ProtocolVersion">
      <returns>è¿å <see cref="T:System.String" />ã</returns>
    </member>
    <member name="P:System.Net.Http.Headers.ViaHeaderValue.ReceivedBy">
      <returns>è¿å <see cref="T:System.String" />ã</returns>
    </member>
    <member name="M:System.Net.Http.Headers.ViaHeaderValue.System#ICloneable#Clone">
      <returns>è¿å <see cref="T:System.Object" />ã</returns>
    </member>
    <member name="M:System.Net.Http.Headers.ViaHeaderValue.ToString">
      <returns>è¿å <see cref="T:System.String" />ã</returns>
    </member>
    <member name="M:System.Net.Http.Headers.ViaHeaderValue.TryParse(System.String,System.Net.Http.Headers.ViaHeaderValue@)">
      <returns>è¿å <see cref="T:System.Boolean" />ã</returns>
    </member>
    <member name="T:System.Net.Http.Headers.WarningHeaderValue">
      <summary>è¡¨ç¤ºè­¦åæ é¢ä½¿ç¨çè­¦åå¼ã</summary>
    </member>
    <member name="M:System.Net.Http.Headers.WarningHeaderValue.#ctor(System.Int32,System.String,System.String)">
    </member>
    <member name="M:System.Net.Http.Headers.WarningHeaderValue.#ctor(System.Int32,System.String,System.String,System.DateTimeOffset)">
    </member>
    <member name="P:System.Net.Http.Headers.WarningHeaderValue.Agent">
      <returns>è¿å <see cref="T:System.String" />ã</returns>
    </member>
    <member name="P:System.Net.Http.Headers.WarningHeaderValue.Code">
      <returns>è¿å <see cref="T:System.Int32" />ã</returns>
    </member>
    <member name="P:System.Net.Http.Headers.WarningHeaderValue.Date">
      <returns>è¿å <see cref="T:System.DateTimeOffset" />ã</returns>
    </member>
    <member name="M:System.Net.Http.Headers.WarningHeaderValue.Equals(System.Object)">
      <returns>è¿å <see cref="T:System.Boolean" />ã</returns>
    </member>
    <member name="M:System.Net.Http.Headers.WarningHeaderValue.GetHashCode">
      <returns>è¿å <see cref="T:System.Int32" />ã</returns>
    </member>
    <member name="M:System.Net.Http.Headers.WarningHeaderValue.Parse(System.String)">
      <returns>è¿å <see cref="T:System.Net.Http.Headers.WarningHeaderValue" />ã</returns>
    </member>
    <member name="M:System.Net.Http.Headers.WarningHeaderValue.System#ICloneable#Clone">
      <returns>è¿å <see cref="T:System.Object" />ã</returns>
    </member>
    <member name="P:System.Net.Http.Headers.WarningHeaderValue.Text">
      <returns>è¿å <see cref="T:System.String" />ã</returns>
    </member>
    <member name="M:System.Net.Http.Headers.WarningHeaderValue.ToString">
      <returns>è¿å <see cref="T:System.String" />ã</returns>
    </member>
    <member name="M:System.Net.Http.Headers.WarningHeaderValue.TryParse(System.String,System.Net.Http.Headers.WarningHeaderValue@)">
      <returns>è¿å <see cref="T:System.Boolean" />ã</returns>
    </member>
  </members>
>>>>>>> 0daec768afcc757c83c424118f28374d34e3dc64
</doc>