//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.17929
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace WebApplication1.CompositionServiceReference {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="CompositionServiceReference.ICompositionService")]
    public interface ICompositionService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICompositionService/QueryCompositionByAuthorUserId", ReplyAction="http://tempuri.org/ICompositionService/QueryCompositionByAuthorUserIdResponse")]
        OOC.Entity.Composition[] QueryCompositionByAuthorUserId(int authorUserId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICompositionService/QueryCompositionByKeyword", ReplyAction="http://tempuri.org/ICompositionService/QueryCompositionByKeywordResponse")]
        OOC.Entity.Composition[] QueryCompositionByKeyword(string keyword);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICompositionService/QueryCompositionByModel", ReplyAction="http://tempuri.org/ICompositionService/QueryCompositionByModelResponse")]
        OOC.Entity.Composition[] QueryCompositionByModel(string modelGuid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICompositionService/Create", ReplyAction="http://tempuri.org/ICompositionService/CreateResponse")]
        string Create(int authorUserId, string title, bool isShared, bool isFinished);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICompositionService/GetCompositionModels", ReplyAction="http://tempuri.org/ICompositionService/GetCompositionModelsResponse")]
        OOC.Entity.CompositionModel[] GetCompositionModels(string compositionGuid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICompositionService/GetCompositionModelsData", ReplyAction="http://tempuri.org/ICompositionService/GetCompositionModelsDataResponse")]
        OOC.Contract.Data.Common.CompositionModelData[] GetCompositionModelsData(string compositionGuid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICompositionService/CreateCompositionModel", ReplyAction="http://tempuri.org/ICompositionService/CreateCompositionModelResponse")]
        string CreateCompositionModel(string compositionGuid, string modelGuid, OOC.Contract.Data.Common.CompositionModelProperties properties);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICompositionService/UpdateCompositionModelProperties", ReplyAction="http://tempuri.org/ICompositionService/UpdateCompositionModelPropertiesResponse")]
        void UpdateCompositionModelProperties(string cmGuid, OOC.Contract.Data.Common.CompositionModelProperties properties);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICompositionService/UpdateCompositionModelProperty", ReplyAction="http://tempuri.org/ICompositionService/UpdateCompositionModelPropertyResponse")]
        void UpdateCompositionModelProperty(string cmGuid, string key, string value);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICompositionService/GetCompositionModel", ReplyAction="http://tempuri.org/ICompositionService/GetCompositionModelResponse")]
        OOC.Entity.CompositionModel GetCompositionModel(string cmGuid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICompositionService/GetCompositionModelData", ReplyAction="http://tempuri.org/ICompositionService/GetCompositionModelDataResponse")]
        OOC.Contract.Data.Common.CompositionModelData GetCompositionModelData(string cmGuid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICompositionService/RemoveModel", ReplyAction="http://tempuri.org/ICompositionService/RemoveModelResponse")]
        void RemoveModel(string cmGuid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICompositionService/GetCompositionLinks", ReplyAction="http://tempuri.org/ICompositionService/GetCompositionLinksResponse")]
        OOC.Entity.CompositionLink[] GetCompositionLinks(string compositionGuid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICompositionService/GetCompositionLinksData", ReplyAction="http://tempuri.org/ICompositionService/GetCompositionLinksDataResponse")]
        OOC.Contract.Data.Common.CompositionLinkData[] GetCompositionLinksData(string compositionGuid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICompositionService/CreateCompositionLink", ReplyAction="http://tempuri.org/ICompositionService/CreateCompositionLinkResponse")]
        string CreateCompositionLink(string compositionGuid, string sourceCmGuid, string targetCmGuid, string sourceQuantity, string targetQuantity, string sourceElementSet, string targetElementSet, OOC.Contract.Data.Common.LinkDataOperation dataOperation);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICompositionService/GetCompositionLink", ReplyAction="http://tempuri.org/ICompositionService/GetCompositionLinkResponse")]
        OOC.Entity.CompositionLink GetCompositionLink(string linkGuid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICompositionService/GetCompositionLinkData", ReplyAction="http://tempuri.org/ICompositionService/GetCompositionLinkDataResponse")]
        OOC.Contract.Data.Common.CompositionLinkData GetCompositionLinkData(string linkGuid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICompositionService/RemoveCompositionLink", ReplyAction="http://tempuri.org/ICompositionService/RemoveCompositionLinkResponse")]
        void RemoveCompositionLink(string linkGuid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICompositionService/GetCompositionData", ReplyAction="http://tempuri.org/ICompositionService/GetCompositionDataResponse")]
        OOC.Contract.Data.Common.CompositionData GetCompositionData(string compositionGuid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICompositionService/GenerateInputFileName", ReplyAction="http://tempuri.org/ICompositionService/GenerateInputFileNameResponse")]
        string GenerateInputFileName(string compositionGuid, string modelGuid, string relativePath);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICompositionService/GetInputFileNames", ReplyAction="http://tempuri.org/ICompositionService/GetInputFileNamesResponse")]
        string[] GetInputFileNames(string compositionGuid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICompositionService/UpdateCompositionTitle", ReplyAction="http://tempuri.org/ICompositionService/UpdateCompositionTitleResponse")]
        void UpdateCompositionTitle(string compositionGuid, string title);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ICompositionServiceChannel : WebApplication1.CompositionServiceReference.ICompositionService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class CompositionServiceClient : System.ServiceModel.ClientBase<WebApplication1.CompositionServiceReference.ICompositionService>, WebApplication1.CompositionServiceReference.ICompositionService {
        
        public CompositionServiceClient() {
        }
        
        public CompositionServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public CompositionServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public CompositionServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public CompositionServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public OOC.Entity.Composition[] QueryCompositionByAuthorUserId(int authorUserId) {
            return base.Channel.QueryCompositionByAuthorUserId(authorUserId);
        }
        
        public OOC.Entity.Composition[] QueryCompositionByKeyword(string keyword) {
            return base.Channel.QueryCompositionByKeyword(keyword);
        }
        
        public OOC.Entity.Composition[] QueryCompositionByModel(string modelGuid) {
            return base.Channel.QueryCompositionByModel(modelGuid);
        }
        
        public string Create(int authorUserId, string title, bool isShared, bool isFinished) {
            return base.Channel.Create(authorUserId, title, isShared, isFinished);
        }
        
        public OOC.Entity.CompositionModel[] GetCompositionModels(string compositionGuid) {
            return base.Channel.GetCompositionModels(compositionGuid);
        }
        
        public OOC.Contract.Data.Common.CompositionModelData[] GetCompositionModelsData(string compositionGuid) {
            return base.Channel.GetCompositionModelsData(compositionGuid);
        }
        
        public string CreateCompositionModel(string compositionGuid, string modelGuid, OOC.Contract.Data.Common.CompositionModelProperties properties) {
            return base.Channel.CreateCompositionModel(compositionGuid, modelGuid, properties);
        }
        
        public void UpdateCompositionModelProperties(string cmGuid, OOC.Contract.Data.Common.CompositionModelProperties properties) {
            base.Channel.UpdateCompositionModelProperties(cmGuid, properties);
        }
        
        public void UpdateCompositionModelProperty(string cmGuid, string key, string value) {
            base.Channel.UpdateCompositionModelProperty(cmGuid, key, value);
        }
        
        public OOC.Entity.CompositionModel GetCompositionModel(string cmGuid) {
            return base.Channel.GetCompositionModel(cmGuid);
        }
        
        public OOC.Contract.Data.Common.CompositionModelData GetCompositionModelData(string cmGuid) {
            return base.Channel.GetCompositionModelData(cmGuid);
        }
        
        public void RemoveModel(string cmGuid) {
            base.Channel.RemoveModel(cmGuid);
        }
        
        public OOC.Entity.CompositionLink[] GetCompositionLinks(string compositionGuid) {
            return base.Channel.GetCompositionLinks(compositionGuid);
        }
        
        public OOC.Contract.Data.Common.CompositionLinkData[] GetCompositionLinksData(string compositionGuid) {
            return base.Channel.GetCompositionLinksData(compositionGuid);
        }
        
        public string CreateCompositionLink(string compositionGuid, string sourceCmGuid, string targetCmGuid, string sourceQuantity, string targetQuantity, string sourceElementSet, string targetElementSet, OOC.Contract.Data.Common.LinkDataOperation dataOperation) {
            return base.Channel.CreateCompositionLink(compositionGuid, sourceCmGuid, targetCmGuid, sourceQuantity, targetQuantity, sourceElementSet, targetElementSet, dataOperation);
        }
        
        public OOC.Entity.CompositionLink GetCompositionLink(string linkGuid) {
            return base.Channel.GetCompositionLink(linkGuid);
        }
        
        public OOC.Contract.Data.Common.CompositionLinkData GetCompositionLinkData(string linkGuid) {
            return base.Channel.GetCompositionLinkData(linkGuid);
        }
        
        public void RemoveCompositionLink(string linkGuid) {
            base.Channel.RemoveCompositionLink(linkGuid);
        }
        
        public OOC.Contract.Data.Common.CompositionData GetCompositionData(string compositionGuid) {
            return base.Channel.GetCompositionData(compositionGuid);
        }
        
        public string GenerateInputFileName(string compositionGuid, string modelGuid, string relativePath) {
            return base.Channel.GenerateInputFileName(compositionGuid, modelGuid, relativePath);
        }
        
        public string[] GetInputFileNames(string compositionGuid) {
            return base.Channel.GetInputFileNames(compositionGuid);
        }
        
        public void UpdateCompositionTitle(string compositionGuid, string title) {
            base.Channel.UpdateCompositionTitle(compositionGuid, title);
        }
    }
}
